// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 31.10.2011 9:40:19 from Type Library described below.

// ************************************************************************  //
// Type Lib: E:\Sergey\Project\BC\LisMapObject\LisMap.tlb (1)
// LIBID: {A3C8BF7A-0FB5-486C-A400-18EBF4EB3AF1}
// LCID: 0
// Helpfile: 
// HelpString: LisMap Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   LisMap_TLBH
#define   LisMap_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Lismap_tlb
{

// *********************************************************************//
// HelpString: LisMap Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern "C" const __declspec(selectany) GUID LIBID_LisMap = {0xA3C8BF7A, 0x0FB5, 0x486C,{ 0xA4, 0x00, 0x18,0xEB, 0xF4, 0xEB,0x3A, 0xF1} };
extern "C" const __declspec(selectany) GUID IID_ILisMapX = {0x84A499E4, 0x5C11, 0x4228,{ 0x8A, 0xB3, 0x01,0x0D, 0x97, 0xFA,0x7B, 0x67} };
extern "C" const __declspec(selectany) GUID DIID_ILisMapXEvents = {0x64046E43, 0x84BE, 0x4C54,{ 0x92, 0x6A, 0x6D,0x9C, 0xB8, 0x7D,0xB6, 0xAF} };
extern "C" const __declspec(selectany) GUID CLSID_LisMapX = {0x127E805C, 0x1341, 0x49C8,{ 0x8A, 0x40, 0xB1,0x83, 0x80, 0x7E,0x44, 0xCA} };
extern "C" const __declspec(selectany) GUID GUID_TxActiveFormBorderStyle = {0x264F5192, 0x9CB1, 0x4017,{ 0x97, 0x75, 0x66,0x44, 0x3A, 0x1D,0xCB, 0xC7} };
extern "C" const __declspec(selectany) GUID GUID_TxPrintScale = {0x47A926F6, 0xF6B7, 0x4AA8,{ 0xA3, 0xFB, 0x3B,0xF4, 0x19, 0x2B,0x40, 0x20} };
extern "C" const __declspec(selectany) GUID GUID_MapArrowType = {0x05656FFE, 0x1D87, 0x4F60,{ 0xB8, 0xB1, 0xB6,0x79, 0x3C, 0xE0,0xB8, 0x25} };
extern "C" const __declspec(selectany) GUID GUID_PointType = {0x93CC1B65, 0xDCA7, 0x4ABD,{ 0xA0, 0xD0, 0xEF,0x62, 0xCB, 0x07,0xF4, 0x48} };
extern "C" const __declspec(selectany) GUID IID_ILisMapX2 = {0x64D1656D, 0x03CF, 0x498C,{ 0x96, 0x8D, 0x0D,0x23, 0x64, 0x3A,0x82, 0x02} };

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      TxActiveFormBorderStyle;
enum      TxPrintScale;
enum      MapArrowType;
enum      PointType;
interface DECLSPEC_UUID("{84A499E4-5C11-4228-8AB3-010D97FA7B67}") ILisMapX;
typedef TComInterface<ILisMapX, &IID_ILisMapX> ILisMapXPtr;

interface DECLSPEC_UUID("{64046E43-84BE-4C54-926A-6D9CB87DB6AF}") ILisMapXEvents;
typedef TComInterface<ILisMapXEvents, &DIID_ILisMapXEvents> ILisMapXEventsPtr;

interface DECLSPEC_UUID("{64D1656D-03CF-498C-968D-0D23643A8202}") ILisMapX2;
typedef TComInterface<ILisMapX2, &IID_ILisMapX2> ILisMapX2Ptr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef ILisMapX LisMapX;
typedef ILisMapXPtr LisMapXPtr;

#define LIBID_OF_LisMapX (&LIBID_LisMap)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum TxActiveFormBorderStyle
{
  afbNone = 0, 
  afbSingle = 1, 
  afbSunken = 2, 
  afbRaised = 3
} TxActiveFormBorderStyle;

typedef enum TxPrintScale
{
  poNone = 0, 
  poProportional = 1, 
  poPrintToFit = 2
} TxPrintScale;

typedef enum MapArrowType
{
  matNone = 0, 
  matArrow = 1, 
  matPoint = 2
} MapArrowType;

typedef enum PointType
{
  ptPoint = 0, 
  ptXCross = 1, 
  ptPlusCross = 2, 
  ptSymbol = 3
} PointType;

// *********************************************************************//
// Interface: ILisMapX
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {84A499E4-5C11-4228-8AB3-010D97FA7B67}
// *********************************************************************//
interface ILisMapX  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL Value/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_AutoScroll(VARIANT_BOOL Value/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_AutoSize(VARIANT_BOOL Value/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_AxBorderStyle(Lismap_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_AxBorderStyle(Lismap_tlb::TxActiveFormBorderStyle Value/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_BorderWidth(long* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_BorderWidth(long Value/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Value/*[out,retval]*/) = 0; // [-518]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Value/*[in]*/) = 0; // [-518]
  virtual HRESULT STDMETHODCALLTYPE get_Color(::OLE_COLOR* Value/*[out,retval]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE set_Color(::OLE_COLOR Value/*[in]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE get_Font(IFontDisp** Value/*[out,retval]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE set_Font(IFontDisp* Value/*[in]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE _set_Font(IFontDisp** Value/*[in]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_KeyPreview(VARIANT_BOOL Value/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_PixelsPerInch(long* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_PixelsPerInch(long Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_PrintScale(Lismap_tlb::TxPrintScale* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_PrintScale(Lismap_tlb::TxPrintScale Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_Scaled(VARIANT_BOOL Value/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_Active(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_DropTarget(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_DropTarget(VARIANT_BOOL Value/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_HelpFile(BSTR* Value/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_HelpFile(BSTR Value/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_VisibleDockClientCount(long* Value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL Value/*[in]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE Show(void) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE Init(void) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE SetCenter(double lon/*[in]*/, double lat/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE SetScale(double scale/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE Clear(int layer/*[in]*/, long refresh/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE ShowStation(double lon/*[in]*/, double lat/*[in]*/, 
                                                BSTR label/*[in]*/, BSTR hint/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE ShowCoordZone(double centLon/*[in]*/, double centLat/*[in]*/, 
                                                  LPSAFEARRAY zone/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE ShowPoint(double lon/*[in]*/, double lat/*[in]*/, 
                                              int colour/*[in]*/, int width/*[in]*/, 
                                              Lismap_tlb::PointType type/*[in]*/, BSTR label/*[in]*/, 
                                              BSTR hint/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE ShowContour(LPSAFEARRAY lon/*[in]*/, LPSAFEARRAY lat/*[in]*/, 
                                                BSTR label/*[in]*/, BSTR hint/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE ShowZone(double centLon/*[in]*/, double centLat/*[in]*/, 
                                             LPSAFEARRAY zone/*[in]*/, int width/*[in]*/, 
                                             int Color/*[in]*/, int style/*[in]*/, 
                                             int objType/*[in]*/, int layer/*[in]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE refresh(void) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE ShowLink(double lon1/*[in]*/, double lat1/*[in]*/, 
                                             double lon2/*[in]*/, double lat2/*[in]*/, 
                                             int trim/*[in]*/, 
                                             Lismap_tlb::MapArrowType arrowType/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE FitObjects(void) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE CloseMap(void) = 0; // [29]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_AutoScroll(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_AutoScroll((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_AutoSize(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&Value));
    return Value;
  }

  Lismap_tlb::TxActiveFormBorderStyle __fastcall get_AxBorderStyle(void)
  {
    Lismap_tlb::TxActiveFormBorderStyle Value;
    OLECHECK(this->get_AxBorderStyle((Lismap_tlb::TxActiveFormBorderStyle*)&Value));
    return Value;
  }

  long __fastcall get_BorderWidth(void)
  {
    long Value;
    OLECHECK(this->get_BorderWidth((long*)&Value));
    return Value;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Caption((BSTR*)&Value));
    return Value;
  }

  ::OLE_COLOR __fastcall get_Color(void)
  {
    ::OLE_COLOR Value;
    OLECHECK(this->get_Color((::OLE_COLOR*)&Value));
    return Value;
  }

  IFontDisp* __fastcall get_Font(void)
  {
    IFontDisp* Value;
    OLECHECK(this->get_Font((IFontDisp**)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_KeyPreview(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_KeyPreview((VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall get_PixelsPerInch(void)
  {
    long Value;
    OLECHECK(this->get_PixelsPerInch((long*)&Value));
    return Value;
  }

  Lismap_tlb::TxPrintScale __fastcall get_PrintScale(void)
  {
    Lismap_tlb::TxPrintScale Value;
    OLECHECK(this->get_PrintScale((Lismap_tlb::TxPrintScale*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Scaled(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Scaled((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Active(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Active((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_DropTarget(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_DropTarget((VARIANT_BOOL*)&Value));
    return Value;
  }

  BSTR __fastcall get_HelpFile(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_HelpFile((BSTR*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_DoubleBuffered(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_DoubleBuffered((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_AlignDisabled(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_AlignDisabled((VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall get_VisibleDockClientCount(void)
  {
    long Value;
    OLECHECK(this->get_VisibleDockClientCount((long*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Value));
    return Value;
  }


  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Lismap_tlb::TxActiveFormBorderStyle AxBorderStyle = {read = get_AxBorderStyle, write = set_AxBorderStyle};
  __property   long            BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   BSTR            Caption = {read = get_Caption};
  __property   ::OLE_COLOR     Color = {read = get_Color, write = set_Color};
  __property   IFontDisp*      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    KeyPreview = {read = get_KeyPreview, write = set_KeyPreview};
  __property   long            PixelsPerInch = {read = get_PixelsPerInch, write = set_PixelsPerInch};
  __property   Lismap_tlb::TxPrintScale PrintScale = {read = get_PrintScale, write = set_PrintScale};
  __property   VARIANT_BOOL    Scaled = {read = get_Scaled, write = set_Scaled};
  __property   VARIANT_BOOL    Active = {read = get_Active};
  __property   VARIANT_BOOL    DropTarget = {read = get_DropTarget, write = set_DropTarget};
  __property   BSTR            HelpFile = {read = get_HelpFile};
  __property   VARIANT_BOOL    DoubleBuffered = {read = get_DoubleBuffered, write = set_DoubleBuffered};
  __property   VARIANT_BOOL    AlignDisabled = {read = get_AlignDisabled};
  __property   long            VisibleDockClientCount = {read = get_VisibleDockClientCount};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ILisMapXEvents
// Flags:     (4096) Dispatchable
// GUID:      {64046E43-84BE-4C54-926A-6D9CB87DB6AF}
// *********************************************************************//
interface ILisMapXEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnActivate()
  {
    _TDispID _dispid(/* OnActivate */ DISPID(1));
    OleProcedure(_dispid);
  }

  void __fastcall OnClick()
  {
    _TDispID _dispid(/* OnClick */ DISPID(2));
    OleProcedure(_dispid);
  }

  void __fastcall OnCreate()
  {
    _TDispID _dispid(/* OnCreate */ DISPID(3));
    OleProcedure(_dispid);
  }

  void __fastcall OnDblClick()
  {
    _TDispID _dispid(/* OnDblClick */ DISPID(5));
    OleProcedure(_dispid);
  }

  void __fastcall OnDestroy()
  {
    _TDispID _dispid(/* OnDestroy */ DISPID(6));
    OleProcedure(_dispid);
  }

  void __fastcall OnDeactivate()
  {
    _TDispID _dispid(/* OnDeactivate */ DISPID(7));
    OleProcedure(_dispid);
  }

  void __fastcall OnKeyPress(short* Key/*[in,out]*/)
  {
    _TDispID _dispid(/* OnKeyPress */ DISPID(11));
    TAutoArgs<1> _args;
    _args[1] = Key /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnPaint()
  {
    _TDispID _dispid(/* OnPaint */ DISPID(16));
    OleProcedure(_dispid);
  }


};
// *********************************************************************//
// Interface: ILisMapX2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {64D1656D-03CF-498C-968D-0D23643A8202}
// *********************************************************************//
interface ILisMapX2  : public Lismap_tlb::ILisMapX
{
public:
  virtual HRESULT STDMETHODCALLTYPE ShowPointEx(double lon/*[in]*/, double lat/*[in]*/, 
                                                Lismap_tlb::PointType typeOfPoint/*[in]*/, 
                                                int pointWidth/*[in]*/, BSTR label/*[in]*/, 
                                                BSTR hint/*[in]*/, ::OLE_COLOR pointColor/*[in]*/, 
                                                BSTR fontName/*[in]*/, int fontSize/*[in]*/, 
                                                ::OLE_COLOR textColor/*[in]*/, 
                                                VARIANT_BOOL isBold/*[in]*/, 
                                                VARIANT_BOOL isItalic/*[in]*/, 
                                                VARIANT_BOOL isUnderline/*[in]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE ShowStationEx(double lon/*[in]*/, double lat/*[in]*/, 
                                                  BSTR label/*[in]*/, BSTR hint/*[in]*/, 
                                                  BSTR fontName/*[in]*/, int fontSize/*[in]*/, 
                                                  ::OLE_COLOR textColor/*[in]*/, 
                                                  VARIANT_BOOL isBold/*[in]*/, 
                                                  VARIANT_BOOL isItalic/*[in]*/, 
                                                  VARIANT_BOOL isUnderline/*[in]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE ShowContourEx(LPSAFEARRAY lon/*[in]*/, LPSAFEARRAY lat/*[in]*/, 
                                                  BSTR label/*[in]*/, BSTR hint/*[in]*/, 
                                                  BSTR fontName/*[in]*/, int fontSize/*[in]*/, 
                                                  ::OLE_COLOR textColor/*[in]*/, 
                                                  VARIANT_BOOL isBold/*[in]*/, 
                                                  VARIANT_BOOL isItalic/*[in]*/, 
                                                  VARIANT_BOOL isUnderline/*[in]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE ShowLabelEx(double lon/*[in]*/, double lat/*[in]*/, 
                                                BSTR label/*[in]*/, BSTR hint/*[in]*/, 
                                                BSTR fontName/*[in]*/, int fontSize/*[in]*/, 
                                                ::OLE_COLOR textColor/*[in]*/, 
                                                VARIANT_BOOL isBold/*[in]*/, 
                                                VARIANT_BOOL isItalic/*[in]*/, 
                                                VARIANT_BOOL isUnderline/*[in]*/) = 0; // [33]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMILisMapX
// Interface: ILisMapX
// *********************************************************************//
template <class T /* ILisMapX */ >
class TCOMILisMapXT : public TComInterface<ILisMapX>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMILisMapXT() {}
  TCOMILisMapXT(ILisMapX *intf, bool addRef = false) : TComInterface<ILisMapX>(intf, addRef) {}
  TCOMILisMapXT(const TCOMILisMapXT& src) : TComInterface<ILisMapX>(src) {}
  TCOMILisMapXT& operator=(const TCOMILisMapXT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Visible(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_Visible(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_AutoScroll(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoScroll(void);
  HRESULT         __fastcall set_AutoScroll(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_AutoScroll(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_AutoSize(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_AutoSize(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_AxBorderStyle(Lismap_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/);
  Lismap_tlb::TxActiveFormBorderStyle __fastcall get_AxBorderStyle(void);
  HRESULT         __fastcall set_AxBorderStyle(Lismap_tlb::TxActiveFormBorderStyle Value/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Color(::OLE_COLOR* Value/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(::OLE_COLOR Value/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Value/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(IFontDisp* Value/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Value/*[in]*/);
  HRESULT         __fastcall get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_KeyPreview(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_KeyPreview(void);
  HRESULT         __fastcall set_KeyPreview(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_KeyPreview(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_PixelsPerInch(long* Value/*[out,retval]*/);
  long            __fastcall get_PixelsPerInch(void);
  HRESULT         __fastcall set_PixelsPerInch(long Value/*[in]*/);
  HRESULT         __fastcall get_PrintScale(Lismap_tlb::TxPrintScale* Value/*[out,retval]*/);
  Lismap_tlb::TxPrintScale __fastcall get_PrintScale(void);
  HRESULT         __fastcall set_PrintScale(Lismap_tlb::TxPrintScale Value/*[in]*/);
  HRESULT         __fastcall get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Scaled(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Scaled(void);
  HRESULT         __fastcall set_Scaled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_Scaled(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Active(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Active(void);
  HRESULT         __fastcall get_DropTarget(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_DropTarget(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DropTarget(void);
  HRESULT         __fastcall set_DropTarget(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_DropTarget(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_HelpFile(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT         __fastcall set_HelpFile(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_DoubleBuffered(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DoubleBuffered(void);
  HRESULT         __fastcall set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_DoubleBuffered(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_AlignDisabled(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AlignDisabled(void);
  HRESULT         __fastcall get_VisibleDockClientCount(long* Value/*[out,retval]*/);
  long            __fastcall get_VisibleDockClientCount(void);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall Show(void);
  HRESULT         __fastcall Init(void);
  HRESULT         __fastcall SetCenter(double lon/*[in]*/, double lat/*[in]*/);
  HRESULT         __fastcall SetScale(double scale/*[in]*/);
  HRESULT         __fastcall Clear(int layer/*[in]*/, long refresh/*[in]*/);
  HRESULT         __fastcall ShowStation(double lon/*[in]*/, double lat/*[in]*/, BSTR label/*[in]*/, 
                                         BSTR hint/*[in]*/);
  HRESULT         __fastcall ShowCoordZone(double centLon/*[in]*/, double centLat/*[in]*/, 
                                           LPSAFEARRAY zone/*[in]*/);
  HRESULT         __fastcall ShowPoint(double lon/*[in]*/, double lat/*[in]*/, int colour/*[in]*/, 
                                       int width/*[in]*/, Lismap_tlb::PointType type/*[in]*/, 
                                       BSTR label/*[in]*/, BSTR hint/*[in]*/);
  HRESULT         __fastcall ShowContour(LPSAFEARRAY lon/*[in]*/, LPSAFEARRAY lat/*[in]*/, 
                                         BSTR label/*[in]*/, BSTR hint/*[in]*/);
  HRESULT         __fastcall ShowZone(double centLon/*[in]*/, double centLat/*[in]*/, 
                                      LPSAFEARRAY zone/*[in]*/, int width/*[in]*/, int Color/*[in]*/, 
                                      int style/*[in]*/, int objType/*[in]*/, int layer/*[in]*/);
  HRESULT         __fastcall refresh(void);
  HRESULT         __fastcall ShowLink(double lon1/*[in]*/, double lat1/*[in]*/, double lon2/*[in]*/, 
                                      double lat2/*[in]*/, int trim/*[in]*/, 
                                      Lismap_tlb::MapArrowType arrowType/*[in]*/);
  HRESULT         __fastcall FitObjects(void);
  HRESULT         __fastcall CloseMap(void);

  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   TOLEBOOL        AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Lismap_tlb::TxActiveFormBorderStyle AxBorderStyle = {read = get_AxBorderStyle, write = set_AxBorderStyle};
  __property   long            BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   BSTR            Caption = {read = get_Caption};
  __property   ::OLE_COLOR     Color = {read = get_Color, write = set_Color};
  __property   IFontDisp*      Font = {read = get_Font};
  __property   TOLEBOOL        KeyPreview = {read = get_KeyPreview, write = set_KeyPreview};
  __property   long            PixelsPerInch = {read = get_PixelsPerInch, write = set_PixelsPerInch};
  __property   Lismap_tlb::TxPrintScale PrintScale = {read = get_PrintScale, write = set_PrintScale};
  __property   TOLEBOOL        Scaled = {read = get_Scaled, write = set_Scaled};
  __property   TOLEBOOL        Active = {read = get_Active};
  __property   TOLEBOOL        DropTarget = {read = get_DropTarget, write = set_DropTarget};
  __property   BSTR            HelpFile = {read = get_HelpFile};
  __property   TOLEBOOL        DoubleBuffered = {read = get_DoubleBuffered, write = set_DoubleBuffered};
  __property   TOLEBOOL        AlignDisabled = {read = get_AlignDisabled};
  __property   long            VisibleDockClientCount = {read = get_VisibleDockClientCount};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
};
typedef TCOMILisMapXT<ILisMapX> TCOMILisMapX;

// *********************************************************************//
// DispIntf:  ILisMapX
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {84A499E4-5C11-4228-8AB3-010D97FA7B67}
// *********************************************************************//
template<class T>
class ILisMapXDispT : public TAutoDriver<ILisMapX>
{
public:
  ILisMapXDispT(){}

  ILisMapXDispT(ILisMapX *pintf)
  {
    TAutoDriver<ILisMapX>::Bind(pintf, false);
  }

  ILisMapXDispT(ILisMapXPtr pintf)
  {
    TAutoDriver<ILisMapX>::Bind(pintf, true);
  }

  ILisMapXDispT& operator=(ILisMapX *pintf)
  {
    TAutoDriver<ILisMapX>::Bind(pintf, false);
    return *this;
  }

  ILisMapXDispT& operator=(ILisMapXPtr pintf)
  {
    TAutoDriver<ILisMapX>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_LisMapX));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_LisMapX);
  }

  HRESULT         __fastcall get_Visible(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoScroll(void);
  HRESULT         __fastcall set_AutoScroll(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AxBorderStyle(Lismap_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/);
  Lismap_tlb::TxActiveFormBorderStyle __fastcall get_AxBorderStyle(void);
  HRESULT         __fastcall set_AxBorderStyle(Lismap_tlb::TxActiveFormBorderStyle Value/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Color(::OLE_COLOR* Value/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(::OLE_COLOR Value/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Value/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(IFontDisp* Value/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Value/*[in]*/);
  HRESULT         __fastcall get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_KeyPreview(void);
  HRESULT         __fastcall set_KeyPreview(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_PixelsPerInch(long* Value/*[out,retval]*/);
  long            __fastcall get_PixelsPerInch(void);
  HRESULT         __fastcall set_PixelsPerInch(long Value/*[in]*/);
  HRESULT         __fastcall get_PrintScale(Lismap_tlb::TxPrintScale* Value/*[out,retval]*/);
  Lismap_tlb::TxPrintScale __fastcall get_PrintScale(void);
  HRESULT         __fastcall set_PrintScale(Lismap_tlb::TxPrintScale Value/*[in]*/);
  HRESULT         __fastcall get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Scaled(void);
  HRESULT         __fastcall set_Scaled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall get_DropTarget(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DropTarget(void);
  HRESULT         __fastcall set_DropTarget(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_HelpFile(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT         __fastcall set_HelpFile(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DoubleBuffered(void);
  HRESULT         __fastcall set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AlignDisabled(void);
  HRESULT         __fastcall get_VisibleDockClientCount(long* Value/*[out,retval]*/);
  long            __fastcall get_VisibleDockClientCount(void);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Init();
  HRESULT         __fastcall SetCenter(double lon/*[in]*/, double lat/*[in]*/);
  HRESULT         __fastcall SetScale(double scale/*[in]*/);
  HRESULT         __fastcall Clear(int layer/*[in]*/, long refresh/*[in]*/);
  HRESULT         __fastcall ShowStation(double lon/*[in]*/, double lat/*[in]*/, BSTR label/*[in]*/
                                         , BSTR hint/*[in]*/);
  HRESULT         __fastcall ShowCoordZone(double centLon/*[in]*/, double centLat/*[in]*/, 
                                           LPSAFEARRAY zone/*[in]*/);
  HRESULT         __fastcall ShowPoint(double lon/*[in]*/, double lat/*[in]*/, int colour/*[in]*/, 
                                       int width/*[in]*/, Lismap_tlb::PointType type/*[in]*/, 
                                       BSTR label/*[in]*/, BSTR hint/*[in]*/);
  HRESULT         __fastcall ShowContour(LPSAFEARRAY lon/*[in]*/, LPSAFEARRAY lat/*[in]*/, 
                                         BSTR label/*[in]*/, BSTR hint/*[in]*/);
  HRESULT         __fastcall ShowZone(double centLon/*[in]*/, double centLat/*[in]*/, 
                                      LPSAFEARRAY zone/*[in]*/, int width/*[in]*/, int Color/*[in]*/
                                      , int style/*[in]*/, int objType/*[in]*/, int layer/*[in]*/);
  HRESULT         __fastcall refresh();
  HRESULT         __fastcall ShowLink(double lon1/*[in]*/, double lat1/*[in]*/, double lon2/*[in]*/
                                      , double lat2/*[in]*/, int trim/*[in]*/, 
                                      Lismap_tlb::MapArrowType arrowType/*[in]*/);
  HRESULT         __fastcall FitObjects();
  HRESULT         __fastcall CloseMap();

  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Lismap_tlb::TxActiveFormBorderStyle AxBorderStyle = {read = get_AxBorderStyle, write = set_AxBorderStyle};
  __property   long            BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   BSTR            Caption = {read = get_Caption};
  __property   ::OLE_COLOR     Color = {read = get_Color, write = set_Color};
  __property   IFontDisp*      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    KeyPreview = {read = get_KeyPreview, write = set_KeyPreview};
  __property   long            PixelsPerInch = {read = get_PixelsPerInch, write = set_PixelsPerInch};
  __property   Lismap_tlb::TxPrintScale PrintScale = {read = get_PrintScale, write = set_PrintScale};
  __property   VARIANT_BOOL    Scaled = {read = get_Scaled, write = set_Scaled};
  __property   VARIANT_BOOL    Active = {read = get_Active};
  __property   VARIANT_BOOL    DropTarget = {read = get_DropTarget, write = set_DropTarget};
  __property   BSTR            HelpFile = {read = get_HelpFile};
  __property   VARIANT_BOOL    DoubleBuffered = {read = get_DoubleBuffered, write = set_DoubleBuffered};
  __property   VARIANT_BOOL    AlignDisabled = {read = get_AlignDisabled};
  __property   long            VisibleDockClientCount = {read = get_VisibleDockClientCount};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
};
typedef ILisMapXDispT<ILisMapX> ILisMapXDisp;

// *********************************************************************//
// DispIntf:  ILisMapXEvents
// Flags:     (4096) Dispatchable
// GUID:      {64046E43-84BE-4C54-926A-6D9CB87DB6AF}
// *********************************************************************//
template <class T>
class ILisMapXEventsDispT : public TAutoDriver<ILisMapXEvents>
{
public:
  ILisMapXEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnActivate();
  void            __fastcall OnClick();
  void            __fastcall OnCreate();
  void            __fastcall OnDblClick();
  void            __fastcall OnDestroy();
  void            __fastcall OnDeactivate();
  void            __fastcall OnKeyPress(short* Key/*[in,out]*/);
  void            __fastcall OnPaint();

};
typedef ILisMapXEventsDispT<ILisMapXEvents> ILisMapXEventsDisp;

typedef TComInterface<ILisMapX2>  TCOMILisMapX2;

// *********************************************************************//
// DispIntf:  ILisMapX2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {64D1656D-03CF-498C-968D-0D23643A8202}
// *********************************************************************//
template<class T>
class ILisMapX2DispT : public TAutoDriver<ILisMapX2>
{
public:
  ILisMapX2DispT(){}

  ILisMapX2DispT(ILisMapX2 *pintf)
  {
    TAutoDriver<ILisMapX2>::Bind(pintf, false);
  }

  ILisMapX2DispT(ILisMapX2Ptr pintf)
  {
    TAutoDriver<ILisMapX2>::Bind(pintf, true);
  }

  ILisMapX2DispT& operator=(ILisMapX2 *pintf)
  {
    TAutoDriver<ILisMapX2>::Bind(pintf, false);
    return *this;
  }

  ILisMapX2DispT& operator=(ILisMapX2Ptr pintf)
  {
    TAutoDriver<ILisMapX2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall ShowPointEx(double lon/*[in]*/, double lat/*[in]*/, 
                                         Lismap_tlb::PointType typeOfPoint/*[in]*/, 
                                         int pointWidth/*[in]*/, BSTR label/*[in]*/, 
                                         BSTR hint/*[in]*/, ::OLE_COLOR pointColor/*[in]*/, 
                                         BSTR fontName/*[in]*/, int fontSize/*[in]*/, 
                                         ::OLE_COLOR textColor/*[in]*/, VARIANT_BOOL isBold/*[in]*/
                                         , VARIANT_BOOL isItalic/*[in]*/, 
                                         VARIANT_BOOL isUnderline/*[in]*/);
  HRESULT         __fastcall ShowStationEx(double lon/*[in]*/, double lat/*[in]*/, 
                                           BSTR label/*[in]*/, BSTR hint/*[in]*/, 
                                           BSTR fontName/*[in]*/, int fontSize/*[in]*/, 
                                           ::OLE_COLOR textColor/*[in]*/, 
                                           VARIANT_BOOL isBold/*[in]*/, 
                                           VARIANT_BOOL isItalic/*[in]*/, 
                                           VARIANT_BOOL isUnderline/*[in]*/);
  HRESULT         __fastcall ShowContourEx(LPSAFEARRAY lon/*[in]*/, LPSAFEARRAY lat/*[in]*/, 
                                           BSTR label/*[in]*/, BSTR hint/*[in]*/, 
                                           BSTR fontName/*[in]*/, int fontSize/*[in]*/, 
                                           ::OLE_COLOR textColor/*[in]*/, 
                                           VARIANT_BOOL isBold/*[in]*/, 
                                           VARIANT_BOOL isItalic/*[in]*/, 
                                           VARIANT_BOOL isUnderline/*[in]*/);
  HRESULT         __fastcall ShowLabelEx(double lon/*[in]*/, double lat/*[in]*/, BSTR label/*[in]*/
                                         , BSTR hint/*[in]*/, BSTR fontName/*[in]*/, 
                                         int fontSize/*[in]*/, ::OLE_COLOR textColor/*[in]*/, 
                                         VARIANT_BOOL isBold/*[in]*/, VARIANT_BOOL isItalic/*[in]*/
                                         , VARIANT_BOOL isUnderline/*[in]*/);
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoScroll(void);
  HRESULT         __fastcall set_AutoScroll(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AxBorderStyle(Lismap_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/);
  Lismap_tlb::TxActiveFormBorderStyle __fastcall get_AxBorderStyle(void);
  HRESULT         __fastcall set_AxBorderStyle(Lismap_tlb::TxActiveFormBorderStyle Value/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Color(::OLE_COLOR* Value/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(::OLE_COLOR Value/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Value/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(IFontDisp* Value/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Value/*[in]*/);
  HRESULT         __fastcall get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_KeyPreview(void);
  HRESULT         __fastcall set_KeyPreview(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_PixelsPerInch(long* Value/*[out,retval]*/);
  long            __fastcall get_PixelsPerInch(void);
  HRESULT         __fastcall set_PixelsPerInch(long Value/*[in]*/);
  HRESULT         __fastcall get_PrintScale(Lismap_tlb::TxPrintScale* Value/*[out,retval]*/);
  Lismap_tlb::TxPrintScale __fastcall get_PrintScale(void);
  HRESULT         __fastcall set_PrintScale(Lismap_tlb::TxPrintScale Value/*[in]*/);
  HRESULT         __fastcall get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Scaled(void);
  HRESULT         __fastcall set_Scaled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Active(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Active(void);
  HRESULT         __fastcall get_DropTarget(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DropTarget(void);
  HRESULT         __fastcall set_DropTarget(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_HelpFile(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT         __fastcall set_HelpFile(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DoubleBuffered(void);
  HRESULT         __fastcall set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AlignDisabled(void);
  HRESULT         __fastcall get_VisibleDockClientCount(long* Value/*[out,retval]*/);
  long            __fastcall get_VisibleDockClientCount(void);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall Show();
  HRESULT         __fastcall Init();
  HRESULT         __fastcall SetCenter(double lon/*[in]*/, double lat/*[in]*/);
  HRESULT         __fastcall SetScale(double scale/*[in]*/);
  HRESULT         __fastcall Clear(int layer/*[in]*/, long refresh/*[in]*/);
  HRESULT         __fastcall ShowStation(double lon/*[in]*/, double lat/*[in]*/, BSTR label/*[in]*/
                                         , BSTR hint/*[in]*/);
  HRESULT         __fastcall ShowCoordZone(double centLon/*[in]*/, double centLat/*[in]*/, 
                                           LPSAFEARRAY zone/*[in]*/);
  HRESULT         __fastcall ShowPoint(double lon/*[in]*/, double lat/*[in]*/, int colour/*[in]*/, 
                                       int width/*[in]*/, Lismap_tlb::PointType type/*[in]*/, 
                                       BSTR label/*[in]*/, BSTR hint/*[in]*/);
  HRESULT         __fastcall ShowContour(LPSAFEARRAY lon/*[in]*/, LPSAFEARRAY lat/*[in]*/, 
                                         BSTR label/*[in]*/, BSTR hint/*[in]*/);
  HRESULT         __fastcall ShowZone(double centLon/*[in]*/, double centLat/*[in]*/, 
                                      LPSAFEARRAY zone/*[in]*/, int width/*[in]*/, int Color/*[in]*/
                                      , int style/*[in]*/, int objType/*[in]*/, int layer/*[in]*/);
  HRESULT         __fastcall refresh();
  HRESULT         __fastcall ShowLink(double lon1/*[in]*/, double lat1/*[in]*/, double lon2/*[in]*/
                                      , double lat2/*[in]*/, int trim/*[in]*/, 
                                      Lismap_tlb::MapArrowType arrowType/*[in]*/);
  HRESULT         __fastcall FitObjects();
  HRESULT         __fastcall CloseMap();


  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Lismap_tlb::TxActiveFormBorderStyle AxBorderStyle = {read = get_AxBorderStyle, write = set_AxBorderStyle};
  __property   long            BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   BSTR            Caption = {read = get_Caption};
  __property   ::OLE_COLOR     Color = {read = get_Color, write = set_Color};
  __property   IFontDisp*      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    KeyPreview = {read = get_KeyPreview, write = set_KeyPreview};
  __property   long            PixelsPerInch = {read = get_PixelsPerInch, write = set_PixelsPerInch};
  __property   Lismap_tlb::TxPrintScale PrintScale = {read = get_PrintScale, write = set_PrintScale};
  __property   VARIANT_BOOL    Scaled = {read = get_Scaled, write = set_Scaled};
  __property   VARIANT_BOOL    Active = {read = get_Active};
  __property   VARIANT_BOOL    DropTarget = {read = get_DropTarget, write = set_DropTarget};
  __property   BSTR            HelpFile = {read = get_HelpFile};
  __property   VARIANT_BOOL    DoubleBuffered = {read = get_DoubleBuffered, write = set_DoubleBuffered};
  __property   VARIANT_BOOL    AlignDisabled = {read = get_AlignDisabled};
  __property   long            VisibleDockClientCount = {read = get_VisibleDockClientCount};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
};
typedef ILisMapX2DispT<ILisMapX2> ILisMapX2Disp;

// *********************************************************************//
// SmartIntf: TCOMILisMapX
// Interface: ILisMapX
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_Visible(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Visible(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_Visible(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Visible(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMILisMapXT<T>::get_Visible(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Visible((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_Visible(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Visible(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_Visible(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_Visible(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AutoScroll(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_AutoScroll(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AutoScroll(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMILisMapXT<T>::get_AutoScroll(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_AutoScroll((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_AutoScroll(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_AutoScroll(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_AutoScroll(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_AutoScroll(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AutoSize(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_AutoSize(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AutoSize(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMILisMapXT<T>::get_AutoSize(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_AutoSize(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_AutoSize(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_AutoSize(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_AutoSize(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_AxBorderStyle(Lismap_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/)
{
  return (*this)->get_AxBorderStyle(Value);
}

template <class T> Lismap_tlb::TxActiveFormBorderStyle __fastcall
TCOMILisMapXT<T>::get_AxBorderStyle(void)
{
  Lismap_tlb::TxActiveFormBorderStyle Value;
  OLECHECK(this->get_AxBorderStyle((Lismap_tlb::TxActiveFormBorderStyle*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_AxBorderStyle(Lismap_tlb::TxActiveFormBorderStyle Value/*[in]*/)
{
  return (*this)->set_AxBorderStyle(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_BorderWidth(long* Value/*[out,retval]*/)
{
  return (*this)->get_BorderWidth(Value);
}

template <class T> long __fastcall
TCOMILisMapXT<T>::get_BorderWidth(void)
{
  long Value;
  OLECHECK(this->get_BorderWidth((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_BorderWidth(long Value/*[in]*/)
{
  return (*this)->set_BorderWidth(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_Caption(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Caption(Value);
}

template <class T> BSTR __fastcall
TCOMILisMapXT<T>::get_Caption(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Caption((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_Caption(BSTR Value/*[in]*/)
{
  return (*this)->set_Caption(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_Color(::OLE_COLOR* Value/*[out,retval]*/)
{
  return (*this)->get_Color(Value);
}

template <class T> ::OLE_COLOR __fastcall
TCOMILisMapXT<T>::get_Color(void)
{
  ::OLE_COLOR Value;
  OLECHECK(this->get_Color((::OLE_COLOR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_Color(::OLE_COLOR Value/*[in]*/)
{
  return (*this)->set_Color(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_Font(IFontDisp** Value/*[out,retval]*/)
{
  return (*this)->get_Font(Value);
}

template <class T> IFontDisp* __fastcall
TCOMILisMapXT<T>::get_Font(void)
{
  IFontDisp* Value;
  OLECHECK(this->get_Font((IFontDisp**)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_Font(IFontDisp* Value/*[in]*/)
{
  return (*this)->set_Font(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::_set_Font(IFontDisp** Value/*[in]*/)
{
  return (*this)->_set_Font(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_KeyPreview(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_KeyPreview(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_KeyPreview(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMILisMapXT<T>::get_KeyPreview(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_KeyPreview((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_KeyPreview(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_KeyPreview(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_KeyPreview(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_KeyPreview(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_PixelsPerInch(long* Value/*[out,retval]*/)
{
  return (*this)->get_PixelsPerInch(Value);
}

template <class T> long __fastcall
TCOMILisMapXT<T>::get_PixelsPerInch(void)
{
  long Value;
  OLECHECK(this->get_PixelsPerInch((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_PixelsPerInch(long Value/*[in]*/)
{
  return (*this)->set_PixelsPerInch(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_PrintScale(Lismap_tlb::TxPrintScale* Value/*[out,retval]*/)
{
  return (*this)->get_PrintScale(Value);
}

template <class T> Lismap_tlb::TxPrintScale __fastcall
TCOMILisMapXT<T>::get_PrintScale(void)
{
  Lismap_tlb::TxPrintScale Value;
  OLECHECK(this->get_PrintScale((Lismap_tlb::TxPrintScale*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_PrintScale(Lismap_tlb::TxPrintScale Value/*[in]*/)
{
  return (*this)->set_PrintScale(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Scaled(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_Scaled(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Scaled(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMILisMapXT<T>::get_Scaled(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Scaled((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_Scaled(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Scaled(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_Scaled(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_Scaled(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Active(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_Active(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Active(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMILisMapXT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Active((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_DropTarget(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DropTarget(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_DropTarget(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DropTarget(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMILisMapXT<T>::get_DropTarget(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_DropTarget((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_DropTarget(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_DropTarget(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_DropTarget(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_DropTarget(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_HelpFile(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_HelpFile(Value);
}

template <class T> BSTR __fastcall
TCOMILisMapXT<T>::get_HelpFile(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_HelpFile((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_HelpFile(BSTR Value/*[in]*/)
{
  return (*this)->set_HelpFile(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DoubleBuffered(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_DoubleBuffered(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DoubleBuffered(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMILisMapXT<T>::get_DoubleBuffered(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_DoubleBuffered((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_DoubleBuffered(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_DoubleBuffered(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_DoubleBuffered(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AlignDisabled(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_AlignDisabled(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AlignDisabled(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMILisMapXT<T>::get_AlignDisabled(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_AlignDisabled((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_VisibleDockClientCount(long* Value/*[out,retval]*/)
{
  return (*this)->get_VisibleDockClientCount(Value);
}

template <class T> long __fastcall
TCOMILisMapXT<T>::get_VisibleDockClientCount(void)
{
  long Value;
  OLECHECK(this->get_VisibleDockClientCount((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Enabled(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::get_Enabled(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMILisMapXT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Enabled(Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::set_Enabled(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::Show(void)
{
  return (*this)->Show();
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::Init(void)
{
  return (*this)->Init();
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::SetCenter(double lon/*[in]*/, double lat/*[in]*/)
{
  return (*this)->SetCenter(lon, lat);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::SetScale(double scale/*[in]*/)
{
  return (*this)->SetScale(scale);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::Clear(int layer/*[in]*/, long refresh/*[in]*/)
{
  return (*this)->Clear(layer, refresh);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::ShowStation(double lon/*[in]*/, double lat/*[in]*/, BSTR label/*[in]*/, 
                              BSTR hint/*[in]*/)
{
  return (*this)->ShowStation(lon, lat, label, hint);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::ShowCoordZone(double centLon/*[in]*/, double centLat/*[in]*/, 
                                LPSAFEARRAY zone/*[in]*/)
{
  return (*this)->ShowCoordZone(centLon, centLat, zone);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::ShowPoint(double lon/*[in]*/, double lat/*[in]*/, int colour/*[in]*/, 
                            int width/*[in]*/, Lismap_tlb::PointType type/*[in]*/, 
                            BSTR label/*[in]*/, BSTR hint/*[in]*/)
{
  return (*this)->ShowPoint(lon, lat, colour, width, type, label, hint);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::ShowContour(LPSAFEARRAY lon/*[in]*/, LPSAFEARRAY lat/*[in]*/, BSTR label/*[in]*/, 
                              BSTR hint/*[in]*/)
{
  return (*this)->ShowContour(lon, lat, label, hint);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::ShowZone(double centLon/*[in]*/, double centLat/*[in]*/, LPSAFEARRAY zone/*[in]*/, 
                           int width/*[in]*/, int Color/*[in]*/, int style/*[in]*/, 
                           int objType/*[in]*/, int layer/*[in]*/)
{
  return (*this)->ShowZone(centLon, centLat, zone, width, Color, style, objType, layer);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::refresh(void)
{
  return (*this)->refresh();
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::ShowLink(double lon1/*[in]*/, double lat1/*[in]*/, double lon2/*[in]*/, 
                           double lat2/*[in]*/, int trim/*[in]*/, 
                           Lismap_tlb::MapArrowType arrowType/*[in]*/)
{
  return (*this)->ShowLink(lon1, lat1, lon2, lat2, trim, arrowType);
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::FitObjects(void)
{
  return (*this)->FitObjects();
}

template <class T> HRESULT __fastcall
TCOMILisMapXT<T>::CloseMap(void)
{
  return (*this)->CloseMap();
}

// *********************************************************************//
// DispIntf:  ILisMapX
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {84A499E4-5C11-4228-8AB3-010D97FA7B67}
// *********************************************************************//
template <class T> HRESULT __fastcall
ILisMapXDispT<T>::get_Visible(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisMapXDispT<T>::get_Visible(void)
{
  VARIANT_BOOL Value;
  this->get_Visible((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::set_Visible(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScroll"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisMapXDispT<T>::get_AutoScroll(void)
{
  VARIANT_BOOL Value;
  this->get_AutoScroll((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::set_AutoScroll(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScroll"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisMapXDispT<T>::get_AutoSize(void)
{
  VARIANT_BOOL Value;
  this->get_AutoSize((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::set_AutoSize(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::get_AxBorderStyle(Lismap_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AxBorderStyle"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Lismap_tlb::TxActiveFormBorderStyle __fastcall
ILisMapXDispT<T>::get_AxBorderStyle(void)
{
  Lismap_tlb::TxActiveFormBorderStyle Value;
  this->get_AxBorderStyle((Lismap_tlb::TxActiveFormBorderStyle*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::set_AxBorderStyle(Lismap_tlb::TxActiveFormBorderStyle Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AxBorderStyle"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::get_BorderWidth(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ILisMapXDispT<T>::get_BorderWidth(void)
{
  long Value;
  this->get_BorderWidth((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::set_BorderWidth(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::get_Caption(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ILisMapXDispT<T>::get_Caption(void)
{
  BSTR Value;
  this->get_Caption((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::set_Caption(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::get_Color(::OLE_COLOR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> ::OLE_COLOR __fastcall
ILisMapXDispT<T>::get_Color(void)
{
  ::OLE_COLOR Value;
  this->get_Color((::OLE_COLOR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::set_Color(::OLE_COLOR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::get_Font(IFontDisp** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp* __fastcall
ILisMapXDispT<T>::get_Font(void)
{
  IFontDisp* Value;
  this->get_Font((IFontDisp**)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::set_Font(IFontDisp* Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp*)Value /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::_set_Font(IFontDisp** Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH*)(IFontDisp**)Value /*[VT_USERDEFINED:2]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyPreview"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisMapXDispT<T>::get_KeyPreview(void)
{
  VARIANT_BOOL Value;
  this->get_KeyPreview((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::set_KeyPreview(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyPreview"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::get_PixelsPerInch(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PixelsPerInch"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ILisMapXDispT<T>::get_PixelsPerInch(void)
{
  long Value;
  this->get_PixelsPerInch((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::set_PixelsPerInch(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PixelsPerInch"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::get_PrintScale(Lismap_tlb::TxPrintScale* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintScale"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Lismap_tlb::TxPrintScale __fastcall
ILisMapXDispT<T>::get_PrintScale(void)
{
  Lismap_tlb::TxPrintScale Value;
  this->get_PrintScale((Lismap_tlb::TxPrintScale*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::set_PrintScale(Lismap_tlb::TxPrintScale Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintScale"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scaled"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisMapXDispT<T>::get_Scaled(void)
{
  VARIANT_BOOL Value;
  this->get_Scaled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::set_Scaled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scaled"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisMapXDispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::get_DropTarget(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropTarget"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisMapXDispT<T>::get_DropTarget(void)
{
  VARIANT_BOOL Value;
  this->get_DropTarget((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::set_DropTarget(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropTarget"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::get_HelpFile(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ILisMapXDispT<T>::get_HelpFile(void)
{
  BSTR Value;
  this->get_HelpFile((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::set_HelpFile(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleBuffered"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisMapXDispT<T>::get_DoubleBuffered(void)
{
  VARIANT_BOOL Value;
  this->get_DoubleBuffered((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleBuffered"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlignDisabled"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisMapXDispT<T>::get_AlignDisabled(void)
{
  VARIANT_BOOL Value;
  this->get_AlignDisabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::get_VisibleDockClientCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VisibleDockClientCount"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ILisMapXDispT<T>::get_VisibleDockClientCount(void)
{
  long Value;
  this->get_VisibleDockClientCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisMapXDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  this->get_Enabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::Show()
{
  _TDispID _dispid(*this, OLETEXT("Show"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::Init()
{
  _TDispID _dispid(*this, OLETEXT("Init"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::SetCenter(double lon/*[in]*/, double lat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCenter"), DISPID(18));
  TAutoArgs<2> _args;
  _args[1] = lon /*[VT_R8:0]*/;
  _args[2] = lat /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::SetScale(double scale/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetScale"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = scale /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::Clear(int layer/*[in]*/, long refresh/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(20));
  TAutoArgs<2> _args;
  _args[1] = layer /*[VT_INT:0]*/;
  _args[2] = refresh /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::ShowStation(double lon/*[in]*/, double lat/*[in]*/, BSTR label/*[in]*/, 
                              BSTR hint/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowStation"), DISPID(21));
  TAutoArgs<4> _args;
  _args[1] = lon /*[VT_R8:0]*/;
  _args[2] = lat /*[VT_R8:0]*/;
  _args[3] = label /*[VT_BSTR:0]*/;
  _args[4] = hint /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::ShowCoordZone(double centLon/*[in]*/, double centLat/*[in]*/, 
                                LPSAFEARRAY zone/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowCoordZone"), DISPID(22));
  TAutoArgs<3> _args;
  _args[1] = centLon /*[VT_R8:0]*/;
  _args[2] = centLat /*[VT_R8:0]*/;
  _args[3] = zone /*[VT_SAFEARRAY:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::ShowPoint(double lon/*[in]*/, double lat/*[in]*/, int colour/*[in]*/, 
                            int width/*[in]*/, Lismap_tlb::PointType type/*[in]*/, 
                            BSTR label/*[in]*/, BSTR hint/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowPoint"), DISPID(23));
  TAutoArgs<7> _args;
  _args[1] = lon /*[VT_R8:0]*/;
  _args[2] = lat /*[VT_R8:0]*/;
  _args[3] = colour /*[VT_INT:0]*/;
  _args[4] = width /*[VT_INT:0]*/;
  _args[5] = (int)type /*[VT_USERDEFINED:0]*/;
  _args[6] = label /*[VT_BSTR:0]*/;
  _args[7] = hint /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::ShowContour(LPSAFEARRAY lon/*[in]*/, LPSAFEARRAY lat/*[in]*/, BSTR label/*[in]*/, 
                              BSTR hint/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowContour"), DISPID(25));
  TAutoArgs<4> _args;
  _args[1] = lon /*[VT_SAFEARRAY:0]*/;
  _args[2] = lat /*[VT_SAFEARRAY:0]*/;
  _args[3] = label /*[VT_BSTR:0]*/;
  _args[4] = hint /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::ShowZone(double centLon/*[in]*/, double centLat/*[in]*/, LPSAFEARRAY zone/*[in]*/
                           , int width/*[in]*/, int Color/*[in]*/, int style/*[in]*/, 
                           int objType/*[in]*/, int layer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowZone"), DISPID(26));
  TAutoArgs<8> _args;
  _args[1] = centLon /*[VT_R8:0]*/;
  _args[2] = centLat /*[VT_R8:0]*/;
  _args[3] = zone /*[VT_SAFEARRAY:0]*/;
  _args[4] = width /*[VT_INT:0]*/;
  _args[5] = Color /*[VT_INT:0]*/;
  _args[6] = style /*[VT_INT:0]*/;
  _args[7] = objType /*[VT_INT:0]*/;
  _args[8] = layer /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::refresh()
{
  _TDispID _dispid(*this, OLETEXT("refresh"), DISPID(24));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::ShowLink(double lon1/*[in]*/, double lat1/*[in]*/, double lon2/*[in]*/, 
                           double lat2/*[in]*/, int trim/*[in]*/, 
                           Lismap_tlb::MapArrowType arrowType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowLink"), DISPID(27));
  TAutoArgs<6> _args;
  _args[1] = lon1 /*[VT_R8:0]*/;
  _args[2] = lat1 /*[VT_R8:0]*/;
  _args[3] = lon2 /*[VT_R8:0]*/;
  _args[4] = lat2 /*[VT_R8:0]*/;
  _args[5] = trim /*[VT_INT:0]*/;
  _args[6] = (int)arrowType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::FitObjects()
{
  _TDispID _dispid(*this, OLETEXT("FitObjects"), DISPID(28));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ILisMapXDispT<T>::CloseMap()
{
  _TDispID _dispid(*this, OLETEXT("CloseMap"), DISPID(29));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  ILisMapXEvents
// Flags:     (4096) Dispatchable
// GUID:      {64046E43-84BE-4C54-926A-6D9CB87DB6AF}
// *********************************************************************//
template <class T> void __fastcall
ILisMapXEventsDispT<T>::OnActivate()
{
  _TDispID _dispid(/* OnActivate */ DISPID(1));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
ILisMapXEventsDispT<T>::OnClick()
{
  _TDispID _dispid(/* OnClick */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
ILisMapXEventsDispT<T>::OnCreate()
{
  _TDispID _dispid(/* OnCreate */ DISPID(3));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
ILisMapXEventsDispT<T>::OnDblClick()
{
  _TDispID _dispid(/* OnDblClick */ DISPID(5));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
ILisMapXEventsDispT<T>::OnDestroy()
{
  _TDispID _dispid(/* OnDestroy */ DISPID(6));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
ILisMapXEventsDispT<T>::OnDeactivate()
{
  _TDispID _dispid(/* OnDeactivate */ DISPID(7));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
ILisMapXEventsDispT<T>::OnKeyPress(short* Key/*[in,out]*/)
{
  _TDispID _dispid(/* OnKeyPress */ DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Key /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ILisMapXEventsDispT<T>::OnPaint()
{
  _TDispID _dispid(/* OnPaint */ DISPID(16));
  OleProcedure(_dispid);
}

// *********************************************************************//
// DispIntf:  ILisMapX2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {64D1656D-03CF-498C-968D-0D23643A8202}
// *********************************************************************//
template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::ShowPointEx(double lon/*[in]*/, double lat/*[in]*/, 
                               Lismap_tlb::PointType typeOfPoint/*[in]*/, int pointWidth/*[in]*/, 
                               BSTR label/*[in]*/, BSTR hint/*[in]*/, ::OLE_COLOR pointColor/*[in]*/
                               , BSTR fontName/*[in]*/, int fontSize/*[in]*/, 
                               ::OLE_COLOR textColor/*[in]*/, VARIANT_BOOL isBold/*[in]*/, 
                               VARIANT_BOOL isItalic/*[in]*/, VARIANT_BOOL isUnderline/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowPointEx"), DISPID(30));
  TAutoArgs<13> _args;
  _args[1] = lon /*[VT_R8:0]*/;
  _args[2] = lat /*[VT_R8:0]*/;
  _args[3] = (int)typeOfPoint /*[VT_USERDEFINED:0]*/;
  _args[4] = pointWidth /*[VT_INT:0]*/;
  _args[5] = label /*[VT_BSTR:0]*/;
  _args[6] = hint /*[VT_BSTR:0]*/;
  _args[7] = pointColor /*[VT_UI4:0]*/;
  _args[8] = fontName /*[VT_BSTR:0]*/;
  _args[9] = fontSize /*[VT_INT:0]*/;
  _args[10] = textColor /*[VT_UI4:0]*/;
  _args[11] = isBold /*[VT_BOOL:0]*/;
  _args[12] = isItalic /*[VT_BOOL:0]*/;
  _args[13] = isUnderline /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::ShowStationEx(double lon/*[in]*/, double lat/*[in]*/, BSTR label/*[in]*/, 
                                 BSTR hint/*[in]*/, BSTR fontName/*[in]*/, int fontSize/*[in]*/, 
                                 ::OLE_COLOR textColor/*[in]*/, VARIANT_BOOL isBold/*[in]*/, 
                                 VARIANT_BOOL isItalic/*[in]*/, VARIANT_BOOL isUnderline/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowStationEx"), DISPID(31));
  TAutoArgs<10> _args;
  _args[1] = lon /*[VT_R8:0]*/;
  _args[2] = lat /*[VT_R8:0]*/;
  _args[3] = label /*[VT_BSTR:0]*/;
  _args[4] = hint /*[VT_BSTR:0]*/;
  _args[5] = fontName /*[VT_BSTR:0]*/;
  _args[6] = fontSize /*[VT_INT:0]*/;
  _args[7] = textColor /*[VT_UI4:0]*/;
  _args[8] = isBold /*[VT_BOOL:0]*/;
  _args[9] = isItalic /*[VT_BOOL:0]*/;
  _args[10] = isUnderline /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::ShowContourEx(LPSAFEARRAY lon/*[in]*/, LPSAFEARRAY lat/*[in]*/, 
                                 BSTR label/*[in]*/, BSTR hint/*[in]*/, BSTR fontName/*[in]*/, 
                                 int fontSize/*[in]*/, ::OLE_COLOR textColor/*[in]*/, 
                                 VARIANT_BOOL isBold/*[in]*/, VARIANT_BOOL isItalic/*[in]*/, 
                                 VARIANT_BOOL isUnderline/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowContourEx"), DISPID(32));
  TAutoArgs<10> _args;
  _args[1] = lon /*[VT_SAFEARRAY:0]*/;
  _args[2] = lat /*[VT_SAFEARRAY:0]*/;
  _args[3] = label /*[VT_BSTR:0]*/;
  _args[4] = hint /*[VT_BSTR:0]*/;
  _args[5] = fontName /*[VT_BSTR:0]*/;
  _args[6] = fontSize /*[VT_INT:0]*/;
  _args[7] = textColor /*[VT_UI4:0]*/;
  _args[8] = isBold /*[VT_BOOL:0]*/;
  _args[9] = isItalic /*[VT_BOOL:0]*/;
  _args[10] = isUnderline /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::ShowLabelEx(double lon/*[in]*/, double lat/*[in]*/, BSTR label/*[in]*/, 
                               BSTR hint/*[in]*/, BSTR fontName/*[in]*/, int fontSize/*[in]*/, 
                               ::OLE_COLOR textColor/*[in]*/, VARIANT_BOOL isBold/*[in]*/, 
                               VARIANT_BOOL isItalic/*[in]*/, VARIANT_BOOL isUnderline/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowLabelEx"), DISPID(33));
  TAutoArgs<10> _args;
  _args[1] = lon /*[VT_R8:0]*/;
  _args[2] = lat /*[VT_R8:0]*/;
  _args[3] = label /*[VT_BSTR:0]*/;
  _args[4] = hint /*[VT_BSTR:0]*/;
  _args[5] = fontName /*[VT_BSTR:0]*/;
  _args[6] = fontSize /*[VT_INT:0]*/;
  _args[7] = textColor /*[VT_UI4:0]*/;
  _args[8] = isBold /*[VT_BOOL:0]*/;
  _args[9] = isItalic /*[VT_BOOL:0]*/;
  _args[10] = isUnderline /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::get_Visible(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisMapX2DispT<T>::get_Visible(void)
{
  VARIANT_BOOL Value;
  this->get_Visible((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::set_Visible(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::get_AutoScroll(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScroll"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisMapX2DispT<T>::get_AutoScroll(void)
{
  VARIANT_BOOL Value;
  this->get_AutoScroll((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::set_AutoScroll(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoScroll"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisMapX2DispT<T>::get_AutoSize(void)
{
  VARIANT_BOOL Value;
  this->get_AutoSize((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::set_AutoSize(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::get_AxBorderStyle(Lismap_tlb::TxActiveFormBorderStyle* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AxBorderStyle"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Lismap_tlb::TxActiveFormBorderStyle __fastcall
ILisMapX2DispT<T>::get_AxBorderStyle(void)
{
  Lismap_tlb::TxActiveFormBorderStyle Value;
  this->get_AxBorderStyle((Lismap_tlb::TxActiveFormBorderStyle*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::set_AxBorderStyle(Lismap_tlb::TxActiveFormBorderStyle Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AxBorderStyle"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::get_BorderWidth(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ILisMapX2DispT<T>::get_BorderWidth(void)
{
  long Value;
  this->get_BorderWidth((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::set_BorderWidth(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::get_Caption(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ILisMapX2DispT<T>::get_Caption(void)
{
  BSTR Value;
  this->get_Caption((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::set_Caption(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::get_Color(::OLE_COLOR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> ::OLE_COLOR __fastcall
ILisMapX2DispT<T>::get_Color(void)
{
  ::OLE_COLOR Value;
  this->get_Color((::OLE_COLOR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::set_Color(::OLE_COLOR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::get_Font(IFontDisp** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp* __fastcall
ILisMapX2DispT<T>::get_Font(void)
{
  IFontDisp* Value;
  this->get_Font((IFontDisp**)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::set_Font(IFontDisp* Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp*)Value /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::_set_Font(IFontDisp** Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH*)(IFontDisp**)Value /*[VT_USERDEFINED:2]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::get_KeyPreview(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyPreview"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisMapX2DispT<T>::get_KeyPreview(void)
{
  VARIANT_BOOL Value;
  this->get_KeyPreview((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::set_KeyPreview(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyPreview"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::get_PixelsPerInch(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PixelsPerInch"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ILisMapX2DispT<T>::get_PixelsPerInch(void)
{
  long Value;
  this->get_PixelsPerInch((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::set_PixelsPerInch(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PixelsPerInch"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::get_PrintScale(Lismap_tlb::TxPrintScale* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintScale"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Lismap_tlb::TxPrintScale __fastcall
ILisMapX2DispT<T>::get_PrintScale(void)
{
  Lismap_tlb::TxPrintScale Value;
  this->get_PrintScale((Lismap_tlb::TxPrintScale*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::set_PrintScale(Lismap_tlb::TxPrintScale Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintScale"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::get_Scaled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scaled"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisMapX2DispT<T>::get_Scaled(void)
{
  VARIANT_BOOL Value;
  this->get_Scaled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::set_Scaled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scaled"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::get_Active(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisMapX2DispT<T>::get_Active(void)
{
  VARIANT_BOOL Value;
  this->get_Active((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::get_DropTarget(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropTarget"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisMapX2DispT<T>::get_DropTarget(void)
{
  VARIANT_BOOL Value;
  this->get_DropTarget((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::set_DropTarget(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropTarget"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::get_HelpFile(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ILisMapX2DispT<T>::get_HelpFile(void)
{
  BSTR Value;
  this->get_HelpFile((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::set_HelpFile(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleBuffered"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisMapX2DispT<T>::get_DoubleBuffered(void)
{
  VARIANT_BOOL Value;
  this->get_DoubleBuffered((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleBuffered"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlignDisabled"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisMapX2DispT<T>::get_AlignDisabled(void)
{
  VARIANT_BOOL Value;
  this->get_AlignDisabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::get_VisibleDockClientCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VisibleDockClientCount"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ILisMapX2DispT<T>::get_VisibleDockClientCount(void)
{
  long Value;
  this->get_VisibleDockClientCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisMapX2DispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  this->get_Enabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::Show()
{
  _TDispID _dispid(*this, OLETEXT("Show"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::Init()
{
  _TDispID _dispid(*this, OLETEXT("Init"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::SetCenter(double lon/*[in]*/, double lat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCenter"), DISPID(18));
  TAutoArgs<2> _args;
  _args[1] = lon /*[VT_R8:0]*/;
  _args[2] = lat /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::SetScale(double scale/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetScale"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = scale /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::Clear(int layer/*[in]*/, long refresh/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(20));
  TAutoArgs<2> _args;
  _args[1] = layer /*[VT_INT:0]*/;
  _args[2] = refresh /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::ShowStation(double lon/*[in]*/, double lat/*[in]*/, BSTR label/*[in]*/, 
                               BSTR hint/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowStation"), DISPID(21));
  TAutoArgs<4> _args;
  _args[1] = lon /*[VT_R8:0]*/;
  _args[2] = lat /*[VT_R8:0]*/;
  _args[3] = label /*[VT_BSTR:0]*/;
  _args[4] = hint /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::ShowCoordZone(double centLon/*[in]*/, double centLat/*[in]*/, 
                                 LPSAFEARRAY zone/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowCoordZone"), DISPID(22));
  TAutoArgs<3> _args;
  _args[1] = centLon /*[VT_R8:0]*/;
  _args[2] = centLat /*[VT_R8:0]*/;
  _args[3] = zone /*[VT_SAFEARRAY:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::ShowPoint(double lon/*[in]*/, double lat/*[in]*/, int colour/*[in]*/, 
                             int width/*[in]*/, Lismap_tlb::PointType type/*[in]*/, 
                             BSTR label/*[in]*/, BSTR hint/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowPoint"), DISPID(23));
  TAutoArgs<7> _args;
  _args[1] = lon /*[VT_R8:0]*/;
  _args[2] = lat /*[VT_R8:0]*/;
  _args[3] = colour /*[VT_INT:0]*/;
  _args[4] = width /*[VT_INT:0]*/;
  _args[5] = (int)type /*[VT_USERDEFINED:0]*/;
  _args[6] = label /*[VT_BSTR:0]*/;
  _args[7] = hint /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::ShowContour(LPSAFEARRAY lon/*[in]*/, LPSAFEARRAY lat/*[in]*/, BSTR label/*[in]*/
                               , BSTR hint/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowContour"), DISPID(25));
  TAutoArgs<4> _args;
  _args[1] = lon /*[VT_SAFEARRAY:0]*/;
  _args[2] = lat /*[VT_SAFEARRAY:0]*/;
  _args[3] = label /*[VT_BSTR:0]*/;
  _args[4] = hint /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::ShowZone(double centLon/*[in]*/, double centLat/*[in]*/, LPSAFEARRAY zone/*[in]*/
                            , int width/*[in]*/, int Color/*[in]*/, int style/*[in]*/, 
                            int objType/*[in]*/, int layer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowZone"), DISPID(26));
  TAutoArgs<8> _args;
  _args[1] = centLon /*[VT_R8:0]*/;
  _args[2] = centLat /*[VT_R8:0]*/;
  _args[3] = zone /*[VT_SAFEARRAY:0]*/;
  _args[4] = width /*[VT_INT:0]*/;
  _args[5] = Color /*[VT_INT:0]*/;
  _args[6] = style /*[VT_INT:0]*/;
  _args[7] = objType /*[VT_INT:0]*/;
  _args[8] = layer /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::refresh()
{
  _TDispID _dispid(*this, OLETEXT("refresh"), DISPID(24));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::ShowLink(double lon1/*[in]*/, double lat1/*[in]*/, double lon2/*[in]*/, 
                            double lat2/*[in]*/, int trim/*[in]*/, 
                            Lismap_tlb::MapArrowType arrowType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowLink"), DISPID(27));
  TAutoArgs<6> _args;
  _args[1] = lon1 /*[VT_R8:0]*/;
  _args[2] = lat1 /*[VT_R8:0]*/;
  _args[3] = lon2 /*[VT_R8:0]*/;
  _args[4] = lat2 /*[VT_R8:0]*/;
  _args[5] = trim /*[VT_INT:0]*/;
  _args[6] = (int)arrowType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::FitObjects()
{
  _TDispID _dispid(*this, OLETEXT("FitObjects"), DISPID(28));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ILisMapX2DispT<T>::CloseMap()
{
  _TDispID _dispid(*this, OLETEXT("CloseMap"), DISPID(29));
  return OleFunction(_dispid);
}

#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : LisMapX
// Event Interface : ILisMapXEvents
// *********************************************************************//
template <class T>
class TEvents_LisMapX : public IConnectionPointImpl<T,
                                                 &DIID_ILisMapXEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_OnActivate(void);
  void            Fire_OnClick(void);
  void            Fire_OnCreate(void);
  void            Fire_OnDblClick(void);
  void            Fire_OnDestroy(void);
  void            Fire_OnDeactivate(void);
  void            Fire_OnKeyPress(short* Key);
  void            Fire_OnPaint(void);
protected:
  ILisMapXEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_LisMapX<T>::Fire_OnActivate(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnActivate();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LisMapX<T>::Fire_OnClick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LisMapX<T>::Fire_OnCreate(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnCreate();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LisMapX<T>::Fire_OnDblClick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LisMapX<T>::Fire_OnDestroy(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDestroy();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LisMapX<T>::Fire_OnDeactivate(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDeactivate();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LisMapX<T>::Fire_OnKeyPress(short* Key)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyPress(Key);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_LisMapX<T>::Fire_OnPaint(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnPaint();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Lismap_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Lismap_tlb;
#endif

#pragma option pop

#endif // LisMap_TLBH

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 09.10.2012 23:07:15 from Type Library described below.

// ************************************************************************  //
// Type Lib: D:\Projects\_UCRF\BC\trunk\LISBC.tlb (1)
// LIBID: {F66E6BCA-5B2A-48DE-A094-21522A53D656}
// LCID: 0
// Helpfile: 
// HelpString: LISBC Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
//   (2) v1.0 LISProgress, (D:\Projects\_UCRF\BC\Dll\LISProgress.tlb)
//   (3) v4.0 PiFolio, (C:\Program Files\PWR4\Components\PiFolio.dll)
// ************************************************************************ //
#ifndef   LISBC_TLBH
#define   LISBC_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif
#include "LISProgress_TLB.h"
#include "PiFolio_TLB.h"


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Lisbc_tlb
{

// *********************************************************************//
// HelpString: LISBC Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern "C" const __declspec(selectany) GUID LIBID_LISBC = {0xF66E6BCA, 0x5B2A, 0x48DE,{ 0xA0, 0x94, 0x21,0x52, 0x2A, 0x53,0xD6, 0x56} };
extern "C" const __declspec(selectany) GUID CLSID_CoCalcProgress = {0xF2D2D9FD, 0xA05C, 0x4DCE,{ 0xAA, 0xC2, 0x64,0x95, 0x9C, 0xD6,0xBE, 0x22} };
extern "C" const __declspec(selectany) GUID CLSID_CoPWRCallback = {0x8166D7CE, 0xEEA0, 0x4526,{ 0xA3, 0x4E, 0x03,0x9C, 0x41, 0x24,0x8B, 0x99} };
extern "C" const __declspec(selectany) GUID IID_ILisBcStorage = {0x41D0A0D2, 0x187F, 0x46B2,{ 0x95, 0xA4, 0x76,0x9A, 0x27, 0xA1,0x98, 0x9B} };
extern "C" const __declspec(selectany) GUID CLSID_CoLisBcStorage = {0xAE20E4CE, 0x08F9, 0x4915,{ 0x86, 0x75, 0xEE,0x0E, 0x01, 0x18,0x7E, 0x8A} };

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{41D0A0D2-187F-46B2-95A4-769A27A1989B}") ILisBcStorage;
typedef TComInterface<ILisBcStorage, &IID_ILisBcStorage> ILisBcStoragePtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef ILISProgress CoCalcProgress;
typedef ILISProgressPtr CoCalcProgressPtr;
typedef PWRCallback CoPWRCallback;
typedef PWRCallbackPtr CoPWRCallbackPtr;
typedef ILisBcStorage CoLisBcStorage;
typedef ILisBcStoragePtr CoLisBcStoragePtr;

#define LIBID_OF_CoCalcProgress (&LIBID_LISBC)
#define LIBID_OF_CoPWRCallback (&LIBID_LISBC)
#define LIBID_OF_CoLisBcStorage (&LIBID_LISBC)
// *********************************************************************//
// Interface: ILisBcStorage
// Flags:     (0)
// GUID:      {41D0A0D2-187F-46B2-95A4-769A27A1989B}
// *********************************************************************//
interface ILisBcStorage  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE LoadObject(LPUNKNOWN obj/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE SaveObject(LPUNKNOWN obj/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE LoadDetails(LPUNKNOWN obj/*[in]*/) = 0; // [3]
};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMILisBcStorage
// Interface: ILisBcStorage
// *********************************************************************//
template <class T /* ILisBcStorage */ >
class TCOMILisBcStorageT : public TComInterface<ILisBcStorage>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMILisBcStorageT() {}
  TCOMILisBcStorageT(ILisBcStorage *intf, bool addRef = false) : TComInterface<ILisBcStorage>(intf, addRef) {}
  TCOMILisBcStorageT(const TCOMILisBcStorageT& src) : TComInterface<ILisBcStorage>(src) {}
  TCOMILisBcStorageT& operator=(const TCOMILisBcStorageT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall LoadObject(LPUNKNOWN obj/*[in]*/);
  HRESULT         __fastcall SaveObject(LPUNKNOWN obj/*[in]*/);
  HRESULT         __fastcall LoadDetails(LPUNKNOWN obj/*[in]*/);

};
typedef TCOMILisBcStorageT<ILisBcStorage> TCOMILisBcStorage;

// *********************************************************************//
// SmartIntf: TCOMILisBcStorage
// Interface: ILisBcStorage
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMILisBcStorageT<T>::LoadObject(LPUNKNOWN obj/*[in]*/)
{
  return (*this)->LoadObject(obj);
}

template <class T> HRESULT __fastcall
TCOMILisBcStorageT<T>::SaveObject(LPUNKNOWN obj/*[in]*/)
{
  return (*this)->SaveObject(obj);
}

template <class T> HRESULT __fastcall
TCOMILisBcStorageT<T>::LoadDetails(LPUNKNOWN obj/*[in]*/)
{
  return (*this)->LoadDetails(obj);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CoCalcProgress
// Interface: TCOMILISProgress
// *********************************************************************//
typedef TCoClassCreatorT<TCOMILISProgress, ILISProgress, &CLSID_CoCalcProgress, &IID_ILISProgress> CoCoCalcProgress;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CoPWRCallback
// Interface: TCOMPWRCallback
// *********************************************************************//
typedef TCoClassCreatorT<TCOMPWRCallback, PWRCallback, &CLSID_CoPWRCallback, &IID_PWRCallback> CoCoPWRCallback;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Lisbc_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Lisbc_tlb;
#endif

#pragma option pop

#endif // LISBC_TLBH

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 21.10.2011 13:58:42 from Type Library described below.

// ************************************************************************  //
// Type Lib: D:\Projects\_UCRF\BC\txsrvr\LISBCTxServer.tlb (1)
// LIBID: {1FDDFBCD-1579-4FBB-97C3-30FC87BD5F9F}
// LCID: 0
// Helpfile: 
// HelpString: LIS BC - Сервер вещательных передатчиков
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   LISBCTxServer_TLBH
#define   LISBCTxServer_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Lisbctxserver_tlb
{

// *********************************************************************//
// HelpString: LIS BC - Сервер вещательных передатчиков
// Version:    0.1
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern "C" const __declspec(selectany) GUID LIBID_LISBCTxServer = {0x1FDDFBCD, 0x1579, 0x4FBB,{ 0x97, 0xC3, 0x30,0xFC, 0x87, 0xBD,0x5F, 0x9F} };
extern "C" const __declspec(selectany) GUID IID_ILISBCTx = {0x61F4694C, 0xF1CC, 0x4C7A,{ 0xB5, 0x52, 0xB5,0x92, 0x89, 0x4A,0x33, 0xF9} };
extern "C" const __declspec(selectany) GUID IID_ILisBcAntPatt = {0x120F00C3, 0x1F34, 0x4D04,{ 0x8F, 0x3A, 0x7B,0x51, 0x20, 0xF6,0xA9, 0x85} };
extern "C" const __declspec(selectany) GUID GUID_TBCOffsetType = {0xADF3382A, 0x4CAF, 0x47BB,{ 0x94, 0xE4, 0xDA,0x9D, 0xE3, 0x60,0x69, 0x48} };
extern "C" const __declspec(selectany) GUID GUID_TBCTxType = {0x3A6D8E60, 0x1328, 0x4131,{ 0xB6, 0x74, 0x2D,0xB5, 0x15, 0x3C,0x3B, 0x89} };
extern "C" const __declspec(selectany) GUID GUID_TBCTvStandards = {0x0365B58F, 0x603B, 0x47D8,{ 0x83, 0x34, 0xA6,0x37, 0x68, 0xFE,0x48, 0x90} };
extern "C" const __declspec(selectany) GUID GUID_TBCTvSystems = {0xA772C511, 0xFC06, 0x4BAD,{ 0x8F, 0x1C, 0x8D,0x81, 0x76, 0x9C,0xAA, 0x98} };
extern "C" const __declspec(selectany) GUID GUID_TBCSound = {0xE9568AC5, 0x7B64, 0x4F93,{ 0x85, 0x70, 0x6F,0xD9, 0x74, 0x90,0xF9, 0x99} };
extern "C" const __declspec(selectany) GUID GUID_TBCSInterferenceType = {0x9BA08475, 0x70D7, 0x4D76,{ 0xB2, 0x12, 0x08,0x16, 0x8F, 0xC2,0x87, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_TBCPolarization = {0x4257AD5E, 0x7D0A, 0x4CBD,{ 0xAA, 0x79, 0x28,0x1F, 0xD6, 0x73,0x30, 0xD4} };
extern "C" const __declspec(selectany) GUID GUID_TBCDirection = {0xF7FB4C1E, 0xFEED, 0x462F,{ 0xA4, 0x8B, 0x6B,0x93, 0xEA, 0x95,0x05, 0x56} };
extern "C" const __declspec(selectany) GUID GUID_TBCDVBSystem = {0x31EA48FE, 0xA109, 0x4600,{ 0x9E, 0x6B, 0x0A,0x82, 0xF3, 0x71,0x3C, 0x46} };
extern "C" const __declspec(selectany) GUID GUID_TBCFMSystem = {0xC2A1269C, 0x6FE2, 0x4BEB,{ 0xB4, 0x9C, 0x56,0xC4, 0x61, 0x39,0x45, 0x88} };
extern "C" const __declspec(selectany) GUID GUID_TBCTestpoint = {0xCB9490AD, 0xD28F, 0x4075,{ 0xAE, 0x2F, 0xB3,0x69, 0x77, 0x7A,0x72, 0x8D} };
extern "C" const __declspec(selectany) GUID IID_ILISBCTxList = {0xF2BB0908, 0xE39B, 0x4502,{ 0xB7, 0x3A, 0x1C,0x64, 0x5A, 0x86,0xB7, 0xBE} };
extern "C" const __declspec(selectany) GUID CLSID_LISBCTxList = {0x7C6CD16E, 0x30A0, 0x4268,{ 0x97, 0xD3, 0xE1,0xCA, 0xF0, 0x13,0x90, 0x76} };
extern "C" const __declspec(selectany) GUID GUID_TBcRpc = {0xF4D82785, 0x1CCA, 0x4F35,{ 0xB5, 0x01, 0xB2,0xAC, 0x0F, 0xD4,0x69, 0x06} };
extern "C" const __declspec(selectany) GUID GUID_TBcRxMode = {0x4D53C7E4, 0x7DF4, 0x4F47,{ 0xB2, 0xBD, 0x1E,0xA5, 0x0F, 0x8D,0x9F, 0xF0} };
extern "C" const __declspec(selectany) GUID IID_ILisBcDigAllot = {0x200C5C0C, 0x3C29, 0x4C68,{ 0x80, 0x23, 0x13,0xCF, 0x9C, 0x3D,0xF8, 0x4E} };
extern "C" const __declspec(selectany) GUID IID_ILisBcObjectServerVersion = {0x2C374134, 0x1586, 0x4EB3,{ 0x82, 0xB9, 0x82,0x1B, 0xAA, 0xC6,0x3A, 0x60} };
extern "C" const __declspec(selectany) GUID CLSID_LisBcObjectServerVersion = {0x06AE7ADB, 0xC847, 0x4A6A,{ 0x91, 0x4B, 0x86,0xEE, 0xAB, 0x29,0x11, 0xEE} };
extern "C" const __declspec(selectany) GUID CLSID_LisBcDigAllot = {0x543A31D0, 0x42D0, 0x427E,{ 0x9E, 0xF7, 0x84,0xFF, 0x77, 0x73,0x59, 0xD4} };
extern "C" const __declspec(selectany) GUID GUID_BcCoord = {0x3B57D1CD, 0xB6C6, 0x4A3A,{ 0xBB, 0xD7, 0x18,0x2B, 0xD7, 0x79,0x40, 0x70} };
extern "C" const __declspec(selectany) GUID GUID_TBcRn = {0xEAB1D6B0, 0x97DD, 0x4C30,{ 0xA7, 0x76, 0x66,0x3E, 0xB7, 0xEF,0x2E, 0x96} };
extern "C" const __declspec(selectany) GUID GUID_TBcTxServerVersion = {0x65AA428F, 0x31BC, 0x47AB,{ 0x87, 0x39, 0x28,0xBD, 0xD0, 0xFB,0x3E, 0x05} };
extern "C" const __declspec(selectany) GUID IID_ILisBcLfMf = {0x3B6F24B4, 0x2EC9, 0x41EF,{ 0xB8, 0xCA, 0x91,0x3F, 0x2A, 0xB3,0xB9, 0xDC} };
extern "C" const __declspec(selectany) GUID IID_ILisBcFxm = {0x13F9E9D5, 0x1200, 0x4642,{ 0xBB, 0x39, 0x0E,0xD4, 0x41, 0x88,0xC6, 0x86} };
extern "C" const __declspec(selectany) GUID GUID_TBcLfMfSys = {0x1F0C0674, 0x4045, 0x4706,{ 0x92, 0x87, 0x69,0x9C, 0x7C, 0x66,0xD4, 0x63} };
extern "C" const __declspec(selectany) GUID GUID_TBcModType = {0x7E7CF843, 0x68ED, 0x4AE6,{ 0xAF, 0x13, 0x59,0x07, 0xD5, 0x32,0xEF, 0xB7} };
extern "C" const __declspec(selectany) GUID IID_ILisAssocAllotId = {0x0A8A9BCC, 0xA5DE, 0x4CB7,{ 0x89, 0x4F, 0x6A,0x43, 0xC4, 0xC7,0xCE, 0x0F} };
extern "C" const __declspec(selectany) GUID IID_ILisBcDvbt2 = {0x30008C4B, 0xA850, 0x4CB4,{ 0x84, 0xAD, 0xD8,0xA6, 0xAE, 0x55,0x5C, 0x5F} };
extern "C" const __declspec(selectany) GUID CLSID_LISBCTx = {0x323F4B96, 0x3E86, 0x46D2,{ 0x9E, 0x88, 0xB4,0x82, 0x64, 0xB5,0xA8, 0xC2} };
extern "C" const __declspec(selectany) GUID GUID_TModulation = {0xAA3CFC55, 0x22BA, 0x4C11,{ 0x99, 0x32, 0x89,0x41, 0xA0, 0x73,0x34, 0x7B} };
extern "C" const __declspec(selectany) GUID GUID_TCodeRate = {0x24265AFF, 0x4287, 0x458A,{ 0x87, 0x8B, 0xB8,0x2E, 0x2D, 0xD7,0x6C, 0x93} };
extern "C" const __declspec(selectany) GUID GUID_TFftSize = {0xF5BA2D10, 0xB8DA, 0x4F47,{ 0xB7, 0xE5, 0x3C,0x6F, 0xF2, 0x33,0xF1, 0xC4} };
extern "C" const __declspec(selectany) GUID GUID_TGuardInterval2 = {0x853432E8, 0xBB95, 0x421D,{ 0xA6, 0x59, 0x0F,0x33, 0x88, 0x94,0xB1, 0x3F} };

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      TBCOffsetType;
enum      TBCTxType;
enum      TBCTvStandards;
enum      TBCTvSystems;
enum      TBCSound;
enum      TBCSInterferenceType;
enum      TBCPolarization;
enum      TBCDirection;
enum      TBCDVBSystem;
enum      TBCFMSystem;
struct    tagTBCTestpoint;
typedef   tagTBCTestpoint TBCTestpoint;

enum      TBcRpc;
enum      TBcRxMode;
struct    tagBcCoord;
typedef   tagBcCoord BcCoord;

enum      TBcRn;
enum      TBcTxServerVersion;
enum      TBcLfMfSys;
enum      TBcModType;
enum      TModulation;
enum      TCodeRate;
enum      TFftSize;
enum      TGuardInterval2;
interface DECLSPEC_UUID("{61F4694C-F1CC-4C7A-B552-B592894A33F9}") ILISBCTx;
typedef TComInterface<ILISBCTx, &IID_ILISBCTx> ILISBCTxPtr;

interface DECLSPEC_UUID("{120F00C3-1F34-4D04-8F3A-7B5120F6A985}") ILisBcAntPatt;
typedef TComInterface<ILisBcAntPatt, &IID_ILisBcAntPatt> ILisBcAntPattPtr;

interface DECLSPEC_UUID("{F2BB0908-E39B-4502-B73A-1C645A86B7BE}") ILISBCTxList;
typedef TComInterface<ILISBCTxList, &IID_ILISBCTxList> ILISBCTxListPtr;

interface DECLSPEC_UUID("{200C5C0C-3C29-4C68-8023-13CF9C3DF84E}") ILisBcDigAllot;
typedef TComInterface<ILisBcDigAllot, &IID_ILisBcDigAllot> ILisBcDigAllotPtr;

interface DECLSPEC_UUID("{2C374134-1586-4EB3-82B9-821BAAC63A60}") ILisBcObjectServerVersion;
typedef TComInterface<ILisBcObjectServerVersion, &IID_ILisBcObjectServerVersion> ILisBcObjectServerVersionPtr;

interface DECLSPEC_UUID("{3B6F24B4-2EC9-41EF-B8CA-913F2AB3B9DC}") ILisBcLfMf;
typedef TComInterface<ILisBcLfMf, &IID_ILisBcLfMf> ILisBcLfMfPtr;

interface DECLSPEC_UUID("{13F9E9D5-1200-4642-BB39-0ED44188C686}") ILisBcFxm;
typedef TComInterface<ILisBcFxm, &IID_ILisBcFxm> ILisBcFxmPtr;

interface DECLSPEC_UUID("{0A8A9BCC-A5DE-4CB7-894F-6A43C4C7CE0F}") ILisAssocAllotId;
typedef TComInterface<ILisAssocAllotId, &IID_ILisAssocAllotId> ILisAssocAllotIdPtr;

interface DECLSPEC_UUID("{30008C4B-A850-4CB4-84AD-D8A6AE555C5F}") ILisBcDvbt2;
typedef TComInterface<ILisBcDvbt2, &IID_ILisBcDvbt2> ILisBcDvbt2Ptr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef ILISBCTxList LISBCTxList;
typedef ILISBCTxListPtr LISBCTxListPtr;
typedef ILisBcObjectServerVersion LisBcObjectServerVersion;
typedef ILisBcObjectServerVersionPtr LisBcObjectServerVersionPtr;
typedef ILISBCTx LisBcDigAllot;
typedef ILISBCTxPtr LisBcDigAllotPtr;
typedef ILISBCTx LISBCTx;
typedef ILISBCTxPtr LISBCTxPtr;

#define LIBID_OF_LISBCTxList (&LIBID_LISBCTxServer)
#define LIBID_OF_LisBcObjectServerVersion (&LIBID_LISBCTxServer)
#define LIBID_OF_LisBcDigAllot (&LIBID_LISBCTxServer)
#define LIBID_OF_LISBCTx (&LIBID_LISBCTxServer)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum TBCOffsetType
{
  otNonPrecision = 0, 
  otPrecision = 1
} TBCOffsetType;

typedef enum TBCTxType
{
  ttFxm = 0xFFFFFFFF, 
  ttUNKNOWN = 0, 
  ttTV = 1, 
  ttFM = 2, 
  ttAM = 3, 
  ttDVB = 4, 
  ttDAB = 5, 
  ttCTV = 6, 
  ttAllot = 7
} TBCTxType;

typedef enum TBCTvStandards
{
  csUNKNOWN = 0, 
  csSECAM = 1, 
  csPAL = 2, 
  csNTSC = 3
} TBCTvStandards;

typedef enum TBCTvSystems
{
  tvB = 0, 
  tvG = 1, 
  tvH = 2, 
  tvI = 3, 
  tvD = 4, 
  tvD1 = 5, 
  tvK = 6, 
  tvK1 = 7, 
  tvL = 8, 
  tvB1 = 9
} TBCTvSystems;

typedef enum TBCSound
{
  sndAM = 0, 
  sndFM = 1
} TBCSound;

typedef enum TBCSInterferenceType
{
  itTropo = 0, 
  itCont = 1
} TBCSInterferenceType;

typedef enum TBCPolarization
{
  plVER = 0, 
  plHOR = 1, 
  plMIX = 2, 
  plCIR = 3
} TBCPolarization;

typedef enum TBCDirection
{
  drD = 0, 
  drND = 1
} TBCDirection;

typedef enum TBCDVBSystem
{
  dsA1 = 0, 
  dsA2 = 1, 
  dsA3 = 2, 
  dsA5 = 3, 
  dsA7 = 4, 
  dsB1 = 5, 
  dsB2 = 6, 
  dsB3 = 7, 
  dsB5 = 8, 
  dsB7 = 9, 
  dsC1 = 10, 
  dsC2 = 11, 
  dsC3 = 12, 
  dsC5 = 13, 
  dsC7 = 14, 
  dsD1 = 15, 
  dsD2 = 16, 
  dsD3 = 17, 
  dsD5 = 18, 
  dsD7 = 19, 
  dsE1 = 20, 
  dsE2 = 21, 
  dsE3 = 22, 
  dsE5 = 23, 
  dsE7 = 24, 
  dsF1 = 25, 
  dsF2 = 26, 
  dsF3 = 27, 
  dsF5 = 28, 
  dsF7 = 29
} TBCDVBSystem;

typedef enum TBCFMSystem
{
  fm1 = 0, 
  fm2 = 1, 
  fm3 = 2, 
  fm4 = 3, 
  fm5 = 4
} TBCFMSystem;

typedef enum TBcRpc
{
  rpc0 = 5, 
  rpc1 = 0, 
  rpc2 = 1, 
  rpc3 = 2, 
  rpc4 = 3, 
  rpc5 = 4
} TBcRpc;

typedef enum TBcRxMode
{
  rmFx = 0, 
  rmMo = 1, 
  rmPi = 2, 
  rmPo = 3
} TBcRxMode;

typedef enum TBcRn
{
  rn1 = 0, 
  rn2 = 1, 
  rn3 = 2, 
  rn4 = 3, 
  rn5 = 4, 
  rn6 = 5
} TBcRn;

typedef enum TBcTxServerVersion
{
  BC_TX_SERVER_VERSION = 807152007
} TBcTxServerVersion;

typedef enum TBcLfMfSys
{
  lmAm = 1, 
  lmDrmA0 = 2, 
  lmDrmA1 = 3, 
  lmDrmA2 = 4, 
  lmDrmA3 = 5, 
  lmDrmB0 = 6, 
  lmDrmB1 = 7, 
  lmDrmB2 = 8, 
  lmDrmB3 = 9
} TBcLfMfSys;

typedef enum TBcModType
{
  mtQam16 = 1, 
  mtQam64 = 2
} TBcModType;

typedef enum TModulation
{
  modQpsk = 1, 
  modQam16 = 2, 
  modQam64 = 3, 
  modQam256 = 4
} TModulation;

typedef enum TCodeRate
{
  cr_1_2 = 1, 
  cr_3_5 = 2, 
  cr_2_3 = 3, 
  cr_3_4 = 4, 
  cr_4_5 = 5, 
  cr_5_6 = 6
} TCodeRate;

typedef enum TFftSize
{
  fsz1K = 1, 
  fsz2K = 2, 
  fsz4K = 3, 
  fsz8K = 4, 
  fsz16K = 5, 
  fsz32K = 6
} TFftSize;

typedef enum TGuardInterval2
{
  gi_1_128 = 1, 
  gi_1_32 = 2, 
  gi_1_16 = 3, 
  gi_19_256 = 4, 
  gi_1_8 = 5, 
  gi_19_128 = 6, 
  gi_1_4 = 7
} TGuardInterval2;


// *********************************************************************//
// Declaration of Structures and Unions defined in Type Library           
// *********************************************************************//
struct tagTBCTestpoint
{
  BSTR tpName;
  double tpLatitude;
  double tpLongitude;
  long tpType;
  double tpBearing;
  double tpDistance;
  double tpUseblefield;
  double tpProtectedfield;
};

struct tagBcCoord
{
  double lon;
  double lat;
};

// *********************************************************************//
// Interface: ILISBCTx
// Flags:     (256) OleAutomation
// GUID:      {61F4694C-F1CC-4C7A-B552-B592894A33F9}
// *********************************************************************//
interface ILISBCTx  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_id(long* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_longitude(double* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_longitude(double Value/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_latitude(double* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_latitude(double Value/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_typesystem(Lisbctxserver_tlb::TBCTvSystems* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_typesystem(Lisbctxserver_tlb::TBCTvSystems Value/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_video_carrier(double* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_video_carrier(double Value/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_video_offset_line(long* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_video_offset_line(long Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_video_offset_herz(long* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_video_offset_herz(long Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_systemcolor(Lisbctxserver_tlb::TBCTvStandards* Value/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_systemcolor(Lisbctxserver_tlb::TBCTvStandards Value/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_power_video(double* Value/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE set_power_video(double Value/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_epr_video_max(double* Value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE set_epr_video_max(double Value/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_epr_video_hor(double* Value/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE set_epr_video_hor(double Value/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_epr_video_vert(double* Value/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE set_epr_video_vert(double Value/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_effectpowerhor(long idx/*[in]*/, 
                                                       double* Value/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE set_effectpowerhor(long idx/*[in]*/, double Value/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_effectpowervert(long idx/*[in]*/, 
                                                        double* Value/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_effectpowervert(long idx/*[in]*/, double Value/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE get_identifiersfn(long* Value/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_identifiersfn(long Value/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_relativetimingsfn(long* Value/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_relativetimingsfn(long Value/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_blockcentrefreq(double* Value/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_blockcentrefreq(double Value/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_sound_carrier_primary(double* Value/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_sound_carrier_primary(double Value/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_sound_offset_primary(long* Value/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_sound_offset_primary(long Value/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_power_sound_primary(double* Value/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_power_sound_primary(double Value/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_epr_sound_max_primary(double* Value/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_epr_sound_max_primary(double Value/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_epr_sound_hor_primary(double* Value/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE set_epr_sound_hor_primary(double Value/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_epr_sound_vert_primary(double* Value/*[out,retval]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE set_epr_sound_vert_primary(double Value/*[in]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE get_v_sound_ratio_primary(double* Value/*[out,retval]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE set_v_sound_ratio_primary(double Value/*[in]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE get_monostereo_primary(long* Value/*[out,retval]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE set_monostereo_primary(long Value/*[in]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE get_sound_carrier_second(double* Value/*[out,retval]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE set_sound_carrier_second(double Value/*[in]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE get_sound_offset_second(long* Value/*[out,retval]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE set_sound_offset_second(long Value/*[in]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE get_power_sound_second(double* Value/*[out,retval]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE set_power_sound_second(double Value/*[in]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE get_epr_sound_max_second(double* Value/*[out,retval]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE set_epr_sound_max_second(double Value/*[in]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE get_epr_sound_hor_second(double* Value/*[out,retval]*/) = 0; // [38]
  virtual HRESULT STDMETHODCALLTYPE set_epr_sound_hor_second(double Value/*[in]*/) = 0; // [38]
  virtual HRESULT STDMETHODCALLTYPE get_epr_sound_vert_second(double* Value/*[out,retval]*/) = 0; // [39]
  virtual HRESULT STDMETHODCALLTYPE set_epr_sound_vert_second(double Value/*[in]*/) = 0; // [39]
  virtual HRESULT STDMETHODCALLTYPE get_v_sound_ratio_second(double* Value/*[out,retval]*/) = 0; // [41]
  virtual HRESULT STDMETHODCALLTYPE set_v_sound_ratio_second(double Value/*[in]*/) = 0; // [41]
  virtual HRESULT STDMETHODCALLTYPE get_effectheight(long idx/*[in]*/, double* Value/*[out,retval]*/) = 0; // [43]
  virtual HRESULT STDMETHODCALLTYPE set_effectheight(long idx/*[in]*/, double Value/*[in]*/) = 0; // [43]
  virtual HRESULT STDMETHODCALLTYPE get_height_eft_max(long* Value/*[out,retval]*/) = 0; // [45]
  virtual HRESULT STDMETHODCALLTYPE set_height_eft_max(long Value/*[in]*/) = 0; // [45]
  virtual HRESULT STDMETHODCALLTYPE get_polarization(Lisbctxserver_tlb::TBCPolarization* Value/*[out,retval]*/) = 0; // [46]
  virtual HRESULT STDMETHODCALLTYPE set_polarization(Lisbctxserver_tlb::TBCPolarization Value/*[in]*/) = 0; // [46]
  virtual HRESULT STDMETHODCALLTYPE get_direction(Lisbctxserver_tlb::TBCDirection* Value/*[out,retval]*/) = 0; // [47]
  virtual HRESULT STDMETHODCALLTYPE set_direction(Lisbctxserver_tlb::TBCDirection Value/*[in]*/) = 0; // [47]
  virtual HRESULT STDMETHODCALLTYPE get_fiderloss(double* Value/*[out,retval]*/) = 0; // [48]
  virtual HRESULT STDMETHODCALLTYPE set_fiderloss(double Value/*[in]*/) = 0; // [48]
  virtual HRESULT STDMETHODCALLTYPE get_fiderlenght(long* Value/*[out,retval]*/) = 0; // [49]
  virtual HRESULT STDMETHODCALLTYPE set_fiderlenght(long Value/*[in]*/) = 0; // [49]
  virtual HRESULT STDMETHODCALLTYPE get_angleelevation_hor(long* Value/*[out,retval]*/) = 0; // [50]
  virtual HRESULT STDMETHODCALLTYPE set_angleelevation_hor(long Value/*[in]*/) = 0; // [50]
  virtual HRESULT STDMETHODCALLTYPE get_angleelevation_vert(long* Value/*[out,retval]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE set_angleelevation_vert(long Value/*[in]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE get_antennagain(double* Value/*[out,retval]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE set_antennagain(double Value/*[in]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE get_effectantennagains(long idx/*[in]*/, 
                                                           double* Value/*[out,retval]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE set_effectantennagains(long idx/*[in]*/, double Value/*[in]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE get_testpointsis(long* Value/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_testpointsis(long Value/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE init(long pdatabase/*[in]*/, long load_id/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE save(void) = 0; // [55]
  virtual HRESULT STDMETHODCALLTYPE get_heightantenna(long* Value/*[out,retval]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE set_heightantenna(long Value/*[in]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE get_data_changes(long* Value/*[out,retval]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE get_systemcast(Lisbctxserver_tlb::TBCTxType* Value/*[out,retval]*/) = 0; // [58]
  virtual HRESULT STDMETHODCALLTYPE set_systemcast(Lisbctxserver_tlb::TBCTxType Value/*[in]*/) = 0; // [58]
  virtual HRESULT STDMETHODCALLTYPE get_analogtelesystem(long* Value/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_analogtelesystem(long Value/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_typeoffset(Lisbctxserver_tlb::TBCOffsetType* Value/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE set_typeoffset(Lisbctxserver_tlb::TBCOffsetType Value/*[in]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_channel_id(long* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_channel_id(long Value/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_h_eff(long azimuth/*[in]*/, long* height/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_erp(long azimuth/*[in]*/, double* power/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_freq_carrier(double* freq/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_sort_key_in(double* Value/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE set_sort_key_in(double Value/*[in]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_sort_key_out(double* Value/*[out,retval]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE set_sort_key_out(double Value/*[in]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE get_dvb_system(Lisbctxserver_tlb::TBCDVBSystem* Value/*[out,retval]*/) = 0; // [60]
  virtual HRESULT STDMETHODCALLTYPE set_dvb_system(Lisbctxserver_tlb::TBCDVBSystem Value/*[in]*/) = 0; // [60]
  virtual HRESULT STDMETHODCALLTYPE get_fm_system(Lisbctxserver_tlb::TBCFMSystem* Value/*[out,retval]*/) = 0; // [61]
  virtual HRESULT STDMETHODCALLTYPE set_fm_system(Lisbctxserver_tlb::TBCFMSystem Value/*[in]*/) = 0; // [61]
  virtual HRESULT STDMETHODCALLTYPE get_gaussianchannel(double* Value/*[out,retval]*/) = 0; // [62]
  virtual HRESULT STDMETHODCALLTYPE set_gaussianchannel(double Value/*[in]*/) = 0; // [62]
  virtual HRESULT STDMETHODCALLTYPE get_riceanchannel(double* Value/*[out,retval]*/) = 0; // [63]
  virtual HRESULT STDMETHODCALLTYPE set_riceanchannel(double Value/*[in]*/) = 0; // [63]
  virtual HRESULT STDMETHODCALLTYPE get_rayleighchannel(double* Value/*[out,retval]*/) = 0; // [64]
  virtual HRESULT STDMETHODCALLTYPE set_rayleighchannel(double Value/*[in]*/) = 0; // [64]
  virtual HRESULT STDMETHODCALLTYPE saveToString(BSTR* Dest/*[out,retval]*/) = 0; // [59]
  virtual HRESULT STDMETHODCALLTYPE loadFromString(BSTR Source/*[in]*/) = 0; // [65]
  // [66] ид опоры, на которой установлен передатчик
  virtual HRESULT STDMETHODCALLTYPE get_stand_id(long* Value/*[out,retval]*/) = 0;
  // [66] ид опоры, на которой установлен передатчик
  virtual HRESULT STDMETHODCALLTYPE set_stand_id(long Value/*[in]*/) = 0;
  // [67] ид внешнего состояния передатчика
  virtual HRESULT STDMETHODCALLTYPE get_acout_id(long* Value/*[out,retval]*/) = 0;
  // [67] ид внешнего состояния передатчика
  virtual HRESULT STDMETHODCALLTYPE set_acout_id(long Value/*[in]*/) = 0;
  // [68] ид внутреннего состояния передатчика
  virtual HRESULT STDMETHODCALLTYPE get_acin_id(long* Value/*[out,retval]*/) = 0;
  // [68] ид внутреннего состояния передатчика
  virtual HRESULT STDMETHODCALLTYPE set_acin_id(long Value/*[in]*/) = 0;
  // [69] административный номер передатчика
  virtual HRESULT STDMETHODCALLTYPE get_adminid(long* Value/*[out,retval]*/) = 0;
  // [69] административный номер передатчика
  virtual HRESULT STDMETHODCALLTYPE set_adminid(long Value/*[in]*/) = 0;
  // [70] извлечён ли передаччик из базы
  virtual HRESULT STDMETHODCALLTYPE get_is_fetched(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [71] загрузка полей передатчика из полей компонента TIBQuery, передаваемого в качестве параметра
  virtual HRESULT STDMETHODCALLTYPE loadFromQuery(long query/*[in]*/) = 0;
  // [72] передатчик будет извлечён из базы заново при следующем обращении к любому атрибуту
  virtual HRESULT STDMETHODCALLTYPE invalidate(void) = 0;
  // [73] указатель на TIBDatabase, который передатчик использует для самостоятельного извлечения/сохранения
  virtual HRESULT STDMETHODCALLTYPE get_database(long* Value/*[out,retval]*/) = 0;
  // [73] указатель на TIBDatabase, который передатчик использует для самостоятельного извлечения/сохранения
  virtual HRESULT STDMETHODCALLTYPE set_database(long Value/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_adm_response(BSTR* Value/*[out,retval]*/) = 0; // [40]
  virtual HRESULT STDMETHODCALLTYPE get_adm_sited_in(BSTR* Value/*[out,retval]*/) = 0; // [42]
  virtual HRESULT STDMETHODCALLTYPE get_status_code(long* Value/*[out,retval]*/) = 0; // [74]
  virtual HRESULT STDMETHODCALLTYPE get_station_name(BSTR* Value/*[out,retval]*/) = 0; // [75]
  virtual HRESULT STDMETHODCALLTYPE get_site_height(long* Value/*[out,retval]*/) = 0; // [76]
  virtual HRESULT STDMETHODCALLTYPE get_channel(BSTR* Value/*[out,retval]*/) = 0; // [77]
  virtual HRESULT STDMETHODCALLTYPE get_date_of_last_change(DATE* Value/*[out,retval]*/) = 0; // [78]
  virtual HRESULT STDMETHODCALLTYPE get_numregion(BSTR* Value/*[out,retval]*/) = 0; // [79]
  virtual HRESULT STDMETHODCALLTYPE get_maxCoordDist(double* Value/*[out,retval]*/) = 0; // [80]
  virtual HRESULT STDMETHODCALLTYPE set_maxCoordDist(double Value/*[in]*/) = 0; // [80]
  virtual HRESULT STDMETHODCALLTYPE set_station_name(BSTR Value/*[in]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE set_channel_name(BSTR Value/*[in]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE get_rpc(Lisbctxserver_tlb::TBcRpc* Value/*[out,retval]*/) = 0; // [83]
  virtual HRESULT STDMETHODCALLTYPE set_rpc(Lisbctxserver_tlb::TBcRpc Value/*[in]*/) = 0; // [83]
  virtual HRESULT STDMETHODCALLTYPE get_rxMode(Lisbctxserver_tlb::TBcRxMode* Value/*[out,retval]*/) = 0; // [84]
  virtual HRESULT STDMETHODCALLTYPE set_rxMode(Lisbctxserver_tlb::TBcRxMode Value/*[in]*/) = 0; // [84]
  virtual HRESULT STDMETHODCALLTYPE get_attribsDs(long* Value/*[out,retval]*/) = 0; // [85]
  virtual HRESULT STDMETHODCALLTYPE get_coord(BSTR* Value/*[out,retval]*/) = 0; // [88]
  virtual HRESULT STDMETHODCALLTYPE set_coord(BSTR Value/*[in]*/) = 0; // [88]
  virtual HRESULT STDMETHODCALLTYPE get_pol_isol(double* Value/*[out,retval]*/) = 0; // [86]
  virtual HRESULT STDMETHODCALLTYPE set_pol_isol(double Value/*[in]*/) = 0; // [86]
};

// *********************************************************************//
// Interface: ILisBcAntPatt
// Flags:     (256) OleAutomation
// GUID:      {120F00C3-1F34-4D04-8F3A-7B5120F6A985}
// *********************************************************************//
interface ILisBcAntPatt  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_gain_h(long idx/*[in]*/, double* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_gain_h(long idx/*[in]*/, double Value/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_gain_v(long idx/*[in]*/, double* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_gain_v(long idx/*[in]*/, double Value/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_discr_h(long idx/*[in]*/, double* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_discr_h(long idx/*[in]*/, double Value/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_discr_v(long idx/*[in]*/, double* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_discr_v(long idx/*[in]*/, double Value/*[in]*/) = 0; // [4]
};

// *********************************************************************//
// Interface: ILISBCTxList
// Flags:     (256) OleAutomation
// GUID:      {F2BB0908-E39B-4502-B73A-1C645A86B7BE}
// *********************************************************************//
interface ILISBCTxList  : public IUnknown
{
public:
  // [1] Добавить передатчик в список
  virtual HRESULT STDMETHODCALLTYPE AddTx(Lisbctxserver_tlb::ILISBCTx* Tx/*[in]*/, 
                                          long* idx/*[out,retval]*/) = 0;
  // [2] Удалить передатчик из списка
  virtual HRESULT STDMETHODCALLTYPE RemoveTx(Lisbctxserver_tlb::ILISBCTx* Tx/*[in]*/) = 0;
  // [3] Удалить передатчик по Ид
  virtual HRESULT STDMETHODCALLTYPE RemoveId(long id/*[in]*/) = 0;
  // [4] Очистить список
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0;
  // [5] Размер
  virtual HRESULT STDMETHODCALLTYPE get_Size(long* Value/*[out,retval]*/) = 0;
  // [6] Ид передатчика по индексу в списке
  virtual HRESULT STDMETHODCALLTYPE get_TxId(long idx/*[in]*/, long* Value/*[out,retval]*/) = 0;
  // [7] Указатеь на интерфейс передатчика по индексу в списке
  virtual HRESULT STDMETHODCALLTYPE get_Tx(long idx/*[in]*/, 
                                           Lisbctxserver_tlb::ILISBCTx** Value/*[out,retval]*/) = 0;
  // [8] Флаг использования в расчётах по индексу в списке
  virtual HRESULT STDMETHODCALLTYPE get_TxUseInCalc(long idx/*[in]*/, 
                                                    VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [8] Флаг использования в расчётах по индексу в списке
  virtual HRESULT STDMETHODCALLTYPE set_TxUseInCalc(long idx/*[in]*/, VARIANT_BOOL Value/*[in]*/) = 0;
  // [9] Помеха от нас по индексу в списке
  virtual HRESULT STDMETHODCALLTYPE get_TxWantInterfere(long idx/*[in]*/, 
                                                        double* Value/*[out,retval]*/) = 0;
  // [9] Помеха от нас по индексу в списке
  virtual HRESULT STDMETHODCALLTYPE set_TxWantInterfere(long idx/*[in]*/, double Value/*[in]*/) = 0;
  // [10] Помеха нам по индексу в списке
  virtual HRESULT STDMETHODCALLTYPE get_TxUnwantInterfere(long idx/*[in]*/, 
                                                          double* Value/*[out,retval]*/) = 0;
  // [10] Помеха нам по индексу в списке
  virtual HRESULT STDMETHODCALLTYPE set_TxUnwantInterfere(long idx/*[in]*/, double Value/*[in]*/) = 0;
  // [11] Сортировать список по помехе от нас
  virtual HRESULT STDMETHODCALLTYPE SortByWantInterfere(void) = 0;
  // [12] Сортировать список по помехе нам
  virtual HRESULT STDMETHODCALLTYPE SortByUnwantInterfere(void) = 0;
  // [13] Тип помехи от нас ('T', 'S')
  virtual HRESULT STDMETHODCALLTYPE get_TxWantedKind(long idx/*[in]*/, 
                                                     signed_char* Value/*[out,retval]*/) = 0;
  // [13] Тип помехи от нас ('T', 'S')
  virtual HRESULT STDMETHODCALLTYPE set_TxWantedKind(long idx/*[in]*/, signed_char Value/*[in]*/) = 0;
  // [14] Тип помехи нам ('T', 'S')
  virtual HRESULT STDMETHODCALLTYPE get_TxUnwantedKind(long idx/*[in]*/, 
                                                       signed_char* Value/*[out,retval]*/) = 0;
  // [14] Тип помехи нам ('T', 'S')
  virtual HRESULT STDMETHODCALLTYPE set_TxUnwantedKind(long idx/*[in]*/, signed_char Value/*[in]*/) = 0;
  // [15] расстояние до основного передатчика
  virtual HRESULT STDMETHODCALLTYPE get_TxDistance(long idx/*[in]*/, double* Value/*[out,retval]*/) = 0;
  // [15] расстояние до основного передатчика
  virtual HRESULT STDMETHODCALLTYPE set_TxDistance(long idx/*[in]*/, double Value/*[in]*/) = 0;
  // [16] азимут с основного передатчика на мешающий
  virtual HRESULT STDMETHODCALLTYPE get_TxAzimuth(long idx/*[in]*/, double* Value/*[out,retval]*/) = 0;
  // [16] азимут с основного передатчика на мешающий
  virtual HRESULT STDMETHODCALLTYPE set_TxAzimuth(long idx/*[in]*/, double Value/*[in]*/) = 0;
  // [17] величина перекрытия теоретических зон основного и мешающего передатчика, км. (если <= 0, то зоны не перекрываются,если > 0, зоны перекрываются)
  virtual HRESULT STDMETHODCALLTYPE get_TxZoneOverlapping(long idx/*[in]*/, 
                                                          double* Value/*[out,retval]*/) = 0;
  // [17] величина перекрытия теоретических зон основного и мешающего передатчика, км. (если <= 0, то зоны не перекрываются,если > 0, зоны перекрываются)
  virtual HRESULT STDMETHODCALLTYPE set_TxZoneOverlapping(long idx/*[in]*/, double Value/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_TxShowOnMap(long idx/*[in]*/, 
                                                    VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE set_TxShowOnMap(long idx/*[in]*/, VARIANT_BOOL Value/*[in]*/) = 0; // [18]
};

// *********************************************************************//
// Interface: ILisBcDigAllot
// Flags:     (256) OleAutomation
// GUID:      {200C5C0C-3C29-4C68-8023-13CF9C3DF84E}
// *********************************************************************//
interface ILisBcDigAllot  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_subareasDs(long* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_pointsDs(long* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_notice_type(BSTR* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_adm_id(long* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_adm_ref_id(BSTR* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_adm_ref_id(BSTR Value/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_plan_entry(long* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_plan_entry(long Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_freq(double* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_freq(double Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_offset(long* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_offset(long Value/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_sfn_id(long* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_sfn_id(long Value/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_allot_name(BSTR* Value/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_allot_name(BSTR Value/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_nb_sub_areas(long* Value/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_ctry(BSTR* Value/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE set_ctry(BSTR Value/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_geo_area(BSTR* Value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE set_geo_area(BSTR Value/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_ref_plan_cfg(BSTR* Value/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE set_ref_plan_cfg(BSTR Value/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_polar(unsigned_char* Value/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE set_polar(unsigned_char Value/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_spect_mask(unsigned_char* Value/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE set_spect_mask(unsigned_char Value/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_db_sect(long* Value/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_db_sect(long Value/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE get_remarks1(BSTR* Value/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_remarks1(BSTR Value/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_remarks2(BSTR* Value/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_remarks2(BSTR Value/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_remarks3(BSTR* Value/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_remarks3(BSTR Value/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE AddSubarea(long id/*[in]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE DelSubarea(long id/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_point(long subareaId/*[in]*/, long num/*[in]*/, 
                                              Lisbctxserver_tlb::BcCoord* Value/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_points_num(long subareaId/*[in]*/, 
                                                   long* Value/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_typ_ref_netwk(BSTR* Value/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_typ_ref_netwk(BSTR Value/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_channel_id(long* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_channel_id(long Value/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_SubareaCount(long* Value/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_subareaId(long idx/*[in]*/, long* Value/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_subareaTag(long idx/*[in]*/, long* Value/*[out,retval]*/) = 0; // [29]
};

// *********************************************************************//
// Interface: ILisBcObjectServerVersion
// Flags:     (256) OleAutomation
// GUID:      {2C374134-1586-4EB3-82B9-821BAAC63A60}
// *********************************************************************//
interface ILisBcObjectServerVersion  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE GetVersion(double* Value/*[out]*/) = 0; // [1]
};

// *********************************************************************//
// Interface: ILisBcLfMf
// Flags:     (320) Dual OleAutomation
// GUID:      {3B6F24B4-2EC9-41EF-B8CA-913F2AB3B9DC}
// *********************************************************************//
interface ILisBcLfMf  : public IUnknown
{
public:
  // [1] system id (enum)
  virtual HRESULT STDMETHODCALLTYPE get_lfmf_system(long* Value/*[out,retval]*/) = 0;
  // [1] system id (enum)
  virtual HRESULT STDMETHODCALLTYPE set_lfmf_system(long Value/*[in]*/) = 0;
  // [2] bandwidth (kHz)
  virtual HRESULT STDMETHODCALLTYPE get_lfmf_bw(double* Value/*[out,retval]*/) = 0;
  // [2] bandwidth (kHz)
  virtual HRESULT STDMETHODCALLTYPE set_lfmf_bw(double Value/*[in]*/) = 0;
  // [3] is operated at day
  virtual HRESULT STDMETHODCALLTYPE get_day_op(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [3] is operated at day
  virtual HRESULT STDMETHODCALLTYPE set_day_op(VARIANT_BOOL Value/*[in]*/) = 0;
  // [4] is operated at night
  virtual HRESULT STDMETHODCALLTYPE get_night_op(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [4] is operated at night
  virtual HRESULT STDMETHODCALLTYPE set_night_op(VARIANT_BOOL Value/*[in]*/) = 0;
  // [5] true - current data for day, false - for night
  virtual HRESULT STDMETHODCALLTYPE get_is_day(VARIANT_BOOL* Value/*[out,retval]*/) = 0;
  // [5] true - current data for day, false - for night
  virtual HRESULT STDMETHODCALLTYPE set_is_day(VARIANT_BOOL Value/*[in]*/) = 0;
  // [6] ground conductivity
  virtual HRESULT STDMETHODCALLTYPE get_gnd_cond(double* Value/*[out,retval]*/) = 0;
  // [6] ground conductivity
  virtual HRESULT STDMETHODCALLTYPE set_gnd_cond(double Value/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_adj_ratio(double* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_adj_ratio(double Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_ant_type(unsigned_char* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_ant_type(unsigned_char Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_noise_zone(long* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_noise_zone(long Value/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_mod_type(long* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_mod_type(long Value/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_prot_levl(long* Value/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_prot_levl(long Value/*[in]*/) = 0; // [11]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_lfmf_system(void)
  {
    long Value;
    OLECHECK(this->get_lfmf_system((long*)&Value));
    return Value;
  }

  double __fastcall get_lfmf_bw(void)
  {
    double Value;
    OLECHECK(this->get_lfmf_bw((double*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_day_op(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_day_op((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_night_op(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_night_op((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_is_day(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_is_day((VARIANT_BOOL*)&Value));
    return Value;
  }

  double __fastcall get_gnd_cond(void)
  {
    double Value;
    OLECHECK(this->get_gnd_cond((double*)&Value));
    return Value;
  }

  double __fastcall get_adj_ratio(void)
  {
    double Value;
    OLECHECK(this->get_adj_ratio((double*)&Value));
    return Value;
  }

  unsigned_char __fastcall get_ant_type(void)
  {
    unsigned_char Value;
    OLECHECK(this->get_ant_type((unsigned_char*)&Value));
    return Value;
  }

  long __fastcall get_noise_zone(void)
  {
    long Value;
    OLECHECK(this->get_noise_zone((long*)&Value));
    return Value;
  }

  long __fastcall get_mod_type(void)
  {
    long Value;
    OLECHECK(this->get_mod_type((long*)&Value));
    return Value;
  }

  long __fastcall get_prot_levl(void)
  {
    long Value;
    OLECHECK(this->get_prot_levl((long*)&Value));
    return Value;
  }


  __property   long            lfmf_system = {read = get_lfmf_system, write = set_lfmf_system};
  __property   double          lfmf_bw = {read = get_lfmf_bw, write = set_lfmf_bw};
  __property   VARIANT_BOOL    day_op = {read = get_day_op, write = set_day_op};
  __property   VARIANT_BOOL    night_op = {read = get_night_op, write = set_night_op};
  __property   VARIANT_BOOL    is_day = {read = get_is_day, write = set_is_day};
  __property   double          gnd_cond = {read = get_gnd_cond, write = set_gnd_cond};
  __property   double          adj_ratio = {read = get_adj_ratio, write = set_adj_ratio};
  __property   unsigned_char   ant_type = {read = get_ant_type, write = set_ant_type};
  __property   long            noise_zone = {read = get_noise_zone, write = set_noise_zone};
  __property   long            mod_type = {read = get_mod_type, write = set_mod_type};
  __property   long            prot_levl = {read = get_prot_levl, write = set_prot_levl};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ILisBcFxm
// Flags:     (320) Dual OleAutomation
// GUID:      {13F9E9D5-1200-4642-BB39-0ED44188C686}
// *********************************************************************//
interface ILisBcFxm  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_fxm_bandwidth(double* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_fxm_bandwidth(double Value/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_fxm_system(unsigned_long* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_fxm_system(unsigned_long Value/*[in]*/) = 0; // [3]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  double __fastcall get_fxm_bandwidth(void)
  {
    double Value;
    OLECHECK(this->get_fxm_bandwidth((double*)&Value));
    return Value;
  }

  unsigned_long __fastcall get_fxm_system(void)
  {
    unsigned_long Value;
    OLECHECK(this->get_fxm_system((unsigned_long*)&Value));
    return Value;
  }


  __property   double          fxm_bandwidth = {read = get_fxm_bandwidth, write = set_fxm_bandwidth};
  __property   unsigned_long   fxm_system = {read = get_fxm_system, write = set_fxm_system};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ILisAssocAllotId
// Flags:     (256) OleAutomation
// GUID:      {0A8A9BCC-A5DE-4CB7-894F-6A43C4C7CE0F}
// *********************************************************************//
interface ILisAssocAllotId  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE GetAssAllotId(BSTR* assAllId/*[out,retval]*/) = 0; // [1]
};

// *********************************************************************//
// Interface: ILisBcDvbt2
// Flags:     (320) Dual OleAutomation
// GUID:      {30008C4B-A850-4CB4-84AD-D8A6AE555C5F}
// *********************************************************************//
interface ILisBcDvbt2  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_IsDvbt2(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_IsDvbt2(VARIANT_BOOL Value/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_PilotPattern(unsigned_long* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_PilotPattern(unsigned_long Value/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Diversity(unsigned_long* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_Diversity(unsigned_long Value/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_RotatedConstellations(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_RotatedConstellations(VARIANT_BOOL Value/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_ModeOfExtentions(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_ModeOfExtentions(VARIANT_BOOL Value/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_Modulation(Lisbctxserver_tlb::TModulation* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_Modulation(Lisbctxserver_tlb::TModulation Value/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_CodeRate(Lisbctxserver_tlb::TCodeRate* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_CodeRate(Lisbctxserver_tlb::TCodeRate Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_FftSize(Lisbctxserver_tlb::TFftSize* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_FftSize(Lisbctxserver_tlb::TFftSize Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_GuardInterval(Lisbctxserver_tlb::TGuardInterval2* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_GuardInterval(Lisbctxserver_tlb::TGuardInterval2 Value/*[in]*/) = 0; // [9]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_IsDvbt2(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_IsDvbt2((VARIANT_BOOL*)&Value));
    return Value;
  }

  unsigned_long __fastcall get_PilotPattern(void)
  {
    unsigned_long Value;
    OLECHECK(this->get_PilotPattern((unsigned_long*)&Value));
    return Value;
  }

  unsigned_long __fastcall get_Diversity(void)
  {
    unsigned_long Value;
    OLECHECK(this->get_Diversity((unsigned_long*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_RotatedConstellations(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_RotatedConstellations((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_ModeOfExtentions(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_ModeOfExtentions((VARIANT_BOOL*)&Value));
    return Value;
  }

  Lisbctxserver_tlb::TModulation __fastcall get_Modulation(void)
  {
    Lisbctxserver_tlb::TModulation Value;
    OLECHECK(this->get_Modulation((Lisbctxserver_tlb::TModulation*)&Value));
    return Value;
  }

  Lisbctxserver_tlb::TCodeRate __fastcall get_CodeRate(void)
  {
    Lisbctxserver_tlb::TCodeRate Value;
    OLECHECK(this->get_CodeRate((Lisbctxserver_tlb::TCodeRate*)&Value));
    return Value;
  }

  Lisbctxserver_tlb::TFftSize __fastcall get_FftSize(void)
  {
    Lisbctxserver_tlb::TFftSize Value;
    OLECHECK(this->get_FftSize((Lisbctxserver_tlb::TFftSize*)&Value));
    return Value;
  }

  Lisbctxserver_tlb::TGuardInterval2 __fastcall get_GuardInterval(void)
  {
    Lisbctxserver_tlb::TGuardInterval2 Value;
    OLECHECK(this->get_GuardInterval((Lisbctxserver_tlb::TGuardInterval2*)&Value));
    return Value;
  }


  __property   VARIANT_BOOL    IsDvbt2 = {read = get_IsDvbt2, write = set_IsDvbt2};
  __property   unsigned_long   PilotPattern = {read = get_PilotPattern, write = set_PilotPattern};
  __property   unsigned_long   Diversity = {read = get_Diversity, write = set_Diversity};
  __property   VARIANT_BOOL    RotatedConstellations = {read = get_RotatedConstellations, write = set_RotatedConstellations};
  __property   VARIANT_BOOL    ModeOfExtentions = {read = get_ModeOfExtentions, write = set_ModeOfExtentions};
  __property   Lisbctxserver_tlb::TModulation Modulation = {read = get_Modulation, write = set_Modulation};
  __property   Lisbctxserver_tlb::TCodeRate CodeRate = {read = get_CodeRate, write = set_CodeRate};
  __property   Lisbctxserver_tlb::TFftSize FftSize = {read = get_FftSize, write = set_FftSize};
  __property   Lisbctxserver_tlb::TGuardInterval2 GuardInterval = {read = get_GuardInterval, write = set_GuardInterval};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMILISBCTx
// Interface: ILISBCTx
// *********************************************************************//
template <class T /* ILISBCTx */ >
class TCOMILISBCTxT : public TComInterface<ILISBCTx>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMILISBCTxT() {}
  TCOMILISBCTxT(ILISBCTx *intf, bool addRef = false) : TComInterface<ILISBCTx>(intf, addRef) {}
  TCOMILISBCTxT(const TCOMILISBCTxT& src) : TComInterface<ILISBCTx>(src) {}
  TCOMILISBCTxT& operator=(const TCOMILISBCTxT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_id(long* Value/*[out,retval]*/);
  long            __fastcall get_id(void);
  HRESULT         __fastcall get_longitude(double* Value/*[out,retval]*/);
  double          __fastcall get_longitude(void);
  HRESULT         __fastcall set_longitude(double Value/*[in]*/);
  HRESULT         __fastcall get_latitude(double* Value/*[out,retval]*/);
  double          __fastcall get_latitude(void);
  HRESULT         __fastcall set_latitude(double Value/*[in]*/);
  HRESULT         __fastcall get_typesystem(Lisbctxserver_tlb::TBCTvSystems* Value/*[out,retval]*/);
  Lisbctxserver_tlb::TBCTvSystems __fastcall get_typesystem(void);
  HRESULT         __fastcall set_typesystem(Lisbctxserver_tlb::TBCTvSystems Value/*[in]*/);
  HRESULT         __fastcall get_video_carrier(double* Value/*[out,retval]*/);
  double          __fastcall get_video_carrier(void);
  HRESULT         __fastcall set_video_carrier(double Value/*[in]*/);
  HRESULT         __fastcall get_video_offset_line(long* Value/*[out,retval]*/);
  long            __fastcall get_video_offset_line(void);
  HRESULT         __fastcall set_video_offset_line(long Value/*[in]*/);
  HRESULT         __fastcall get_video_offset_herz(long* Value/*[out,retval]*/);
  long            __fastcall get_video_offset_herz(void);
  HRESULT         __fastcall set_video_offset_herz(long Value/*[in]*/);
  HRESULT         __fastcall get_systemcolor(Lisbctxserver_tlb::TBCTvStandards* Value/*[out,retval]*/);
  Lisbctxserver_tlb::TBCTvStandards __fastcall get_systemcolor(void);
  HRESULT         __fastcall set_systemcolor(Lisbctxserver_tlb::TBCTvStandards Value/*[in]*/);
  HRESULT         __fastcall get_power_video(double* Value/*[out,retval]*/);
  double          __fastcall get_power_video(void);
  HRESULT         __fastcall set_power_video(double Value/*[in]*/);
  HRESULT         __fastcall get_epr_video_max(double* Value/*[out,retval]*/);
  double          __fastcall get_epr_video_max(void);
  HRESULT         __fastcall set_epr_video_max(double Value/*[in]*/);
  HRESULT         __fastcall get_epr_video_hor(double* Value/*[out,retval]*/);
  double          __fastcall get_epr_video_hor(void);
  HRESULT         __fastcall set_epr_video_hor(double Value/*[in]*/);
  HRESULT         __fastcall get_epr_video_vert(double* Value/*[out,retval]*/);
  double          __fastcall get_epr_video_vert(void);
  HRESULT         __fastcall set_epr_video_vert(double Value/*[in]*/);
  HRESULT         __fastcall get_effectpowerhor(long idx/*[in]*/, double* Value/*[out,retval]*/);
  double          __fastcall get_effectpowerhor(long idx/*[in]*/);
  HRESULT         __fastcall set_effectpowerhor(long idx/*[in]*/, double Value/*[in]*/);
  HRESULT         __fastcall get_effectpowervert(long idx/*[in]*/, double* Value/*[out,retval]*/);
  double          __fastcall get_effectpowervert(long idx/*[in]*/);
  HRESULT         __fastcall set_effectpowervert(long idx/*[in]*/, double Value/*[in]*/);
  HRESULT         __fastcall get_identifiersfn(long* Value/*[out,retval]*/);
  long            __fastcall get_identifiersfn(void);
  HRESULT         __fastcall set_identifiersfn(long Value/*[in]*/);
  HRESULT         __fastcall get_relativetimingsfn(long* Value/*[out,retval]*/);
  long            __fastcall get_relativetimingsfn(void);
  HRESULT         __fastcall set_relativetimingsfn(long Value/*[in]*/);
  HRESULT         __fastcall get_blockcentrefreq(double* Value/*[out,retval]*/);
  double          __fastcall get_blockcentrefreq(void);
  HRESULT         __fastcall set_blockcentrefreq(double Value/*[in]*/);
  HRESULT         __fastcall get_sound_carrier_primary(double* Value/*[out,retval]*/);
  double          __fastcall get_sound_carrier_primary(void);
  HRESULT         __fastcall set_sound_carrier_primary(double Value/*[in]*/);
  HRESULT         __fastcall get_sound_offset_primary(long* Value/*[out,retval]*/);
  long            __fastcall get_sound_offset_primary(void);
  HRESULT         __fastcall set_sound_offset_primary(long Value/*[in]*/);
  HRESULT         __fastcall get_power_sound_primary(double* Value/*[out,retval]*/);
  double          __fastcall get_power_sound_primary(void);
  HRESULT         __fastcall set_power_sound_primary(double Value/*[in]*/);
  HRESULT         __fastcall get_epr_sound_max_primary(double* Value/*[out,retval]*/);
  double          __fastcall get_epr_sound_max_primary(void);
  HRESULT         __fastcall set_epr_sound_max_primary(double Value/*[in]*/);
  HRESULT         __fastcall get_epr_sound_hor_primary(double* Value/*[out,retval]*/);
  double          __fastcall get_epr_sound_hor_primary(void);
  HRESULT         __fastcall set_epr_sound_hor_primary(double Value/*[in]*/);
  HRESULT         __fastcall get_epr_sound_vert_primary(double* Value/*[out,retval]*/);
  double          __fastcall get_epr_sound_vert_primary(void);
  HRESULT         __fastcall set_epr_sound_vert_primary(double Value/*[in]*/);
  HRESULT         __fastcall get_v_sound_ratio_primary(double* Value/*[out,retval]*/);
  double          __fastcall get_v_sound_ratio_primary(void);
  HRESULT         __fastcall set_v_sound_ratio_primary(double Value/*[in]*/);
  HRESULT         __fastcall get_monostereo_primary(long* Value/*[out,retval]*/);
  long            __fastcall get_monostereo_primary(void);
  HRESULT         __fastcall set_monostereo_primary(long Value/*[in]*/);
  HRESULT         __fastcall get_sound_carrier_second(double* Value/*[out,retval]*/);
  double          __fastcall get_sound_carrier_second(void);
  HRESULT         __fastcall set_sound_carrier_second(double Value/*[in]*/);
  HRESULT         __fastcall get_sound_offset_second(long* Value/*[out,retval]*/);
  long            __fastcall get_sound_offset_second(void);
  HRESULT         __fastcall set_sound_offset_second(long Value/*[in]*/);
  HRESULT         __fastcall get_power_sound_second(double* Value/*[out,retval]*/);
  double          __fastcall get_power_sound_second(void);
  HRESULT         __fastcall set_power_sound_second(double Value/*[in]*/);
  HRESULT         __fastcall get_epr_sound_max_second(double* Value/*[out,retval]*/);
  double          __fastcall get_epr_sound_max_second(void);
  HRESULT         __fastcall set_epr_sound_max_second(double Value/*[in]*/);
  HRESULT         __fastcall get_epr_sound_hor_second(double* Value/*[out,retval]*/);
  double          __fastcall get_epr_sound_hor_second(void);
  HRESULT         __fastcall set_epr_sound_hor_second(double Value/*[in]*/);
  HRESULT         __fastcall get_epr_sound_vert_second(double* Value/*[out,retval]*/);
  double          __fastcall get_epr_sound_vert_second(void);
  HRESULT         __fastcall set_epr_sound_vert_second(double Value/*[in]*/);
  HRESULT         __fastcall get_v_sound_ratio_second(double* Value/*[out,retval]*/);
  double          __fastcall get_v_sound_ratio_second(void);
  HRESULT         __fastcall set_v_sound_ratio_second(double Value/*[in]*/);
  HRESULT         __fastcall get_effectheight(long idx/*[in]*/, double* Value/*[out,retval]*/);
  double          __fastcall get_effectheight(long idx/*[in]*/);
  HRESULT         __fastcall set_effectheight(long idx/*[in]*/, double Value/*[in]*/);
  HRESULT         __fastcall get_height_eft_max(long* Value/*[out,retval]*/);
  long            __fastcall get_height_eft_max(void);
  HRESULT         __fastcall set_height_eft_max(long Value/*[in]*/);
  HRESULT         __fastcall get_polarization(Lisbctxserver_tlb::TBCPolarization* Value/*[out,retval]*/);
  Lisbctxserver_tlb::TBCPolarization __fastcall get_polarization(void);
  HRESULT         __fastcall set_polarization(Lisbctxserver_tlb::TBCPolarization Value/*[in]*/);
  HRESULT         __fastcall get_direction(Lisbctxserver_tlb::TBCDirection* Value/*[out,retval]*/);
  Lisbctxserver_tlb::TBCDirection __fastcall get_direction(void);
  HRESULT         __fastcall set_direction(Lisbctxserver_tlb::TBCDirection Value/*[in]*/);
  HRESULT         __fastcall get_fiderloss(double* Value/*[out,retval]*/);
  double          __fastcall get_fiderloss(void);
  HRESULT         __fastcall set_fiderloss(double Value/*[in]*/);
  HRESULT         __fastcall get_fiderlenght(long* Value/*[out,retval]*/);
  long            __fastcall get_fiderlenght(void);
  HRESULT         __fastcall set_fiderlenght(long Value/*[in]*/);
  HRESULT         __fastcall get_angleelevation_hor(long* Value/*[out,retval]*/);
  long            __fastcall get_angleelevation_hor(void);
  HRESULT         __fastcall set_angleelevation_hor(long Value/*[in]*/);
  HRESULT         __fastcall get_angleelevation_vert(long* Value/*[out,retval]*/);
  long            __fastcall get_angleelevation_vert(void);
  HRESULT         __fastcall set_angleelevation_vert(long Value/*[in]*/);
  HRESULT         __fastcall get_antennagain(double* Value/*[out,retval]*/);
  double          __fastcall get_antennagain(void);
  HRESULT         __fastcall set_antennagain(double Value/*[in]*/);
  HRESULT         __fastcall get_effectantennagains(long idx/*[in]*/, double* Value/*[out,retval]*/);
  double          __fastcall get_effectantennagains(long idx/*[in]*/);
  HRESULT         __fastcall set_effectantennagains(long idx/*[in]*/, double Value/*[in]*/);
  HRESULT         __fastcall get_testpointsis(long* Value/*[out,retval]*/);
  long            __fastcall get_testpointsis(void);
  HRESULT         __fastcall set_testpointsis(long Value/*[in]*/);
  HRESULT         __fastcall init(long pdatabase/*[in]*/, long load_id/*[in]*/);
  HRESULT         __fastcall save(void);
  HRESULT         __fastcall get_heightantenna(long* Value/*[out,retval]*/);
  long            __fastcall get_heightantenna(void);
  HRESULT         __fastcall set_heightantenna(long Value/*[in]*/);
  HRESULT         __fastcall get_data_changes(long* Value/*[out,retval]*/);
  long            __fastcall get_data_changes(void);
  HRESULT         __fastcall get_systemcast(Lisbctxserver_tlb::TBCTxType* Value/*[out,retval]*/);
  Lisbctxserver_tlb::TBCTxType __fastcall get_systemcast(void);
  HRESULT         __fastcall set_systemcast(Lisbctxserver_tlb::TBCTxType Value/*[in]*/);
  HRESULT         __fastcall get_analogtelesystem(long* Value/*[out,retval]*/);
  long            __fastcall get_analogtelesystem(void);
  HRESULT         __fastcall set_analogtelesystem(long Value/*[in]*/);
  HRESULT         __fastcall get_typeoffset(Lisbctxserver_tlb::TBCOffsetType* Value/*[out,retval]*/);
  Lisbctxserver_tlb::TBCOffsetType __fastcall get_typeoffset(void);
  HRESULT         __fastcall set_typeoffset(Lisbctxserver_tlb::TBCOffsetType Value/*[in]*/);
  HRESULT         __fastcall get_channel_id(long* Value/*[out,retval]*/);
  long            __fastcall get_channel_id(void);
  HRESULT         __fastcall set_channel_id(long Value/*[in]*/);
  HRESULT         __fastcall get_h_eff(long azimuth/*[in]*/, long* height/*[out,retval]*/);
  long            __fastcall get_h_eff(long azimuth/*[in]*/);
  HRESULT         __fastcall get_erp(long azimuth/*[in]*/, double* power/*[out,retval]*/);
  double          __fastcall get_erp(long azimuth/*[in]*/);
  HRESULT         __fastcall get_freq_carrier(double* freq/*[out,retval]*/);
  double          __fastcall get_freq_carrier(void);
  HRESULT         __fastcall get_sort_key_in(double* Value/*[out,retval]*/);
  double          __fastcall get_sort_key_in(void);
  HRESULT         __fastcall set_sort_key_in(double Value/*[in]*/);
  HRESULT         __fastcall get_sort_key_out(double* Value/*[out,retval]*/);
  double          __fastcall get_sort_key_out(void);
  HRESULT         __fastcall set_sort_key_out(double Value/*[in]*/);
  HRESULT         __fastcall get_dvb_system(Lisbctxserver_tlb::TBCDVBSystem* Value/*[out,retval]*/);
  Lisbctxserver_tlb::TBCDVBSystem __fastcall get_dvb_system(void);
  HRESULT         __fastcall set_dvb_system(Lisbctxserver_tlb::TBCDVBSystem Value/*[in]*/);
  HRESULT         __fastcall get_fm_system(Lisbctxserver_tlb::TBCFMSystem* Value/*[out,retval]*/);
  Lisbctxserver_tlb::TBCFMSystem __fastcall get_fm_system(void);
  HRESULT         __fastcall set_fm_system(Lisbctxserver_tlb::TBCFMSystem Value/*[in]*/);
  HRESULT         __fastcall get_gaussianchannel(double* Value/*[out,retval]*/);
  double          __fastcall get_gaussianchannel(void);
  HRESULT         __fastcall set_gaussianchannel(double Value/*[in]*/);
  HRESULT         __fastcall get_riceanchannel(double* Value/*[out,retval]*/);
  double          __fastcall get_riceanchannel(void);
  HRESULT         __fastcall set_riceanchannel(double Value/*[in]*/);
  HRESULT         __fastcall get_rayleighchannel(double* Value/*[out,retval]*/);
  double          __fastcall get_rayleighchannel(void);
  HRESULT         __fastcall set_rayleighchannel(double Value/*[in]*/);
  HRESULT         __fastcall saveToString(BSTR* Dest/*[out,retval]*/);
  BSTR            __fastcall saveToString(void);
  HRESULT         __fastcall loadFromString(BSTR Source/*[in]*/);
  HRESULT         __fastcall get_stand_id(long* Value/*[out,retval]*/);
  long            __fastcall get_stand_id(void);
  HRESULT         __fastcall set_stand_id(long Value/*[in]*/);
  HRESULT         __fastcall get_acout_id(long* Value/*[out,retval]*/);
  long            __fastcall get_acout_id(void);
  HRESULT         __fastcall set_acout_id(long Value/*[in]*/);
  HRESULT         __fastcall get_acin_id(long* Value/*[out,retval]*/);
  long            __fastcall get_acin_id(void);
  HRESULT         __fastcall set_acin_id(long Value/*[in]*/);
  HRESULT         __fastcall get_adminid(long* Value/*[out,retval]*/);
  long            __fastcall get_adminid(void);
  HRESULT         __fastcall set_adminid(long Value/*[in]*/);
  HRESULT         __fastcall get_is_fetched(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_is_fetched(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_is_fetched(void);
  HRESULT         __fastcall loadFromQuery(long query/*[in]*/);
  HRESULT         __fastcall invalidate(void);
  HRESULT         __fastcall get_database(long* Value/*[out,retval]*/);
  long            __fastcall get_database(void);
  HRESULT         __fastcall set_database(long Value/*[in]*/);
  HRESULT         __fastcall get_adm_response(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_adm_response(void);
  HRESULT         __fastcall get_adm_sited_in(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_adm_sited_in(void);
  HRESULT         __fastcall get_status_code(long* Value/*[out,retval]*/);
  long            __fastcall get_status_code(void);
  HRESULT         __fastcall get_station_name(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_station_name(void);
  HRESULT         __fastcall get_site_height(long* Value/*[out,retval]*/);
  long            __fastcall get_site_height(void);
  HRESULT         __fastcall get_channel(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_channel(void);
  HRESULT         __fastcall get_date_of_last_change(DATE* Value/*[out,retval]*/);
  DATE            __fastcall get_date_of_last_change(void);
  HRESULT         __fastcall get_numregion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_numregion(void);
  HRESULT         __fastcall get_maxCoordDist(double* Value/*[out,retval]*/);
  double          __fastcall get_maxCoordDist(void);
  HRESULT         __fastcall set_maxCoordDist(double Value/*[in]*/);
  HRESULT         __fastcall set_station_name(BSTR Value/*[in]*/);
  HRESULT         __fastcall set_channel_name(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_rpc(Lisbctxserver_tlb::TBcRpc* Value/*[out,retval]*/);
  Lisbctxserver_tlb::TBcRpc __fastcall get_rpc(void);
  HRESULT         __fastcall set_rpc(Lisbctxserver_tlb::TBcRpc Value/*[in]*/);
  HRESULT         __fastcall get_rxMode(Lisbctxserver_tlb::TBcRxMode* Value/*[out,retval]*/);
  Lisbctxserver_tlb::TBcRxMode __fastcall get_rxMode(void);
  HRESULT         __fastcall set_rxMode(Lisbctxserver_tlb::TBcRxMode Value/*[in]*/);
  HRESULT         __fastcall get_attribsDs(long* Value/*[out,retval]*/);
  long            __fastcall get_attribsDs(void);
  HRESULT         __fastcall get_coord(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_coord(void);
  HRESULT         __fastcall set_coord(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_pol_isol(double* Value/*[out,retval]*/);
  double          __fastcall get_pol_isol(void);
  HRESULT         __fastcall set_pol_isol(double Value/*[in]*/);

  __property   long            id = {read = get_id};
  __property   double          longitude = {read = get_longitude};
  __property   double          latitude = {read = get_latitude};
  __property   Lisbctxserver_tlb::TBCTvSystems typesystem = {read = get_typesystem};
  __property   double          video_carrier = {read = get_video_carrier};
  __property   long            video_offset_line = {read = get_video_offset_line};
  __property   long            video_offset_herz = {read = get_video_offset_herz};
  __property   Lisbctxserver_tlb::TBCTvStandards systemcolor = {read = get_systemcolor};
  __property   double          power_video = {read = get_power_video};
  __property   double          epr_video_max = {read = get_epr_video_max};
  __property   double          epr_video_hor = {read = get_epr_video_hor};
  __property   double          epr_video_vert = {read = get_epr_video_vert};
  __property   long            identifiersfn = {read = get_identifiersfn};
  __property   long            relativetimingsfn = {read = get_relativetimingsfn};
  __property   double          blockcentrefreq = {read = get_blockcentrefreq};
  __property   double          sound_carrier_primary = {read = get_sound_carrier_primary};
  __property   long            sound_offset_primary = {read = get_sound_offset_primary};
  __property   double          power_sound_primary = {read = get_power_sound_primary};
  __property   double          epr_sound_max_primary = {read = get_epr_sound_max_primary};
  __property   double          epr_sound_hor_primary = {read = get_epr_sound_hor_primary};
  __property   double          epr_sound_vert_primary = {read = get_epr_sound_vert_primary};
  __property   double          v_sound_ratio_primary = {read = get_v_sound_ratio_primary};
  __property   long            monostereo_primary = {read = get_monostereo_primary};
  __property   double          sound_carrier_second = {read = get_sound_carrier_second};
  __property   long            sound_offset_second = {read = get_sound_offset_second};
  __property   double          power_sound_second = {read = get_power_sound_second};
  __property   double          epr_sound_max_second = {read = get_epr_sound_max_second};
  __property   double          epr_sound_hor_second = {read = get_epr_sound_hor_second};
  __property   double          epr_sound_vert_second = {read = get_epr_sound_vert_second};
  __property   double          v_sound_ratio_second = {read = get_v_sound_ratio_second};
  __property   long            height_eft_max = {read = get_height_eft_max};
  __property   Lisbctxserver_tlb::TBCPolarization polarization = {read = get_polarization};
  __property   Lisbctxserver_tlb::TBCDirection direction = {read = get_direction};
  __property   double          fiderloss = {read = get_fiderloss};
  __property   long            fiderlenght = {read = get_fiderlenght};
  __property   long            angleelevation_hor = {read = get_angleelevation_hor};
  __property   long            angleelevation_vert = {read = get_angleelevation_vert};
  __property   double          antennagain = {read = get_antennagain};
  __property   long            testpointsis = {read = get_testpointsis};
  __property   long            heightantenna = {read = get_heightantenna};
  __property   long            data_changes = {read = get_data_changes};
  __property   Lisbctxserver_tlb::TBCTxType systemcast = {read = get_systemcast};
  __property   long            analogtelesystem = {read = get_analogtelesystem};
  __property   Lisbctxserver_tlb::TBCOffsetType typeoffset = {read = get_typeoffset};
  __property   long            channel_id = {read = get_channel_id};
  __property   double          sort_key_in = {read = get_sort_key_in};
  __property   double          sort_key_out = {read = get_sort_key_out};
  __property   Lisbctxserver_tlb::TBCDVBSystem dvb_system = {read = get_dvb_system};
  __property   Lisbctxserver_tlb::TBCFMSystem fm_system = {read = get_fm_system};
  __property   double          gaussianchannel = {read = get_gaussianchannel};
  __property   double          riceanchannel = {read = get_riceanchannel};
  __property   double          rayleighchannel = {read = get_rayleighchannel};
  __property   long            stand_id = {read = get_stand_id};
  __property   long            acout_id = {read = get_acout_id};
  __property   long            acin_id = {read = get_acin_id};
  __property   long            adminid = {read = get_adminid};
  __property   TOLEBOOL        is_fetched = {read = get_is_fetched};
  __property   long            database = {read = get_database};
  __property   BSTR            adm_response = {read = get_adm_response};
  __property   BSTR            adm_sited_in = {read = get_adm_sited_in};
  __property   long            status_code = {read = get_status_code};
  __property   BSTR            station_name = {read = get_station_name};
  __property   long            site_height = {read = get_site_height};
  __property   BSTR            channel = {read = get_channel};
  __property   DATE            date_of_last_change = {read = get_date_of_last_change};
  __property   BSTR            numregion = {read = get_numregion};
  __property   double          maxCoordDist = {read = get_maxCoordDist};
  __property   Lisbctxserver_tlb::TBcRpc rpc = {read = get_rpc};
  __property   Lisbctxserver_tlb::TBcRxMode rxMode = {read = get_rxMode};
  __property   long            attribsDs = {read = get_attribsDs};
  __property   BSTR            coord = {read = get_coord};
  __property   double          pol_isol = {read = get_pol_isol};
};
typedef TCOMILISBCTxT<ILISBCTx> TCOMILISBCTx;

typedef TComInterface<ILisBcAntPatt>  TCOMILisBcAntPatt;

// *********************************************************************//
// SmartIntf: TCOMILISBCTxList
// Interface: ILISBCTxList
// *********************************************************************//
template <class T /* ILISBCTxList */ >
class TCOMILISBCTxListT : public TComInterface<ILISBCTxList>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMILISBCTxListT() {}
  TCOMILISBCTxListT(ILISBCTxList *intf, bool addRef = false) : TComInterface<ILISBCTxList>(intf, addRef) {}
  TCOMILISBCTxListT(const TCOMILISBCTxListT& src) : TComInterface<ILISBCTxList>(src) {}
  TCOMILISBCTxListT& operator=(const TCOMILISBCTxListT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall AddTx(Lisbctxserver_tlb::ILISBCTx* Tx/*[in]*/, 
                                   long* idx/*[out,retval]*/);
  long            __fastcall AddTx(Lisbctxserver_tlb::ILISBCTx* Tx/*[in]*/);
  HRESULT         __fastcall RemoveTx(Lisbctxserver_tlb::ILISBCTx* Tx/*[in]*/);
  HRESULT         __fastcall RemoveId(long id/*[in]*/);
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall get_Size(long* Value/*[out,retval]*/);
  long            __fastcall get_Size(void);
  HRESULT         __fastcall get_TxId(long idx/*[in]*/, long* Value/*[out,retval]*/);
  long            __fastcall get_TxId(long idx/*[in]*/);
  HRESULT         __fastcall get_Tx(long idx/*[in]*/, 
                                    Lisbctxserver_tlb::ILISBCTx** Value/*[out,retval]*/);
  Lisbctxserver_tlb::ILISBCTx* __fastcall get_Tx(long idx/*[in]*/);
  HRESULT         __fastcall get_TxUseInCalc(long idx/*[in]*/, VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TxUseInCalc(long idx/*[in]*/);
  HRESULT         __fastcall set_TxUseInCalc(long idx/*[in]*/, VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_TxWantInterfere(long idx/*[in]*/, double* Value/*[out,retval]*/);
  double          __fastcall get_TxWantInterfere(long idx/*[in]*/);
  HRESULT         __fastcall set_TxWantInterfere(long idx/*[in]*/, double Value/*[in]*/);
  HRESULT         __fastcall get_TxUnwantInterfere(long idx/*[in]*/, double* Value/*[out,retval]*/);
  double          __fastcall get_TxUnwantInterfere(long idx/*[in]*/);
  HRESULT         __fastcall set_TxUnwantInterfere(long idx/*[in]*/, double Value/*[in]*/);
  HRESULT         __fastcall SortByWantInterfere(void);
  HRESULT         __fastcall SortByUnwantInterfere(void);
  HRESULT         __fastcall get_TxWantedKind(long idx/*[in]*/, signed_char* Value/*[out,retval]*/);
  signed_char     __fastcall get_TxWantedKind(long idx/*[in]*/);
  HRESULT         __fastcall set_TxWantedKind(long idx/*[in]*/, signed_char Value/*[in]*/);
  HRESULT         __fastcall get_TxUnwantedKind(long idx/*[in]*/, signed_char* Value/*[out,retval]*/);
  signed_char     __fastcall get_TxUnwantedKind(long idx/*[in]*/);
  HRESULT         __fastcall set_TxUnwantedKind(long idx/*[in]*/, signed_char Value/*[in]*/);
  HRESULT         __fastcall get_TxDistance(long idx/*[in]*/, double* Value/*[out,retval]*/);
  double          __fastcall get_TxDistance(long idx/*[in]*/);
  HRESULT         __fastcall set_TxDistance(long idx/*[in]*/, double Value/*[in]*/);
  HRESULT         __fastcall get_TxAzimuth(long idx/*[in]*/, double* Value/*[out,retval]*/);
  double          __fastcall get_TxAzimuth(long idx/*[in]*/);
  HRESULT         __fastcall set_TxAzimuth(long idx/*[in]*/, double Value/*[in]*/);
  HRESULT         __fastcall get_TxZoneOverlapping(long idx/*[in]*/, double* Value/*[out,retval]*/);
  double          __fastcall get_TxZoneOverlapping(long idx/*[in]*/);
  HRESULT         __fastcall set_TxZoneOverlapping(long idx/*[in]*/, double Value/*[in]*/);
  HRESULT         __fastcall get_TxShowOnMap(long idx/*[in]*/, VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TxShowOnMap(long idx/*[in]*/);
  HRESULT         __fastcall set_TxShowOnMap(long idx/*[in]*/, VARIANT_BOOL Value/*[in]*/);

  __property   long            Size = {read = get_Size};
};
typedef TCOMILISBCTxListT<ILISBCTxList> TCOMILISBCTxList;

typedef TComInterface<ILisBcDigAllot>  TCOMILisBcDigAllot;

// *********************************************************************//
// SmartIntf: TCOMILisBcObjectServerVersion
// Interface: ILisBcObjectServerVersion
// *********************************************************************//
template <class T /* ILisBcObjectServerVersion */ >
class TCOMILisBcObjectServerVersionT : public TComInterface<ILisBcObjectServerVersion>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMILisBcObjectServerVersionT() {}
  TCOMILisBcObjectServerVersionT(ILisBcObjectServerVersion *intf, bool addRef = false) : TComInterface<ILisBcObjectServerVersion>(intf, addRef) {}
  TCOMILisBcObjectServerVersionT(const TCOMILisBcObjectServerVersionT& src) : TComInterface<ILisBcObjectServerVersion>(src) {}
  TCOMILisBcObjectServerVersionT& operator=(const TCOMILisBcObjectServerVersionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall GetVersion(double* Value/*[out]*/);

};
typedef TCOMILisBcObjectServerVersionT<ILisBcObjectServerVersion> TCOMILisBcObjectServerVersion;

typedef TComInterface<ILisBcLfMf>  TCOMILisBcLfMf;

// *********************************************************************//
// DispIntf:  ILisBcLfMf
// Flags:     (320) Dual OleAutomation
// GUID:      {3B6F24B4-2EC9-41EF-B8CA-913F2AB3B9DC}
// *********************************************************************//
template<class T>
class ILisBcLfMfDispT : public TAutoDriver<ILisBcLfMf>
{
public:
  ILisBcLfMfDispT(){}

  ILisBcLfMfDispT(ILisBcLfMf *pintf)
  {
    TAutoDriver<ILisBcLfMf>::Bind(pintf, false);
  }

  ILisBcLfMfDispT(ILisBcLfMfPtr pintf)
  {
    TAutoDriver<ILisBcLfMf>::Bind(pintf, true);
  }

  ILisBcLfMfDispT& operator=(ILisBcLfMf *pintf)
  {
    TAutoDriver<ILisBcLfMf>::Bind(pintf, false);
    return *this;
  }

  ILisBcLfMfDispT& operator=(ILisBcLfMfPtr pintf)
  {
    TAutoDriver<ILisBcLfMf>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_lfmf_system(long* Value/*[out,retval]*/);
  long            __fastcall get_lfmf_system(void);
  HRESULT         __fastcall set_lfmf_system(long Value/*[in]*/);
  HRESULT         __fastcall get_lfmf_bw(double* Value/*[out,retval]*/);
  double          __fastcall get_lfmf_bw(void);
  HRESULT         __fastcall set_lfmf_bw(double Value/*[in]*/);
  HRESULT         __fastcall get_day_op(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_day_op(void);
  HRESULT         __fastcall set_day_op(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_night_op(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_night_op(void);
  HRESULT         __fastcall set_night_op(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_is_day(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_is_day(void);
  HRESULT         __fastcall set_is_day(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_gnd_cond(double* Value/*[out,retval]*/);
  double          __fastcall get_gnd_cond(void);
  HRESULT         __fastcall set_gnd_cond(double Value/*[in]*/);
  HRESULT         __fastcall get_adj_ratio(double* Value/*[out,retval]*/);
  double          __fastcall get_adj_ratio(void);
  HRESULT         __fastcall set_adj_ratio(double Value/*[in]*/);
  HRESULT         __fastcall get_ant_type(unsigned_char* Value/*[out,retval]*/);
  unsigned_char   __fastcall get_ant_type(void);
  HRESULT         __fastcall set_ant_type(unsigned_char Value/*[in]*/);
  HRESULT         __fastcall get_noise_zone(long* Value/*[out,retval]*/);
  long            __fastcall get_noise_zone(void);
  HRESULT         __fastcall set_noise_zone(long Value/*[in]*/);
  HRESULT         __fastcall get_mod_type(long* Value/*[out,retval]*/);
  long            __fastcall get_mod_type(void);
  HRESULT         __fastcall set_mod_type(long Value/*[in]*/);
  HRESULT         __fastcall get_prot_levl(long* Value/*[out,retval]*/);
  long            __fastcall get_prot_levl(void);
  HRESULT         __fastcall set_prot_levl(long Value/*[in]*/);

  __property   long            lfmf_system = {read = get_lfmf_system, write = set_lfmf_system};
  __property   double          lfmf_bw = {read = get_lfmf_bw, write = set_lfmf_bw};
  __property   VARIANT_BOOL    day_op = {read = get_day_op, write = set_day_op};
  __property   VARIANT_BOOL    night_op = {read = get_night_op, write = set_night_op};
  __property   VARIANT_BOOL    is_day = {read = get_is_day, write = set_is_day};
  __property   double          gnd_cond = {read = get_gnd_cond, write = set_gnd_cond};
  __property   double          adj_ratio = {read = get_adj_ratio, write = set_adj_ratio};
  __property   unsigned_char   ant_type = {read = get_ant_type, write = set_ant_type};
  __property   long            noise_zone = {read = get_noise_zone, write = set_noise_zone};
  __property   long            mod_type = {read = get_mod_type, write = set_mod_type};
  __property   long            prot_levl = {read = get_prot_levl, write = set_prot_levl};
};
typedef ILisBcLfMfDispT<ILisBcLfMf> ILisBcLfMfDisp;

typedef TComInterface<ILisBcFxm>  TCOMILisBcFxm;

// *********************************************************************//
// DispIntf:  ILisBcFxm
// Flags:     (320) Dual OleAutomation
// GUID:      {13F9E9D5-1200-4642-BB39-0ED44188C686}
// *********************************************************************//
template<class T>
class ILisBcFxmDispT : public TAutoDriver<ILisBcFxm>
{
public:
  ILisBcFxmDispT(){}

  ILisBcFxmDispT(ILisBcFxm *pintf)
  {
    TAutoDriver<ILisBcFxm>::Bind(pintf, false);
  }

  ILisBcFxmDispT(ILisBcFxmPtr pintf)
  {
    TAutoDriver<ILisBcFxm>::Bind(pintf, true);
  }

  ILisBcFxmDispT& operator=(ILisBcFxm *pintf)
  {
    TAutoDriver<ILisBcFxm>::Bind(pintf, false);
    return *this;
  }

  ILisBcFxmDispT& operator=(ILisBcFxmPtr pintf)
  {
    TAutoDriver<ILisBcFxm>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_fxm_bandwidth(double* Value/*[out,retval]*/);
  double          __fastcall get_fxm_bandwidth(void);
  HRESULT         __fastcall set_fxm_bandwidth(double Value/*[in]*/);
  HRESULT         __fastcall get_fxm_system(unsigned_long* Value/*[out,retval]*/);
  unsigned_long   __fastcall get_fxm_system(void);
  HRESULT         __fastcall set_fxm_system(unsigned_long Value/*[in]*/);

  __property   double          fxm_bandwidth = {read = get_fxm_bandwidth, write = set_fxm_bandwidth};
  __property   unsigned_long   fxm_system = {read = get_fxm_system, write = set_fxm_system};
};
typedef ILisBcFxmDispT<ILisBcFxm> ILisBcFxmDisp;

typedef TComInterface<ILisAssocAllotId>  TCOMILisAssocAllotId;

typedef TComInterface<ILisBcDvbt2>  TCOMILisBcDvbt2;

// *********************************************************************//
// DispIntf:  ILisBcDvbt2
// Flags:     (320) Dual OleAutomation
// GUID:      {30008C4B-A850-4CB4-84AD-D8A6AE555C5F}
// *********************************************************************//
template<class T>
class ILisBcDvbt2DispT : public TAutoDriver<ILisBcDvbt2>
{
public:
  ILisBcDvbt2DispT(){}

  ILisBcDvbt2DispT(ILisBcDvbt2 *pintf)
  {
    TAutoDriver<ILisBcDvbt2>::Bind(pintf, false);
  }

  ILisBcDvbt2DispT(ILisBcDvbt2Ptr pintf)
  {
    TAutoDriver<ILisBcDvbt2>::Bind(pintf, true);
  }

  ILisBcDvbt2DispT& operator=(ILisBcDvbt2 *pintf)
  {
    TAutoDriver<ILisBcDvbt2>::Bind(pintf, false);
    return *this;
  }

  ILisBcDvbt2DispT& operator=(ILisBcDvbt2Ptr pintf)
  {
    TAutoDriver<ILisBcDvbt2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_IsDvbt2(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsDvbt2(void);
  HRESULT         __fastcall set_IsDvbt2(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_PilotPattern(unsigned_long* Value/*[out,retval]*/);
  unsigned_long   __fastcall get_PilotPattern(void);
  HRESULT         __fastcall set_PilotPattern(unsigned_long Value/*[in]*/);
  HRESULT         __fastcall get_Diversity(unsigned_long* Value/*[out,retval]*/);
  unsigned_long   __fastcall get_Diversity(void);
  HRESULT         __fastcall set_Diversity(unsigned_long Value/*[in]*/);
  HRESULT         __fastcall get_RotatedConstellations(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RotatedConstellations(void);
  HRESULT         __fastcall set_RotatedConstellations(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ModeOfExtentions(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ModeOfExtentions(void);
  HRESULT         __fastcall set_ModeOfExtentions(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Modulation(Lisbctxserver_tlb::TModulation* Value/*[out,retval]*/);
  Lisbctxserver_tlb::TModulation __fastcall get_Modulation(void);
  HRESULT         __fastcall set_Modulation(Lisbctxserver_tlb::TModulation Value/*[in]*/);
  HRESULT         __fastcall get_CodeRate(Lisbctxserver_tlb::TCodeRate* Value/*[out,retval]*/);
  Lisbctxserver_tlb::TCodeRate __fastcall get_CodeRate(void);
  HRESULT         __fastcall set_CodeRate(Lisbctxserver_tlb::TCodeRate Value/*[in]*/);
  HRESULT         __fastcall get_FftSize(Lisbctxserver_tlb::TFftSize* Value/*[out,retval]*/);
  Lisbctxserver_tlb::TFftSize __fastcall get_FftSize(void);
  HRESULT         __fastcall set_FftSize(Lisbctxserver_tlb::TFftSize Value/*[in]*/);
  HRESULT         __fastcall get_GuardInterval(Lisbctxserver_tlb::TGuardInterval2* Value/*[out,retval]*/);
  Lisbctxserver_tlb::TGuardInterval2 __fastcall get_GuardInterval(void);
  HRESULT         __fastcall set_GuardInterval(Lisbctxserver_tlb::TGuardInterval2 Value/*[in]*/);

  __property   VARIANT_BOOL    IsDvbt2 = {read = get_IsDvbt2, write = set_IsDvbt2};
  __property   unsigned_long   PilotPattern = {read = get_PilotPattern, write = set_PilotPattern};
  __property   unsigned_long   Diversity = {read = get_Diversity, write = set_Diversity};
  __property   VARIANT_BOOL    RotatedConstellations = {read = get_RotatedConstellations, write = set_RotatedConstellations};
  __property   VARIANT_BOOL    ModeOfExtentions = {read = get_ModeOfExtentions, write = set_ModeOfExtentions};
  __property   Lisbctxserver_tlb::TModulation Modulation = {read = get_Modulation, write = set_Modulation};
  __property   Lisbctxserver_tlb::TCodeRate CodeRate = {read = get_CodeRate, write = set_CodeRate};
  __property   Lisbctxserver_tlb::TFftSize FftSize = {read = get_FftSize, write = set_FftSize};
  __property   Lisbctxserver_tlb::TGuardInterval2 GuardInterval = {read = get_GuardInterval, write = set_GuardInterval};
};
typedef ILisBcDvbt2DispT<ILisBcDvbt2> ILisBcDvbt2Disp;

// *********************************************************************//
// SmartIntf: TCOMILISBCTx
// Interface: ILISBCTx
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_id(long* Value/*[out,retval]*/)
{
  return (*this)->get_id(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_id(void)
{
  long Value;
  OLECHECK(this->get_id((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_longitude(double* Value/*[out,retval]*/)
{
  return (*this)->get_longitude(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_longitude(void)
{
  double Value;
  OLECHECK(this->get_longitude((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_longitude(double Value/*[in]*/)
{
  return (*this)->set_longitude(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_latitude(double* Value/*[out,retval]*/)
{
  return (*this)->get_latitude(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_latitude(void)
{
  double Value;
  OLECHECK(this->get_latitude((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_latitude(double Value/*[in]*/)
{
  return (*this)->set_latitude(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_typesystem(Lisbctxserver_tlb::TBCTvSystems* Value/*[out,retval]*/)
{
  return (*this)->get_typesystem(Value);
}

template <class T> Lisbctxserver_tlb::TBCTvSystems __fastcall
TCOMILISBCTxT<T>::get_typesystem(void)
{
  Lisbctxserver_tlb::TBCTvSystems Value;
  OLECHECK(this->get_typesystem((Lisbctxserver_tlb::TBCTvSystems*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_typesystem(Lisbctxserver_tlb::TBCTvSystems Value/*[in]*/)
{
  return (*this)->set_typesystem(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_video_carrier(double* Value/*[out,retval]*/)
{
  return (*this)->get_video_carrier(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_video_carrier(void)
{
  double Value;
  OLECHECK(this->get_video_carrier((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_video_carrier(double Value/*[in]*/)
{
  return (*this)->set_video_carrier(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_video_offset_line(long* Value/*[out,retval]*/)
{
  return (*this)->get_video_offset_line(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_video_offset_line(void)
{
  long Value;
  OLECHECK(this->get_video_offset_line((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_video_offset_line(long Value/*[in]*/)
{
  return (*this)->set_video_offset_line(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_video_offset_herz(long* Value/*[out,retval]*/)
{
  return (*this)->get_video_offset_herz(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_video_offset_herz(void)
{
  long Value;
  OLECHECK(this->get_video_offset_herz((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_video_offset_herz(long Value/*[in]*/)
{
  return (*this)->set_video_offset_herz(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_systemcolor(Lisbctxserver_tlb::TBCTvStandards* Value/*[out,retval]*/)
{
  return (*this)->get_systemcolor(Value);
}

template <class T> Lisbctxserver_tlb::TBCTvStandards __fastcall
TCOMILISBCTxT<T>::get_systemcolor(void)
{
  Lisbctxserver_tlb::TBCTvStandards Value;
  OLECHECK(this->get_systemcolor((Lisbctxserver_tlb::TBCTvStandards*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_systemcolor(Lisbctxserver_tlb::TBCTvStandards Value/*[in]*/)
{
  return (*this)->set_systemcolor(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_power_video(double* Value/*[out,retval]*/)
{
  return (*this)->get_power_video(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_power_video(void)
{
  double Value;
  OLECHECK(this->get_power_video((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_power_video(double Value/*[in]*/)
{
  return (*this)->set_power_video(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_epr_video_max(double* Value/*[out,retval]*/)
{
  return (*this)->get_epr_video_max(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_epr_video_max(void)
{
  double Value;
  OLECHECK(this->get_epr_video_max((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_epr_video_max(double Value/*[in]*/)
{
  return (*this)->set_epr_video_max(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_epr_video_hor(double* Value/*[out,retval]*/)
{
  return (*this)->get_epr_video_hor(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_epr_video_hor(void)
{
  double Value;
  OLECHECK(this->get_epr_video_hor((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_epr_video_hor(double Value/*[in]*/)
{
  return (*this)->set_epr_video_hor(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_epr_video_vert(double* Value/*[out,retval]*/)
{
  return (*this)->get_epr_video_vert(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_epr_video_vert(void)
{
  double Value;
  OLECHECK(this->get_epr_video_vert((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_epr_video_vert(double Value/*[in]*/)
{
  return (*this)->set_epr_video_vert(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_effectpowerhor(long idx/*[in]*/, double* Value/*[out,retval]*/)
{
  return (*this)->get_effectpowerhor(idx, Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_effectpowerhor(long idx/*[in]*/)
{
  double Value;
  OLECHECK(this->get_effectpowerhor(, (double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_effectpowerhor(long idx/*[in]*/, double Value/*[in]*/)
{
  return (*this)->set_effectpowerhor(idx, Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_effectpowervert(long idx/*[in]*/, double* Value/*[out,retval]*/)
{
  return (*this)->get_effectpowervert(idx, Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_effectpowervert(long idx/*[in]*/)
{
  double Value;
  OLECHECK(this->get_effectpowervert(, (double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_effectpowervert(long idx/*[in]*/, double Value/*[in]*/)
{
  return (*this)->set_effectpowervert(idx, Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_identifiersfn(long* Value/*[out,retval]*/)
{
  return (*this)->get_identifiersfn(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_identifiersfn(void)
{
  long Value;
  OLECHECK(this->get_identifiersfn((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_identifiersfn(long Value/*[in]*/)
{
  return (*this)->set_identifiersfn(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_relativetimingsfn(long* Value/*[out,retval]*/)
{
  return (*this)->get_relativetimingsfn(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_relativetimingsfn(void)
{
  long Value;
  OLECHECK(this->get_relativetimingsfn((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_relativetimingsfn(long Value/*[in]*/)
{
  return (*this)->set_relativetimingsfn(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_blockcentrefreq(double* Value/*[out,retval]*/)
{
  return (*this)->get_blockcentrefreq(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_blockcentrefreq(void)
{
  double Value;
  OLECHECK(this->get_blockcentrefreq((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_blockcentrefreq(double Value/*[in]*/)
{
  return (*this)->set_blockcentrefreq(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_sound_carrier_primary(double* Value/*[out,retval]*/)
{
  return (*this)->get_sound_carrier_primary(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_sound_carrier_primary(void)
{
  double Value;
  OLECHECK(this->get_sound_carrier_primary((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_sound_carrier_primary(double Value/*[in]*/)
{
  return (*this)->set_sound_carrier_primary(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_sound_offset_primary(long* Value/*[out,retval]*/)
{
  return (*this)->get_sound_offset_primary(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_sound_offset_primary(void)
{
  long Value;
  OLECHECK(this->get_sound_offset_primary((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_sound_offset_primary(long Value/*[in]*/)
{
  return (*this)->set_sound_offset_primary(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_power_sound_primary(double* Value/*[out,retval]*/)
{
  return (*this)->get_power_sound_primary(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_power_sound_primary(void)
{
  double Value;
  OLECHECK(this->get_power_sound_primary((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_power_sound_primary(double Value/*[in]*/)
{
  return (*this)->set_power_sound_primary(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_epr_sound_max_primary(double* Value/*[out,retval]*/)
{
  return (*this)->get_epr_sound_max_primary(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_epr_sound_max_primary(void)
{
  double Value;
  OLECHECK(this->get_epr_sound_max_primary((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_epr_sound_max_primary(double Value/*[in]*/)
{
  return (*this)->set_epr_sound_max_primary(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_epr_sound_hor_primary(double* Value/*[out,retval]*/)
{
  return (*this)->get_epr_sound_hor_primary(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_epr_sound_hor_primary(void)
{
  double Value;
  OLECHECK(this->get_epr_sound_hor_primary((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_epr_sound_hor_primary(double Value/*[in]*/)
{
  return (*this)->set_epr_sound_hor_primary(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_epr_sound_vert_primary(double* Value/*[out,retval]*/)
{
  return (*this)->get_epr_sound_vert_primary(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_epr_sound_vert_primary(void)
{
  double Value;
  OLECHECK(this->get_epr_sound_vert_primary((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_epr_sound_vert_primary(double Value/*[in]*/)
{
  return (*this)->set_epr_sound_vert_primary(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_v_sound_ratio_primary(double* Value/*[out,retval]*/)
{
  return (*this)->get_v_sound_ratio_primary(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_v_sound_ratio_primary(void)
{
  double Value;
  OLECHECK(this->get_v_sound_ratio_primary((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_v_sound_ratio_primary(double Value/*[in]*/)
{
  return (*this)->set_v_sound_ratio_primary(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_monostereo_primary(long* Value/*[out,retval]*/)
{
  return (*this)->get_monostereo_primary(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_monostereo_primary(void)
{
  long Value;
  OLECHECK(this->get_monostereo_primary((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_monostereo_primary(long Value/*[in]*/)
{
  return (*this)->set_monostereo_primary(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_sound_carrier_second(double* Value/*[out,retval]*/)
{
  return (*this)->get_sound_carrier_second(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_sound_carrier_second(void)
{
  double Value;
  OLECHECK(this->get_sound_carrier_second((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_sound_carrier_second(double Value/*[in]*/)
{
  return (*this)->set_sound_carrier_second(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_sound_offset_second(long* Value/*[out,retval]*/)
{
  return (*this)->get_sound_offset_second(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_sound_offset_second(void)
{
  long Value;
  OLECHECK(this->get_sound_offset_second((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_sound_offset_second(long Value/*[in]*/)
{
  return (*this)->set_sound_offset_second(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_power_sound_second(double* Value/*[out,retval]*/)
{
  return (*this)->get_power_sound_second(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_power_sound_second(void)
{
  double Value;
  OLECHECK(this->get_power_sound_second((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_power_sound_second(double Value/*[in]*/)
{
  return (*this)->set_power_sound_second(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_epr_sound_max_second(double* Value/*[out,retval]*/)
{
  return (*this)->get_epr_sound_max_second(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_epr_sound_max_second(void)
{
  double Value;
  OLECHECK(this->get_epr_sound_max_second((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_epr_sound_max_second(double Value/*[in]*/)
{
  return (*this)->set_epr_sound_max_second(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_epr_sound_hor_second(double* Value/*[out,retval]*/)
{
  return (*this)->get_epr_sound_hor_second(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_epr_sound_hor_second(void)
{
  double Value;
  OLECHECK(this->get_epr_sound_hor_second((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_epr_sound_hor_second(double Value/*[in]*/)
{
  return (*this)->set_epr_sound_hor_second(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_epr_sound_vert_second(double* Value/*[out,retval]*/)
{
  return (*this)->get_epr_sound_vert_second(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_epr_sound_vert_second(void)
{
  double Value;
  OLECHECK(this->get_epr_sound_vert_second((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_epr_sound_vert_second(double Value/*[in]*/)
{
  return (*this)->set_epr_sound_vert_second(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_v_sound_ratio_second(double* Value/*[out,retval]*/)
{
  return (*this)->get_v_sound_ratio_second(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_v_sound_ratio_second(void)
{
  double Value;
  OLECHECK(this->get_v_sound_ratio_second((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_v_sound_ratio_second(double Value/*[in]*/)
{
  return (*this)->set_v_sound_ratio_second(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_effectheight(long idx/*[in]*/, double* Value/*[out,retval]*/)
{
  return (*this)->get_effectheight(idx, Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_effectheight(long idx/*[in]*/)
{
  double Value;
  OLECHECK(this->get_effectheight(, (double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_effectheight(long idx/*[in]*/, double Value/*[in]*/)
{
  return (*this)->set_effectheight(idx, Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_height_eft_max(long* Value/*[out,retval]*/)
{
  return (*this)->get_height_eft_max(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_height_eft_max(void)
{
  long Value;
  OLECHECK(this->get_height_eft_max((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_height_eft_max(long Value/*[in]*/)
{
  return (*this)->set_height_eft_max(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_polarization(Lisbctxserver_tlb::TBCPolarization* Value/*[out,retval]*/)
{
  return (*this)->get_polarization(Value);
}

template <class T> Lisbctxserver_tlb::TBCPolarization __fastcall
TCOMILISBCTxT<T>::get_polarization(void)
{
  Lisbctxserver_tlb::TBCPolarization Value;
  OLECHECK(this->get_polarization((Lisbctxserver_tlb::TBCPolarization*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_polarization(Lisbctxserver_tlb::TBCPolarization Value/*[in]*/)
{
  return (*this)->set_polarization(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_direction(Lisbctxserver_tlb::TBCDirection* Value/*[out,retval]*/)
{
  return (*this)->get_direction(Value);
}

template <class T> Lisbctxserver_tlb::TBCDirection __fastcall
TCOMILISBCTxT<T>::get_direction(void)
{
  Lisbctxserver_tlb::TBCDirection Value;
  OLECHECK(this->get_direction((Lisbctxserver_tlb::TBCDirection*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_direction(Lisbctxserver_tlb::TBCDirection Value/*[in]*/)
{
  return (*this)->set_direction(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_fiderloss(double* Value/*[out,retval]*/)
{
  return (*this)->get_fiderloss(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_fiderloss(void)
{
  double Value;
  OLECHECK(this->get_fiderloss((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_fiderloss(double Value/*[in]*/)
{
  return (*this)->set_fiderloss(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_fiderlenght(long* Value/*[out,retval]*/)
{
  return (*this)->get_fiderlenght(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_fiderlenght(void)
{
  long Value;
  OLECHECK(this->get_fiderlenght((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_fiderlenght(long Value/*[in]*/)
{
  return (*this)->set_fiderlenght(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_angleelevation_hor(long* Value/*[out,retval]*/)
{
  return (*this)->get_angleelevation_hor(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_angleelevation_hor(void)
{
  long Value;
  OLECHECK(this->get_angleelevation_hor((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_angleelevation_hor(long Value/*[in]*/)
{
  return (*this)->set_angleelevation_hor(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_angleelevation_vert(long* Value/*[out,retval]*/)
{
  return (*this)->get_angleelevation_vert(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_angleelevation_vert(void)
{
  long Value;
  OLECHECK(this->get_angleelevation_vert((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_angleelevation_vert(long Value/*[in]*/)
{
  return (*this)->set_angleelevation_vert(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_antennagain(double* Value/*[out,retval]*/)
{
  return (*this)->get_antennagain(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_antennagain(void)
{
  double Value;
  OLECHECK(this->get_antennagain((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_antennagain(double Value/*[in]*/)
{
  return (*this)->set_antennagain(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_effectantennagains(long idx/*[in]*/, double* Value/*[out,retval]*/)
{
  return (*this)->get_effectantennagains(idx, Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_effectantennagains(long idx/*[in]*/)
{
  double Value;
  OLECHECK(this->get_effectantennagains(, (double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_effectantennagains(long idx/*[in]*/, double Value/*[in]*/)
{
  return (*this)->set_effectantennagains(idx, Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_testpointsis(long* Value/*[out,retval]*/)
{
  return (*this)->get_testpointsis(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_testpointsis(void)
{
  long Value;
  OLECHECK(this->get_testpointsis((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_testpointsis(long Value/*[in]*/)
{
  return (*this)->set_testpointsis(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::init(long pdatabase/*[in]*/, long load_id/*[in]*/)
{
  return (*this)->init(pdatabase, load_id);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::save(void)
{
  return (*this)->save();
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_heightantenna(long* Value/*[out,retval]*/)
{
  return (*this)->get_heightantenna(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_heightantenna(void)
{
  long Value;
  OLECHECK(this->get_heightantenna((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_heightantenna(long Value/*[in]*/)
{
  return (*this)->set_heightantenna(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_data_changes(long* Value/*[out,retval]*/)
{
  return (*this)->get_data_changes(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_data_changes(void)
{
  long Value;
  OLECHECK(this->get_data_changes((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_systemcast(Lisbctxserver_tlb::TBCTxType* Value/*[out,retval]*/)
{
  return (*this)->get_systemcast(Value);
}

template <class T> Lisbctxserver_tlb::TBCTxType __fastcall
TCOMILISBCTxT<T>::get_systemcast(void)
{
  Lisbctxserver_tlb::TBCTxType Value;
  OLECHECK(this->get_systemcast((Lisbctxserver_tlb::TBCTxType*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_systemcast(Lisbctxserver_tlb::TBCTxType Value/*[in]*/)
{
  return (*this)->set_systemcast(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_analogtelesystem(long* Value/*[out,retval]*/)
{
  return (*this)->get_analogtelesystem(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_analogtelesystem(void)
{
  long Value;
  OLECHECK(this->get_analogtelesystem((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_analogtelesystem(long Value/*[in]*/)
{
  return (*this)->set_analogtelesystem(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_typeoffset(Lisbctxserver_tlb::TBCOffsetType* Value/*[out,retval]*/)
{
  return (*this)->get_typeoffset(Value);
}

template <class T> Lisbctxserver_tlb::TBCOffsetType __fastcall
TCOMILISBCTxT<T>::get_typeoffset(void)
{
  Lisbctxserver_tlb::TBCOffsetType Value;
  OLECHECK(this->get_typeoffset((Lisbctxserver_tlb::TBCOffsetType*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_typeoffset(Lisbctxserver_tlb::TBCOffsetType Value/*[in]*/)
{
  return (*this)->set_typeoffset(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_channel_id(long* Value/*[out,retval]*/)
{
  return (*this)->get_channel_id(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_channel_id(void)
{
  long Value;
  OLECHECK(this->get_channel_id((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_channel_id(long Value/*[in]*/)
{
  return (*this)->set_channel_id(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_h_eff(long azimuth/*[in]*/, long* height/*[out,retval]*/)
{
  return (*this)->get_h_eff(azimuth, height);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_h_eff(long azimuth/*[in]*/)
{
  long height;
  OLECHECK(this->get_h_eff(, (long*)&height));
  return height;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_erp(long azimuth/*[in]*/, double* power/*[out,retval]*/)
{
  return (*this)->get_erp(azimuth, power);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_erp(long azimuth/*[in]*/)
{
  double power;
  OLECHECK(this->get_erp(, (double*)&power));
  return power;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_freq_carrier(double* freq/*[out,retval]*/)
{
  return (*this)->get_freq_carrier(freq);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_freq_carrier(void)
{
  double freq;
  OLECHECK(this->get_freq_carrier((double*)&freq));
  return freq;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_sort_key_in(double* Value/*[out,retval]*/)
{
  return (*this)->get_sort_key_in(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_sort_key_in(void)
{
  double Value;
  OLECHECK(this->get_sort_key_in((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_sort_key_in(double Value/*[in]*/)
{
  return (*this)->set_sort_key_in(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_sort_key_out(double* Value/*[out,retval]*/)
{
  return (*this)->get_sort_key_out(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_sort_key_out(void)
{
  double Value;
  OLECHECK(this->get_sort_key_out((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_sort_key_out(double Value/*[in]*/)
{
  return (*this)->set_sort_key_out(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_dvb_system(Lisbctxserver_tlb::TBCDVBSystem* Value/*[out,retval]*/)
{
  return (*this)->get_dvb_system(Value);
}

template <class T> Lisbctxserver_tlb::TBCDVBSystem __fastcall
TCOMILISBCTxT<T>::get_dvb_system(void)
{
  Lisbctxserver_tlb::TBCDVBSystem Value;
  OLECHECK(this->get_dvb_system((Lisbctxserver_tlb::TBCDVBSystem*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_dvb_system(Lisbctxserver_tlb::TBCDVBSystem Value/*[in]*/)
{
  return (*this)->set_dvb_system(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_fm_system(Lisbctxserver_tlb::TBCFMSystem* Value/*[out,retval]*/)
{
  return (*this)->get_fm_system(Value);
}

template <class T> Lisbctxserver_tlb::TBCFMSystem __fastcall
TCOMILISBCTxT<T>::get_fm_system(void)
{
  Lisbctxserver_tlb::TBCFMSystem Value;
  OLECHECK(this->get_fm_system((Lisbctxserver_tlb::TBCFMSystem*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_fm_system(Lisbctxserver_tlb::TBCFMSystem Value/*[in]*/)
{
  return (*this)->set_fm_system(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_gaussianchannel(double* Value/*[out,retval]*/)
{
  return (*this)->get_gaussianchannel(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_gaussianchannel(void)
{
  double Value;
  OLECHECK(this->get_gaussianchannel((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_gaussianchannel(double Value/*[in]*/)
{
  return (*this)->set_gaussianchannel(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_riceanchannel(double* Value/*[out,retval]*/)
{
  return (*this)->get_riceanchannel(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_riceanchannel(void)
{
  double Value;
  OLECHECK(this->get_riceanchannel((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_riceanchannel(double Value/*[in]*/)
{
  return (*this)->set_riceanchannel(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_rayleighchannel(double* Value/*[out,retval]*/)
{
  return (*this)->get_rayleighchannel(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_rayleighchannel(void)
{
  double Value;
  OLECHECK(this->get_rayleighchannel((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_rayleighchannel(double Value/*[in]*/)
{
  return (*this)->set_rayleighchannel(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::saveToString(BSTR* Dest/*[out,retval]*/)
{
  return (*this)->saveToString(Dest);
}

template <class T> BSTR __fastcall
TCOMILISBCTxT<T>::saveToString(void)
{
  BSTR Dest = 0;
  OLECHECK(this->saveToString((BSTR*)&Dest));
  return Dest;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::loadFromString(BSTR Source/*[in]*/)
{
  return (*this)->loadFromString(Source);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_stand_id(long* Value/*[out,retval]*/)
{
  return (*this)->get_stand_id(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_stand_id(void)
{
  long Value;
  OLECHECK(this->get_stand_id((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_stand_id(long Value/*[in]*/)
{
  return (*this)->set_stand_id(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_acout_id(long* Value/*[out,retval]*/)
{
  return (*this)->get_acout_id(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_acout_id(void)
{
  long Value;
  OLECHECK(this->get_acout_id((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_acout_id(long Value/*[in]*/)
{
  return (*this)->set_acout_id(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_acin_id(long* Value/*[out,retval]*/)
{
  return (*this)->get_acin_id(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_acin_id(void)
{
  long Value;
  OLECHECK(this->get_acin_id((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_acin_id(long Value/*[in]*/)
{
  return (*this)->set_acin_id(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_adminid(long* Value/*[out,retval]*/)
{
  return (*this)->get_adminid(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_adminid(void)
{
  long Value;
  OLECHECK(this->get_adminid((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_adminid(long Value/*[in]*/)
{
  return (*this)->set_adminid(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_is_fetched(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_is_fetched(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_is_fetched(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_is_fetched(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMILISBCTxT<T>::get_is_fetched(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_is_fetched((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::loadFromQuery(long query/*[in]*/)
{
  return (*this)->loadFromQuery(query);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::invalidate(void)
{
  return (*this)->invalidate();
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_database(long* Value/*[out,retval]*/)
{
  return (*this)->get_database(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_database(void)
{
  long Value;
  OLECHECK(this->get_database((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_database(long Value/*[in]*/)
{
  return (*this)->set_database(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_adm_response(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_adm_response(Value);
}

template <class T> BSTR __fastcall
TCOMILISBCTxT<T>::get_adm_response(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_adm_response((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_adm_sited_in(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_adm_sited_in(Value);
}

template <class T> BSTR __fastcall
TCOMILISBCTxT<T>::get_adm_sited_in(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_adm_sited_in((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_status_code(long* Value/*[out,retval]*/)
{
  return (*this)->get_status_code(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_status_code(void)
{
  long Value;
  OLECHECK(this->get_status_code((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_station_name(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_station_name(Value);
}

template <class T> BSTR __fastcall
TCOMILISBCTxT<T>::get_station_name(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_station_name((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_site_height(long* Value/*[out,retval]*/)
{
  return (*this)->get_site_height(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_site_height(void)
{
  long Value;
  OLECHECK(this->get_site_height((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_channel(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_channel(Value);
}

template <class T> BSTR __fastcall
TCOMILISBCTxT<T>::get_channel(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_channel((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_date_of_last_change(DATE* Value/*[out,retval]*/)
{
  return (*this)->get_date_of_last_change(Value);
}

template <class T> DATE __fastcall
TCOMILISBCTxT<T>::get_date_of_last_change(void)
{
  DATE Value;
  OLECHECK(this->get_date_of_last_change((DATE*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_numregion(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_numregion(Value);
}

template <class T> BSTR __fastcall
TCOMILISBCTxT<T>::get_numregion(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_numregion((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_maxCoordDist(double* Value/*[out,retval]*/)
{
  return (*this)->get_maxCoordDist(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_maxCoordDist(void)
{
  double Value;
  OLECHECK(this->get_maxCoordDist((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_maxCoordDist(double Value/*[in]*/)
{
  return (*this)->set_maxCoordDist(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_station_name(BSTR Value/*[in]*/)
{
  return (*this)->set_station_name(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_channel_name(BSTR Value/*[in]*/)
{
  return (*this)->set_channel_name(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_rpc(Lisbctxserver_tlb::TBcRpc* Value/*[out,retval]*/)
{
  return (*this)->get_rpc(Value);
}

template <class T> Lisbctxserver_tlb::TBcRpc __fastcall
TCOMILISBCTxT<T>::get_rpc(void)
{
  Lisbctxserver_tlb::TBcRpc Value;
  OLECHECK(this->get_rpc((Lisbctxserver_tlb::TBcRpc*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_rpc(Lisbctxserver_tlb::TBcRpc Value/*[in]*/)
{
  return (*this)->set_rpc(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_rxMode(Lisbctxserver_tlb::TBcRxMode* Value/*[out,retval]*/)
{
  return (*this)->get_rxMode(Value);
}

template <class T> Lisbctxserver_tlb::TBcRxMode __fastcall
TCOMILISBCTxT<T>::get_rxMode(void)
{
  Lisbctxserver_tlb::TBcRxMode Value;
  OLECHECK(this->get_rxMode((Lisbctxserver_tlb::TBcRxMode*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_rxMode(Lisbctxserver_tlb::TBcRxMode Value/*[in]*/)
{
  return (*this)->set_rxMode(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_attribsDs(long* Value/*[out,retval]*/)
{
  return (*this)->get_attribsDs(Value);
}

template <class T> long __fastcall
TCOMILISBCTxT<T>::get_attribsDs(void)
{
  long Value;
  OLECHECK(this->get_attribsDs((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_coord(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_coord(Value);
}

template <class T> BSTR __fastcall
TCOMILISBCTxT<T>::get_coord(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_coord((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_coord(BSTR Value/*[in]*/)
{
  return (*this)->set_coord(Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::get_pol_isol(double* Value/*[out,retval]*/)
{
  return (*this)->get_pol_isol(Value);
}

template <class T> double __fastcall
TCOMILISBCTxT<T>::get_pol_isol(void)
{
  double Value;
  OLECHECK(this->get_pol_isol((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxT<T>::set_pol_isol(double Value/*[in]*/)
{
  return (*this)->set_pol_isol(Value);
}

// *********************************************************************//
// SmartIntf: TCOMILISBCTxList
// Interface: ILISBCTxList
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::AddTx(Lisbctxserver_tlb::ILISBCTx* Tx/*[in]*/, long* idx/*[out,retval]*/)
{
  return (*this)->AddTx(Tx, idx);
}

template <class T> long __fastcall
TCOMILISBCTxListT<T>::AddTx(Lisbctxserver_tlb::ILISBCTx* Tx/*[in]*/)
{
  long idx;
  OLECHECK(this->AddTx(, (long*)&idx));
  return idx;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::RemoveTx(Lisbctxserver_tlb::ILISBCTx* Tx/*[in]*/)
{
  return (*this)->RemoveTx(Tx);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::RemoveId(long id/*[in]*/)
{
  return (*this)->RemoveId(id);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::get_Size(long* Value/*[out,retval]*/)
{
  return (*this)->get_Size(Value);
}

template <class T> long __fastcall
TCOMILISBCTxListT<T>::get_Size(void)
{
  long Value;
  OLECHECK(this->get_Size((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::get_TxId(long idx/*[in]*/, long* Value/*[out,retval]*/)
{
  return (*this)->get_TxId(idx, Value);
}

template <class T> long __fastcall
TCOMILISBCTxListT<T>::get_TxId(long idx/*[in]*/)
{
  long Value;
  OLECHECK(this->get_TxId(, (long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::get_Tx(long idx/*[in]*/, Lisbctxserver_tlb::ILISBCTx** Value/*[out,retval]*/)
{
  return (*this)->get_Tx(idx, Value);
}

template <class T> Lisbctxserver_tlb::ILISBCTx* __fastcall
TCOMILISBCTxListT<T>::get_Tx(long idx/*[in]*/)
{
  Lisbctxserver_tlb::ILISBCTx* Value;
  OLECHECK(this->get_Tx(, (Lisbctxserver_tlb::ILISBCTx**)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::get_TxUseInCalc(long idx/*[in]*/, VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_TxUseInCalc(idx, Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMILISBCTxListT<T>::get_TxUseInCalc(long idx/*[in]*/)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_TxUseInCalc(, (VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::set_TxUseInCalc(long idx/*[in]*/, VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_TxUseInCalc(idx, Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::get_TxWantInterfere(long idx/*[in]*/, double* Value/*[out,retval]*/)
{
  return (*this)->get_TxWantInterfere(idx, Value);
}

template <class T> double __fastcall
TCOMILISBCTxListT<T>::get_TxWantInterfere(long idx/*[in]*/)
{
  double Value;
  OLECHECK(this->get_TxWantInterfere(, (double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::set_TxWantInterfere(long idx/*[in]*/, double Value/*[in]*/)
{
  return (*this)->set_TxWantInterfere(idx, Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::get_TxUnwantInterfere(long idx/*[in]*/, double* Value/*[out,retval]*/)
{
  return (*this)->get_TxUnwantInterfere(idx, Value);
}

template <class T> double __fastcall
TCOMILISBCTxListT<T>::get_TxUnwantInterfere(long idx/*[in]*/)
{
  double Value;
  OLECHECK(this->get_TxUnwantInterfere(, (double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::set_TxUnwantInterfere(long idx/*[in]*/, double Value/*[in]*/)
{
  return (*this)->set_TxUnwantInterfere(idx, Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::SortByWantInterfere(void)
{
  return (*this)->SortByWantInterfere();
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::SortByUnwantInterfere(void)
{
  return (*this)->SortByUnwantInterfere();
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::get_TxWantedKind(long idx/*[in]*/, signed_char* Value/*[out,retval]*/)
{
  return (*this)->get_TxWantedKind(idx, Value);
}

template <class T> signed_char __fastcall
TCOMILISBCTxListT<T>::get_TxWantedKind(long idx/*[in]*/)
{
  signed_char Value;
  OLECHECK(this->get_TxWantedKind(, (signed_char*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::set_TxWantedKind(long idx/*[in]*/, signed_char Value/*[in]*/)
{
  return (*this)->set_TxWantedKind(idx, Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::get_TxUnwantedKind(long idx/*[in]*/, signed_char* Value/*[out,retval]*/)
{
  return (*this)->get_TxUnwantedKind(idx, Value);
}

template <class T> signed_char __fastcall
TCOMILISBCTxListT<T>::get_TxUnwantedKind(long idx/*[in]*/)
{
  signed_char Value;
  OLECHECK(this->get_TxUnwantedKind(, (signed_char*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::set_TxUnwantedKind(long idx/*[in]*/, signed_char Value/*[in]*/)
{
  return (*this)->set_TxUnwantedKind(idx, Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::get_TxDistance(long idx/*[in]*/, double* Value/*[out,retval]*/)
{
  return (*this)->get_TxDistance(idx, Value);
}

template <class T> double __fastcall
TCOMILISBCTxListT<T>::get_TxDistance(long idx/*[in]*/)
{
  double Value;
  OLECHECK(this->get_TxDistance(, (double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::set_TxDistance(long idx/*[in]*/, double Value/*[in]*/)
{
  return (*this)->set_TxDistance(idx, Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::get_TxAzimuth(long idx/*[in]*/, double* Value/*[out,retval]*/)
{
  return (*this)->get_TxAzimuth(idx, Value);
}

template <class T> double __fastcall
TCOMILISBCTxListT<T>::get_TxAzimuth(long idx/*[in]*/)
{
  double Value;
  OLECHECK(this->get_TxAzimuth(, (double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::set_TxAzimuth(long idx/*[in]*/, double Value/*[in]*/)
{
  return (*this)->set_TxAzimuth(idx, Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::get_TxZoneOverlapping(long idx/*[in]*/, double* Value/*[out,retval]*/)
{
  return (*this)->get_TxZoneOverlapping(idx, Value);
}

template <class T> double __fastcall
TCOMILISBCTxListT<T>::get_TxZoneOverlapping(long idx/*[in]*/)
{
  double Value;
  OLECHECK(this->get_TxZoneOverlapping(, (double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::set_TxZoneOverlapping(long idx/*[in]*/, double Value/*[in]*/)
{
  return (*this)->set_TxZoneOverlapping(idx, Value);
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::get_TxShowOnMap(long idx/*[in]*/, VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_TxShowOnMap(idx, Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMILISBCTxListT<T>::get_TxShowOnMap(long idx/*[in]*/)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_TxShowOnMap(, (VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMILISBCTxListT<T>::set_TxShowOnMap(long idx/*[in]*/, VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_TxShowOnMap(idx, Value);
}

// *********************************************************************//
// SmartIntf: TCOMILisBcObjectServerVersion
// Interface: ILisBcObjectServerVersion
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMILisBcObjectServerVersionT<T>::GetVersion(double* Value/*[out]*/)
{
  return (*this)->GetVersion(Value);
}

// *********************************************************************//
// DispIntf:  ILisBcLfMf
// Flags:     (320) Dual OleAutomation
// GUID:      {3B6F24B4-2EC9-41EF-B8CA-913F2AB3B9DC}
// *********************************************************************//
template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::get_lfmf_system(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lfmf_system"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ILisBcLfMfDispT<T>::get_lfmf_system(void)
{
  long Value;
  this->get_lfmf_system((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::set_lfmf_system(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("lfmf_system"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::get_lfmf_bw(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lfmf_bw"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ILisBcLfMfDispT<T>::get_lfmf_bw(void)
{
  double Value;
  this->get_lfmf_bw((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::set_lfmf_bw(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("lfmf_bw"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::get_day_op(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("day_op"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisBcLfMfDispT<T>::get_day_op(void)
{
  VARIANT_BOOL Value;
  this->get_day_op((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::set_day_op(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("day_op"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::get_night_op(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("night_op"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisBcLfMfDispT<T>::get_night_op(void)
{
  VARIANT_BOOL Value;
  this->get_night_op((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::set_night_op(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("night_op"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::get_is_day(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("is_day"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisBcLfMfDispT<T>::get_is_day(void)
{
  VARIANT_BOOL Value;
  this->get_is_day((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::set_is_day(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("is_day"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::get_gnd_cond(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("gnd_cond"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ILisBcLfMfDispT<T>::get_gnd_cond(void)
{
  double Value;
  this->get_gnd_cond((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::set_gnd_cond(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("gnd_cond"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::get_adj_ratio(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("adj_ratio"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ILisBcLfMfDispT<T>::get_adj_ratio(void)
{
  double Value;
  this->get_adj_ratio((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::set_adj_ratio(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("adj_ratio"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::get_ant_type(unsigned_char* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ant_type"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
ILisBcLfMfDispT<T>::get_ant_type(void)
{
  unsigned_char Value;
  this->get_ant_type((unsigned_char*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::set_ant_type(unsigned_char Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ant_type"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::get_noise_zone(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("noise_zone"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ILisBcLfMfDispT<T>::get_noise_zone(void)
{
  long Value;
  this->get_noise_zone((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::set_noise_zone(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("noise_zone"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::get_mod_type(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("mod_type"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ILisBcLfMfDispT<T>::get_mod_type(void)
{
  long Value;
  this->get_mod_type((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::set_mod_type(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("mod_type"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::get_prot_levl(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prot_levl"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ILisBcLfMfDispT<T>::get_prot_levl(void)
{
  long Value;
  this->get_prot_levl((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcLfMfDispT<T>::set_prot_levl(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("prot_levl"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ILisBcFxm
// Flags:     (320) Dual OleAutomation
// GUID:      {13F9E9D5-1200-4642-BB39-0ED44188C686}
// *********************************************************************//
template <class T> HRESULT __fastcall
ILisBcFxmDispT<T>::get_fxm_bandwidth(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fxm_bandwidth"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ILisBcFxmDispT<T>::get_fxm_bandwidth(void)
{
  double Value;
  this->get_fxm_bandwidth((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcFxmDispT<T>::set_fxm_bandwidth(double Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fxm_bandwidth"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisBcFxmDispT<T>::get_fxm_system(unsigned_long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fxm_system"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
ILisBcFxmDispT<T>::get_fxm_system(void)
{
  unsigned_long Value;
  this->get_fxm_system((unsigned_long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcFxmDispT<T>::set_fxm_system(unsigned_long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fxm_system"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ILisBcDvbt2
// Flags:     (320) Dual OleAutomation
// GUID:      {30008C4B-A850-4CB4-84AD-D8A6AE555C5F}
// *********************************************************************//
template <class T> HRESULT __fastcall
ILisBcDvbt2DispT<T>::get_IsDvbt2(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDvbt2"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisBcDvbt2DispT<T>::get_IsDvbt2(void)
{
  VARIANT_BOOL Value;
  this->get_IsDvbt2((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcDvbt2DispT<T>::set_IsDvbt2(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDvbt2"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisBcDvbt2DispT<T>::get_PilotPattern(unsigned_long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PilotPattern"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
ILisBcDvbt2DispT<T>::get_PilotPattern(void)
{
  unsigned_long Value;
  this->get_PilotPattern((unsigned_long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcDvbt2DispT<T>::set_PilotPattern(unsigned_long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PilotPattern"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisBcDvbt2DispT<T>::get_Diversity(unsigned_long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Diversity"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
ILisBcDvbt2DispT<T>::get_Diversity(void)
{
  unsigned_long Value;
  this->get_Diversity((unsigned_long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcDvbt2DispT<T>::set_Diversity(unsigned_long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Diversity"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisBcDvbt2DispT<T>::get_RotatedConstellations(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotatedConstellations"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisBcDvbt2DispT<T>::get_RotatedConstellations(void)
{
  VARIANT_BOOL Value;
  this->get_RotatedConstellations((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcDvbt2DispT<T>::set_RotatedConstellations(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotatedConstellations"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisBcDvbt2DispT<T>::get_ModeOfExtentions(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModeOfExtentions"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ILisBcDvbt2DispT<T>::get_ModeOfExtentions(void)
{
  VARIANT_BOOL Value;
  this->get_ModeOfExtentions((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcDvbt2DispT<T>::set_ModeOfExtentions(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModeOfExtentions"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisBcDvbt2DispT<T>::get_Modulation(Lisbctxserver_tlb::TModulation* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Modulation"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Lisbctxserver_tlb::TModulation __fastcall
ILisBcDvbt2DispT<T>::get_Modulation(void)
{
  Lisbctxserver_tlb::TModulation Value;
  this->get_Modulation((Lisbctxserver_tlb::TModulation*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcDvbt2DispT<T>::set_Modulation(Lisbctxserver_tlb::TModulation Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Modulation"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisBcDvbt2DispT<T>::get_CodeRate(Lisbctxserver_tlb::TCodeRate* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeRate"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Lisbctxserver_tlb::TCodeRate __fastcall
ILisBcDvbt2DispT<T>::get_CodeRate(void)
{
  Lisbctxserver_tlb::TCodeRate Value;
  this->get_CodeRate((Lisbctxserver_tlb::TCodeRate*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcDvbt2DispT<T>::set_CodeRate(Lisbctxserver_tlb::TCodeRate Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeRate"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisBcDvbt2DispT<T>::get_FftSize(Lisbctxserver_tlb::TFftSize* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FftSize"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Lisbctxserver_tlb::TFftSize __fastcall
ILisBcDvbt2DispT<T>::get_FftSize(void)
{
  Lisbctxserver_tlb::TFftSize Value;
  this->get_FftSize((Lisbctxserver_tlb::TFftSize*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcDvbt2DispT<T>::set_FftSize(Lisbctxserver_tlb::TFftSize Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FftSize"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ILisBcDvbt2DispT<T>::get_GuardInterval(Lisbctxserver_tlb::TGuardInterval2* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GuardInterval"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Lisbctxserver_tlb::TGuardInterval2 __fastcall
ILisBcDvbt2DispT<T>::get_GuardInterval(void)
{
  Lisbctxserver_tlb::TGuardInterval2 Value;
  this->get_GuardInterval((Lisbctxserver_tlb::TGuardInterval2*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ILisBcDvbt2DispT<T>::set_GuardInterval(Lisbctxserver_tlb::TGuardInterval2 Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GuardInterval"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Lisbctxserver_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Lisbctxserver_tlb;
#endif

#pragma option pop

#endif // LISBCTxServer_TLBH

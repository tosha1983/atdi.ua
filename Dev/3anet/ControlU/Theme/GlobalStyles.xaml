<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:ControlU.Theme">

    <Style x:Key="{x:Type TextBlock}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource Brush_Foreground_Normal}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="MinHeight" Value="10"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{DynamicResource Brush_Foreground_Normal}"/>
        <Setter Property="Background" Value="{DynamicResource Brush_Background_Light}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brush_BorderColor_Normal}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="MinHeight" Value="10"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <!--<ScrollViewer x:Name="PART_ContentHost" HorizontalAlignment="Center" VerticalAlignment="Center" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>-->
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost" />
                    </Border>
                    <!--<ContentPresenter Name="grid" HorizontalAlignment="Center" VerticalAlignment="Center"></ContentPresenter>-->
                    <ControlTemplate.Triggers>
                        
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.25"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush_Foreground_Normal}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="grid">
                        <Border x:Name="border" CornerRadius="0" BorderBrush="{DynamicResource Brush_BorderColor_Normal}" 
                                BorderThickness="1" Background="{DynamicResource Brush_Background_Normal}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding  HorizontalContentAlignment}" 
                                              VerticalAlignment="{TemplateBinding  VerticalContentAlignment}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Brush_IsMouseOver_Normal}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Brush_IsPressed_Normal}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="grid" Value="0.25"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="InvisibleButton" TargetType="{x:Type Button}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush_Foreground_Normal}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="0" BorderBrush="Transparent" 
                                BorderThickness="1" Background="Transparent">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding  HorizontalContentAlignment}" 
                                          VerticalAlignment="{TemplateBinding  VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.25"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Brush_IsMouseOver_Normal}"/>
                            <Setter Property="Opacity" TargetName="border" Value="0.75"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Brush_IsMouseOver_Normal}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type RepeatButton}" TargetType="{x:Type RepeatButton}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush_Foreground_Normal}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid x:Name="grid">
                        <Border x:Name="border" CornerRadius="0" BorderBrush="{DynamicResource Brush_BorderColor_Normal}" 
                                Background="{DynamicResource Brush_Background_Normal}"
                                BorderThickness="1" >
                            <ContentPresenter HorizontalAlignment="{TemplateBinding  HorizontalContentAlignment}" 
                                              VerticalAlignment="{TemplateBinding  VerticalContentAlignment}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Brush_IsMouseOver_Normal}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Brush_IsPressed_Normal}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="grid" Value="0.25"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ToggleButton}" TargetType="{x:Type ToggleButton}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground_NormalColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="grid">
                        <Border x:Name="border" CornerRadius="0" BorderBrush="{DynamicResource Brush_BorderColor_Normal}" 
                                BorderThickness="1" Background="{DynamicResource Brush_Background_Normal}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding  HorizontalContentAlignment}" 
                                              VerticalAlignment="{TemplateBinding  VerticalContentAlignment}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Brush_IsMouseOver_Normal}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Brush_IsPressed_Normal}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="grid" Value="0.25"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeftReceiverRepeatButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush_Foreground_Normal}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid x:Name="grid">
                        <Border x:Name="border" BorderThickness="1,1,0,1">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
                                    <LinearGradientBrush.RelativeTransform>
                                        <TransformGroup>
                                            <RotateTransform CenterY="0.5" CenterX="0.5" Angle="270"/>
                                        </TransformGroup>
                                    </LinearGradientBrush.RelativeTransform>
                                    <GradientStop Color="{DynamicResource Background_DarkColor}"/>
                                    <GradientStop Color="{DynamicResource Background_NormalColor}" Offset="1"/>
                                </LinearGradientBrush>
                            </Border.Background>
                            <Border.BorderBrush>
                                <LinearGradientBrush  EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
                                    <LinearGradientBrush.RelativeTransform>
                                        <TransformGroup>
                                            <RotateTransform CenterY="0.5" CenterX="0.5" Angle="90"/>
                                        </TransformGroup>
                                    </LinearGradientBrush.RelativeTransform>
                                    <GradientStop Color="{DynamicResource Border_DarkColor}"  Offset="1"/>
                                    <GradientStop Color="{DynamicResource Background_NormalColor}"/>
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                        </Border>
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"></ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Brush_IsMouseOver_Normal}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Brush_IsPressed_Normal}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="grid" Value="0.25"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RightReceiverRepeatButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush_Foreground_Normal}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid x:Name="grid">
                        <Border x:Name="border" BorderThickness="0,1,1,1">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
                                    <LinearGradientBrush.RelativeTransform>
                                        <TransformGroup>
                                            <RotateTransform CenterY="0.5" CenterX="0.5" Angle="90"/>
                                        </TransformGroup>
                                    </LinearGradientBrush.RelativeTransform>
                                    <GradientStop Color="{DynamicResource Background_NormalColor}" Offset="1"/>
                                    <GradientStop Color="{DynamicResource Background_DarkColor}" />
                                </LinearGradientBrush>
                            </Border.Background>
                            <Border.BorderBrush>
                                <LinearGradientBrush  EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
                                    <LinearGradientBrush.RelativeTransform>
                                        <TransformGroup>
                                            <RotateTransform CenterY="0.5" CenterX="0.5" Angle="90"/>
                                        </TransformGroup>
                                    </LinearGradientBrush.RelativeTransform>
                                    <GradientStop Color="{DynamicResource Background_NormalColor}" Offset="1"/>
                                    <GradientStop Color="{DynamicResource Border_DarkColor}" />
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                        </Border>
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"></ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Brush_IsMouseOver_Normal}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Brush_IsPressed_Normal}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="grid" Value="0.25"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource Brush_Foreground_Normal}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="MinHeight" Value="16" />
        <Setter Property="MinWidth" Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid Name="grd" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="hover" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="pressed" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To=".55" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter" />
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="disabled" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="checkBox" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="IndeterminateCheck" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="focused" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid" />
                                <VisualState x:Name="InvalidUnfocused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="invalidUnfocused" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="InvalidFocused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="invalidFocused" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{Binding ElementName=grd, Path=ActualHeight}" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <!--<Rectangle Fill="{StaticResource TransparentBrush}" />-->
                        <Rectangle x:Name="normal" Opacity="1" Stroke="{DynamicResource Brush_BorderColor_Normal}" 
                                   Fill="{DynamicResource Brush_Background_Normal}" Width="{Binding ElementName=grd, Path=ActualHeight}" Height="{Binding ElementName=grd, Path=ActualHeight}"/>
                        <Rectangle x:Name="hover" Stroke="{DynamicResource Brush_BorderColor_Normal}" 
                                   Fill="{DynamicResource Brush_BorderColor_Dark}" Opacity="0" />
                        <Rectangle x:Name="pressed" Opacity="0" Stroke="{DynamicResource Brush_IsPressed_Normal}" StrokeThickness="1" 
                                   Fill="{DynamicResource Brush_Background_Light}" />
                        <Rectangle x:Name="focused" Opacity="0" Stroke="{DynamicResource Brush_Blue_Normal}" StrokeThickness="1" 
                                   Fill="{DynamicResource Brush_Background_Light}"/>
                        <Rectangle x:Name="invalidUnfocused" Opacity="0" Stroke="{DynamicResource invalidUnfocused}" StrokeThickness="1" 
                                   Fill="{DynamicResource Brush_Background_Light}"/>
                        <Rectangle x:Name="invalidFocused" Opacity="0" Stroke="{DynamicResource invalidFocused}" StrokeThickness="1" 
                                   Fill="{DynamicResource Brush_Background_Light}" />
                        <Path x:Name="checkBox" Stretch="Fill" Opacity="0" 
                              Data="M 1145.607177734375,430 C1145.607177734375,430 1141.449951171875,435.0772705078125 1141.449951171875,435.0772705078125 1141.449951171875,435.0772705078125 1139.232177734375,433.0999755859375 1139.232177734375,433.0999755859375 1139.232177734375,433.0999755859375 1138,434.5538330078125 1138,434.5538330078125 1138,434.5538330078125 1141.482177734375,438 1141.482177734375,438 1141.482177734375,438 1141.96875,437.9375 1141.96875,437.9375 1141.96875,437.9375 1147,431.34619140625 1147,431.34619140625 1147,431.34619140625 1145.607177734375,430 1145.607177734375,430 z" 
                              Fill="{DynamicResource Brush_Blue_Normal}" UseLayoutRounding="False" Margin="3,4" />
                        <Rectangle x:Name="IndeterminateCheck" Fill="{DynamicResource Brush_BorderColor_Normal}" Height="3" Width="8" Opacity="0" />
                        <Rectangle x:Name="disabled" Opacity="0.25" StrokeThickness="1"  />
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}" Grid.Column="1" Margin="{TemplateBinding Padding}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckBox_Switcher" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="Transparent"/>
        <Setter Property="MinWidth" Value="62"/>
        <Setter Property="MinHeight" Value="21"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="OnChecking">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1500000" Value="30"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="OnUnchecking">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1500000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ThicknessAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(FrameworkElement.Margin)">
                                <SplineThicknessKeyFrame KeyTime="00:00:00.1500000" Value="1,1,1,1"/>
                            </ThicknessAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <DockPanel x:Name="dockPanel">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          Content="{TemplateBinding Content}" 
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                                          ContentTemplate="{TemplateBinding ContentTemplate}" 
                                          RecognizesAccessKey="True" VerticalAlignment="Center"/>
                        <Grid Margin="0"  Background="{DynamicResource Brush_Background_Dark}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*"/>
                                <ColumnDefinition Width="1*"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock x:Name="Off" Text="OFF" FontSize="14" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                            <TextBlock x:Name="On" Text="ON" FontSize="14" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" Grid.Column="1"/>
                            <Border HorizontalAlignment="Left" x:Name="slider" Width="30" BorderThickness="1,1,1,1" CornerRadius="3,3,3,3" 
                                    RenderTransformOrigin="0.5,0.5" Margin="1" Height="Auto" BorderBrush="{StaticResource Brush_BorderColor_Normal}" 
                                    Background="{DynamicResource Brush_Background_Normal}" Grid.ColumnSpan="2">
                                <Border.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="0"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Border.RenderTransform>
                                <Path Name="indicator" Stretch="Uniform" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="4" >
                                    <Path.Data>
                                        <RectangleGeometry Rect="0,0,40,20" RadiusX="2" RadiusY="2" />
                                    </Path.Data>
                                </Path>
                            </Border>
                        </Grid>
                    </DockPanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource OnUnchecking}" x:Name="OnUnchecking_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource OnChecking}" x:Name="OnChecking_BeginStoryboard"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Fill" TargetName="indicator" Value="{DynamicResource Brush_Blue_Normal}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Fill" TargetName="indicator" Value="{DynamicResource Brush_Fail_Normal}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border
                  x:Name="Border" 
                  Grid.ColumnSpan="2"
                  CornerRadius="0"
                  Background="{DynamicResource Brush_Background_Normal}"
                  BorderBrush="{DynamicResource Brush_BorderColor_Normal}"
                  BorderThickness="1" />
            <Border 
                  Grid.Column="0"
                  CornerRadius="0" 
                  Margin="1" 
                  Background="{DynamicResource Brush_Background_Normal}"
                  BorderBrush="{DynamicResource Brush_BorderColor_Normal}"
                  BorderThickness="0,0,1,0" />
            <Path 
                  x:Name="Arrow"
                  Grid.Column="1"     
                  Fill="{DynamicResource Brush_Foreground_Normal}"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                />
        </Grid>
        <!--<ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#808080" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#E0E0E0" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="#EEEEEE" />
                <Setter TargetName="Border" Property="BorderBrush" Value="#AAAAAA" />
                <Setter Property="Foreground" Value="#888888"/>
                <Setter TargetName="Arrow" Property="Fill" Value="#888888" />
            </Trigger>
        </ControlTemplate.Triggers>-->
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{DynamicResource Brush_Background_Normal}"/>
    </ControlTemplate>

    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="MinWidth" Value="20"/>
        <Setter Property="MinHeight" Value="10"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton 
                            Name="ToggleButton" 
                            Template="{StaticResource ComboBoxToggleButton}" 
                            Grid.Column="2" 
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="3,3,23,3"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox"
                            Style="{x:Null}" 
                            Template="{StaticResource ComboBoxTextBox}" 
                            HorizontalAlignment="Left" 
                            VerticalAlignment="Center" 
                            Margin="3,3,23,3"
                            Focusable="True" 
                            Background="#FF3F3F3F"
                            Foreground="Green"
                            Visibility="Hidden"
                            IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup 
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True" 
                            Focusable="False"
                            PopupAnimation="Slide">
                            <Grid Name="DropDown"
                                  SnapsToDevicePixels="True"                
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                                    x:Name="DropDownBorder"
                                    Background="{DynamicResource Brush_Background_Normal}"
                                    BorderThickness="1"
                                    BorderBrush="{DynamicResource Brush_BorderColor_Normal}"/>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="20"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource Brush_Foreground_Normal}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                            <!--<Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>-->
                        </Trigger>
                        <Trigger Property="IsEditable"  Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>

    <!-- SimpleStyles: ComboBoxItem -->
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border"
                            
                            SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Brush_BorderColor_Normal}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource Brush_Foreground_Normal}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>





    <Style x:Key="{x:Type ProgressBar}" TargetType="{x:Type ProgressBar}">
        <Setter Property="BorderBrush" Value="{DynamicResource Brush_BorderColor_Normal}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ProgressBar" >
                    <Grid x:Name="Root">
                        <Border Name="PART_Track" CornerRadius="0" Background="{x:Null}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" />
                        <Rectangle x:Name="PART_Indicator" HorizontalAlignment="Left" Fill="{DynamicResource Brush_Blue_Normal}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter TargetName="Root" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="270" />
                                </Setter.Value>
                            </Setter>

                            <Setter TargetName="Root" Property="Width" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height}"/>
                            <Setter TargetName="Root" Property="Height" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
    <Style x:Key="{x:Type GroupBox}" TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="{DynamicResource Brush_Blue_Normal}"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush_Foreground_Normal}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid Name="grid" SnapsToDevicePixels="True" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="4"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="4"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="4"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Row="1" Grid.RowSpan="3"
                                Grid.Column="0" Grid.ColumnSpan="4"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="Transparent"
                                Background="Transparent" Margin="0" SnapsToDevicePixels="True" />
                        <!-- ContentPresenter for the header -->
                        <Border x:Name="Header" Padding="4,0,0,0" Grid.RowSpan="2" Grid.Column="1" Margin="0">
                            <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" />
                        </Border>
                        <!-- Primary content for GroupBox -->
                        <ContentPresenter Grid.Row="2"
                            Grid.Column="1"
                            Grid.ColumnSpan="2"
                            Margin="{TemplateBinding Padding}"/>
                        <Border CornerRadius="0"
                                Grid.Row="1"
                                Grid.RowSpan="3"                 
                                Grid.ColumnSpan="4"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}">
                            <Border.OpacityMask>
                                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="6">
                                    <Binding ElementName="Header" Path="ActualWidth"/>
                                    <Binding RelativeSource="{RelativeSource Self}" Path="ActualWidth"/>
                                    <Binding RelativeSource="{RelativeSource Self}" Path="ActualHeight"/>
                                </MultiBinding>
                            </Border.OpacityMask>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="grid" Value="0.25"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type TabItem}" TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Border Name="Border" BorderThickness="1,1,1,1" BorderBrush="{DynamicResource Brush_BorderColor_Dark}" Margin="0,0,0,0" >
                        <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        
                                        Margin="8,0"/>
                    </Border>
                    <ControlTemplate.Triggers>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="TabStripPlacement" Value="Top" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="Border" Property="Background" Value="{DynamicResource Brush_IsPressed_Normal}" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Brush_IsPressed_Normal}" />
                                <Setter TargetName="Border" Property="Margin" Value="0,0,0,-1" />
                                <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="TabStripPlacement" Value="Top" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="Border" Property="Background" Value="{DynamicResource Brush_Background_Normal}" />
                                <Setter TargetName="Border" Property="Margin" Value="0,0,0,0" />
                                <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,1" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="TabStripPlacement" Value="Left" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="Border" Property="Background" Value="{DynamicResource Brush_IsPressed_Normal}" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Brush_IsPressed_Normal}" />
                                <Setter TargetName="Border" Property="Margin" Value="0,0,-1,0" />
                                <Setter TargetName="Border" Property="BorderThickness" Value="1,1,0,1" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="TabStripPlacement" Value="Left" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="Border" Property="Background" Value="{DynamicResource Brush_Background_Normal}" />
                                <Setter TargetName="Border" Property="Margin" Value="0,0,0,0" />
                                <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,1" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.25"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type TabControl}" TargetType="{x:Type TabControl}">
        <Setter Property="Margin" Value="2" />
        <Setter Property="Padding" Value="2"    />
        <!--<Setter Property="Background" Value="White" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Name="ColumnDefinition0" />
                            <ColumnDefinition Width="0" Name="ColumnDefinition1" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" Name="RowDefinition0" />
                            <RowDefinition Height="*" Name="RowDefinition1" />
                        </Grid.RowDefinitions>

                        <TabPanel Name="HeaderPanel"
                                  Grid.Row="0"
                                  Panel.ZIndex="1" 
                                  IsItemsHost="True"
                                  KeyboardNavigation.TabIndex="1"
                                  HorizontalAlignment="Left" VerticalAlignment="Top"/>

                        <Grid Name="ContentPanel"
                          KeyboardNavigation.TabIndex="2"
                          KeyboardNavigation.TabNavigation="Local"
                          KeyboardNavigation.DirectionalNavigation="Contained"
                          Grid.Column="0"
                          Grid.Row="1" Margin="0">
                            <Border Name="ContentPanelBorder" Background="{DynamicResource Brush_Background_Normal}"
                                
                                BorderThickness="2" BorderBrush="{DynamicResource Brush_IsPressed_Normal}"
                                >
                                <ContentPresenter Content="{TemplateBinding SelectedContent}"
                                              ContentTemplate="{TemplateBinding SelectedContentTemplate}"
                                              ContentStringFormat="{TemplateBinding SelectedContentStringFormat}"
                                              ContentSource="SelectedContent"
                                              Name="PART_SelectedContentHost"
                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="1" />
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="Auto" />
                        </Trigger>
                        <Trigger Property="TabControl.TabStripPlacement" Value="Left">
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="0" />
                            <Setter TargetName="ContentPanel" Property="Grid.Column" Value="1" />
                            <Setter TargetName="ContentPanel" Property="Margin" Value="0" />
                            <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="Auto" />
                            <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="*" />
                            <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0" />
                        </Trigger>
                        <Trigger Property="TabControl.TabStripPlacement" Value="Right">
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="1" />
                            <Setter TargetName="ContentPanel" Property="Grid.Column" Value="0" />
                            <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="*" />
                            <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="Auto" />
                            <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="ContentPanelBorder" Property="BorderBrush" Value="{DynamicResource Brush_IsPressed_Normal}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#region ScrollBar ScrollViewer -->
    <Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush_Foreground_Normal}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid x:Name="grid">
                        <Border x:Name="border">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"></ContentPresenter>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Brush_IsMouseOver_Normal}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Brush_IsPressed_Normal}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="grid" Value="0.25"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Name="border" Background="{DynamicResource Brush_BorderColor_Dark}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Brush_IsMouseOver_Normal}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Brush_IsPressed_Normal}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.25"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="18" />
                <RowDefinition Height="0.00001*" />
                <RowDefinition MaxHeight="18" />
            </Grid.RowDefinitions>
            <Border Grid.RowSpan="3" Background="{DynamicResource Brush_Background_Normal}" />
            <RepeatButton Grid.Row="0"
                  Style="{StaticResource ScrollBarButton}"
                  Height="18"
                  Command="ScrollBar.LineUpCommand">
                <Path HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="M 9,6 13,12 5,12 z"
                      Fill="{DynamicResource Brush_Foreground_Normal}" Width="18" Height="18" />
            </RepeatButton>
            <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}" Margin="3,0" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Row="3"
                  Style="{StaticResource ScrollBarButton}"
                  Height="18"
                  Command="ScrollBar.LineDownCommand">
                <Path HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="M 9,12 13,6 5,6 z"
                      Fill="{DynamicResource Brush_Foreground_Normal}" Width="18" Height="18" />
            </RepeatButton>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="18" />
                <ColumnDefinition Width="0.00001*" />
                <ColumnDefinition MaxWidth="18" />
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="3" Background="{DynamicResource Brush_Background_Normal}"  />
            <RepeatButton Grid.Column="0"
                          Style="{StaticResource ScrollBarButton}"
                          Width="18"
                          Command="ScrollBar.LineLeftCommand">
                <Path HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="M 6,9 12,13 12,5 z"
                      Fill="{DynamicResource Brush_Foreground_Normal}" Width="18" Height="18" />
            </RepeatButton>
            <Track x:Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}"  Margin="0,3"/>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Column="3" 
                          Style="{StaticResource ScrollBarButton}"
                          Width="18"
                          Command="ScrollBar.LineRightCommand">
                <Path HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="M 12,9 6,13 6,5 z"
                      Fill="{DynamicResource Brush_Foreground_Normal}" Width="18" Height="18" />
            </RepeatButton>
        </Grid>
    </ControlTemplate>
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Height" Value="18" />
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="18" />
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="0" />
                        <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="0" Grid.Column="1" 
                                   Value="{TemplateBinding VerticalOffset}" 
                                   Maximum="{TemplateBinding ScrollableHeight}" 
                                   ViewportSize="{TemplateBinding ViewportHeight}" 
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="1" 
                                   Value="{TemplateBinding HorizontalOffset}" 
                                   Maximum="{TemplateBinding ScrollableWidth}" 
                                   ViewportSize="{TemplateBinding ViewportWidth}" 
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                        <Rectangle Fill="{DynamicResource Brush_Background_Normal}" Grid.Row="1" Grid.Column="1"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <Style TargetType="{x:Type DataGridRow}">
        <Setter Property="Foreground" Value="{DynamicResource Brush_Foreground_Normal}"/>
        <Setter Property="Background" Value="{DynamicResource Brush_Background_Normal}"/>
        <!--<Setter Property="Height" Value="25"/>-->
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Style.Triggers>
            <Trigger Property="AlternationIndex" Value="1">
                <Setter Property="Background" Value="{DynamicResource Brush_Background_Light}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Brush_IsPressed_Light}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource Brush_IsPressed_Light}" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True" >
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect Color="Red" ShadowDepth="0" BlurRadius="20" />
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderThickness" Value="2" />
                <Setter Property="BorderBrush" Value="Red" />
                <Setter Property="Foreground" Value="Blue" />
                <Setter Property="FontSize" Value="12" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Type DataGridColumnHeader}" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Foreground" Value="{DynamicResource Brush_Foreground_Normal}"/>
        <Setter Property="Background" Value="{DynamicResource Brush_Background_Normal}"/>
        <!--<Setter Property="Height" Value="25"/>-->
        <Setter Property="MinHeight" Value="15"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid Margin="{TemplateBinding Padding}">
                        <Border x:Name="columnHeaderBorder"
                                BorderThickness="1"                                
                                BorderBrush="{DynamicResource Brush_BorderColor_Normal}"
                                Background="{DynamicResource Brush_Background_Light}"
                                Width="{TemplateBinding Width}"
                                Padding="2,0">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="Center"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <Thumb x:Name="PART_RightHeaderGripper" Grid.Column="1"
                               HorizontalAlignment="Right"
                               Width="3" BorderThickness="1"
                               Margin="0"
                               Background="Transparent"
                               Cursor="SizeWE">
                            <Thumb.Template>
                                <ControlTemplate>
                                    <Border Background="{TemplateBinding Background}"/>
                                </ControlTemplate>
                            </Thumb.Template>
                        </Thumb>
                        <Path x:Name="SortArrow"                              
                              HorizontalAlignment="Center" VerticalAlignment="Top"       
                              Width="8" Height="6" Margin="0,1,0,0"
                              Stretch="Fill" Opacity="0.5" Fill="{DynamicResource Brush_Foreground_Dark}"
                              RenderTransformOrigin="0.5,0.4"
                              Visibility="Collapsed"
                              Data="M0,0 L1,0 0.5,1 z" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter Property="BorderBrush" Value="Transparent" TargetName="columnHeaderBorder"/>
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Ascending">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                            <Setter TargetName="SortArrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Descending">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DataGrid}">
        <Setter Property="Foreground" Value="{DynamicResource Brush_Foreground_Normal}"/>
        <Setter Property="Background" Value="{DynamicResource Brush_Background_Normal}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brush_BorderColor_Dark}"/>
        <!--<Setter Property="Height" Value="25"/>-->
        <Setter Property="MinHeight" Value="15"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="AlternatingRowBackground" Value="{DynamicResource Brush_Background_Light}"/>

    </Style>
    <!--Menu-->
    <Style TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource Brush_Background_Normal}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brush_Background_Normal}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border 
                        BorderBrush="{DynamicResource Brush_Background_Normal}" 
                        BorderThickness="1" 
                        Background="{DynamicResource Brush_Background_Normal}" 
                        Height="1" 
                        SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
        <Setter Property="Foreground" Value="{DynamicResource Brush_Foreground_Dark}"/>
        <Setter Property="Background" Value="{DynamicResource Brush_Background_Normal}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brush_BorderColor_Normal}"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}"
                        >
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="Col0" MinWidth="0" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition x:Name="Col3" Width="12"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Grid.Column="0" 
                                              Margin="2,0" 
                                              Name="Icon" 
                                              VerticalAlignment="Center" 
                                              ContentSource="Icon" HorizontalAlignment="Center"/>
                            <Grid Grid.Column="0" Visibility="Hidden" Margin="4,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                <Path Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" 
                                      Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                            </Grid>

                            <!-- Content for the menu text etc -->
                            <ContentPresenter Grid.Column="1"
                                          Margin="4,1"
                                          x:Name="HeaderHost"
                                          RecognizesAccessKey="True" TextBlock.FontSize="14"
                                          ContentSource="Header" VerticalAlignment="Center" HorizontalAlignment="Left"/>

                            <!-- Content for the menu IGT -->
                            <ContentPresenter Grid.Column="2"
                                          Margin="0,0,2,0"
                                          x:Name="IGTHost"
                                          ContentSource="InputGestureText"
                                          VerticalAlignment="Center"/>

                            <!-- Arrow drawn path which points to the next level of the menu -->
                            <Grid Grid.Column="3" Margin="4,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" 
                                      Data="M0,0 L0,8 L4,4 z"/>
                            </Grid>

                            <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                            <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" 
                                   Name="SubMenuPopup" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                   >
                                <Border x:Name="SubMenuBorder" 
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}" 
                                        BorderThickness="1" >
                                    <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                        <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                    </Grid>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>

                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>
                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Padding" Value="1,1,1,1"/>
                            <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                            <Setter Property="MinWidth" Value="0" TargetName="Col0"/>
                            <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Padding" Value="1,1,1,1"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                        </Trigger>

                        <!-- Role = SubMenuItem : this is a child menu item which has children-->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                        </Trigger>

                        <!-- If no Icon is present the we collapse the Icon Content -->
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <!-- The GlyphPanel contains the CheckMark -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <!-- Using the system colors for the Menu Highlight and IsEnabled-->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" Value="{DynamicResource Brush_Foreground_Dark}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="{DynamicResource Brush_Background_Normal}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Brush_Foreground_Dark}" />
                            <Setter Property="Foreground" Value="{DynamicResource Brush_Background_Normal}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border x:Name="Border" BorderThickness="1">
                        <StackPanel ClipToBounds="True"
                                    Orientation="Horizontal"
                                    IsItemsHost="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="#FFF" />
                            <Setter TargetName="Border" Property="Opacity" Value="0.7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{DynamicResource Brush_Background_Normal}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brush_BorderColor_Normal}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">

                    <!--Here is where you change the border thickness to zero on the menu-->
                    <Border BorderThickness="1"
                            x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <StackPanel ClipToBounds="True"
                                    Orientation="Vertical"
                                    IsItemsHost="True" />
                    </Border>
                    <!--<ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="#FFF" />
                            <Setter TargetName="Border" Property="Opacity" Value="0.7" />
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Menu-->
    <Style TargetType="{x:Type ToolTip}" >
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource Brush_Foreground_Normal}" />
        <Setter Property="Background" Value="{DynamicResource Brush_Background_Light}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Placement" Value="Bottom" />
        <Setter Property="VerticalOffset" Value="0" />
        <Setter Property="Padding" Value="8" />

        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}" >
                    <StackPanel Margin="7,1" >
                        <Border Background="{TemplateBinding Background}" CornerRadius="1" >
                            <ContentPresenter Margin="1" HorizontalAlignment="Center" VerticalAlignment="Top" />
                        </Border>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <SolidColorBrush x:Key="BackgroundBrush" Color="#00222222" />
    <SolidColorBrush x:Key="HighlightedBrush" Color="#FF424242" />
    <SolidColorBrush x:Key="NormalBrush" Color="#77000000" />
    <ControlTemplate x:Key="EmptyTemplate" TargetType="{x:Type RepeatButton}">
        <Border Background="Transparent" />
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbTemplate" TargetType="{x:Type Thumb}">
        <Path x:Name="path" Height="9" Data="M4,0 L1,0 0,1 1,2 4,2 Z" Stroke="{DynamicResource NormalBrush}" Stretch="Fill">
            <Path.Fill>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                    <GradientStop Offset="0.05" Color="#FFEEEEEE"/>
                    <GradientStop Offset="0.95" Color="#FF646464"/>
                </LinearGradientBrush>
            </Path.Fill>
        </Path>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Stroke" TargetName="path" Value="{DynamicResource HighlightedBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbTemplateRight" TargetType="{x:Type Thumb}">
        <Grid>
            <Path x:Name="path" Height="19" Data="M4,0 L1,0 0,1 1,2 4,2 Z" Stroke="{DynamicResource NormalBrush}" Stretch="Fill">
                <Path.Fill>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientStop Offset="0.05" Color="#FFEEEEEE"/>
                        <GradientStop Offset="0.95" Color="#FF646464"/>
                    </LinearGradientBrush>
                </Path.Fill>
            </Path>
            <TextBlock Foreground="White" Margin="0,-2,2,0"  Text="{Binding Value, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Slider}}}" VerticalAlignment="Center" FontSize="16" HorizontalAlignment="Right"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Stroke" TargetName="path" Value="{StaticResource HighlightedBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbTemplateLeft" TargetType="{x:Type Thumb}">
        <Grid>
            <Path x:Name="path" Height="19" Data="M-4,0 L-1,0 0,1 -1,2 -4,2 Z" Stroke="{DynamicResource NormalBrush}" Stretch="Fill">
                <Path.Fill>
                    <LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
                        <GradientStop Offset="0.05" Color="#FFEEEEEE"/>
                        <GradientStop Offset="0.95" Color="#FF646464"/>
                    </LinearGradientBrush>
                </Path.Fill>
            </Path>
            <TextBlock Foreground="White" Margin="2,-2,0,0"  Text="{Binding Value, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Slider}}}" VerticalAlignment="Center" FontSize="16" HorizontalAlignment="Left"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Stroke" TargetName="path" Value="{StaticResource HighlightedBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbTemplateUp" TargetType="{x:Type Thumb}">
        <Grid>
            <Path x:Name="path" Height="19" Width="30" Data="M4,0 -4,0 -4,3 0,4 4,3 Z" Stroke="{DynamicResource NormalBrush}" Stretch="Fill" RenderTransformOrigin="0.5,0.5">
                <Path.Fill>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <LinearGradientBrush.RelativeTransform>
                            <TransformGroup>
                                <ScaleTransform CenterY="0.5" CenterX="0.5"/>
                                <SkewTransform CenterY="0.5" CenterX="0.5"/>
                                <RotateTransform Angle="-90" CenterY="0.5" CenterX="0.5"/>
                                <TranslateTransform/>
                            </TransformGroup>
                        </LinearGradientBrush.RelativeTransform>
                        <GradientStop Offset="0.05" Color="#FFEEEEEE"/>
                        <GradientStop Offset="0.95" Color="#FF646464"/>
                    </LinearGradientBrush>
                </Path.Fill>
            </Path>
            <TextBlock Foreground="White" Text="{Binding Value, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Slider}}}" VerticalAlignment="Top" FontSize="16" HorizontalAlignment="Center" Margin="0,0,0,5" TextAlignment="Center" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Stroke" TargetName="path" Value="{StaticResource HighlightedBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="MySlider" TargetType="{x:Type Slider}">
        <Setter Property="Foreground" Value="{DynamicResource NormalBrush}" />
        <Setter Property="Orientation" Value="Vertical" />
        <Setter Property="TickPlacement" Value="TopLeft" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <TickBar Grid.Column="0" Width="4" Fill="{TemplateBinding Foreground}" Placement="Left" HorizontalAlignment="Left" />
                        <Path Grid.Column="1" Margin="0,4,4,4" Data="M0,1 L0,0 5,0 1,1 z" Stretch="Fill" Stroke="{TemplateBinding Foreground}">
                            <Path.Fill>
                                <LinearGradientBrush StartPoint="0,1" EndPoint="0,0">
                                    <GradientStop Offset="0" Color="#3000"/>
                                    <GradientStop Offset="0.8" Color="#407F7F7F"/>
                                </LinearGradientBrush>
                            </Path.Fill>
                        </Path>
                        <Track Grid.Column="1" x:Name="PART_Track">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="Slider.DecreaseLarge" Template="{StaticResource EmptyTemplate}" />
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Template="{StaticResource SliderThumbTemplate}"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="Slider.IncreaseLarge" Template="{StaticResource EmptyTemplate}" />
                            </Track.IncreaseRepeatButton>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LevelSliderRight" TargetType="{x:Type Slider}">
        <Setter Property="Foreground" Value="{DynamicResource NormalBrush}" />
        <Setter Property="Orientation" Value="Vertical" />
        <Setter Property="TickPlacement" Value="TopLeft" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Path Grid.Column="0" Margin="0,9" Data="M0,1 0,0 " Stretch="Fill" 
                              Stroke="{TemplateBinding Foreground}" HorizontalAlignment="Left"/>
                        <TickBar Grid.Column="0" Width="5" Fill="{TemplateBinding Foreground}" Placement="Left" 
                                 HorizontalAlignment="Left" Margin="-1,0,0,0">

                        </TickBar>
                        <Track Grid.Column="1" x:Name="PART_Track">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="Slider.DecreaseLarge" Template="{StaticResource EmptyTemplate}" />
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Template="{StaticResource SliderThumbTemplateRight}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="Slider.IncreaseLarge" Template="{StaticResource EmptyTemplate}" />
                            </Track.IncreaseRepeatButton>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LevelSliderLeft" TargetType="{x:Type Slider}">
        <Setter Property="Foreground" Value="{DynamicResource NormalBrush}" />
        <Setter Property="Orientation" Value="Vertical" />
        <Setter Property="TickPlacement" Value="TopLeft" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Path Grid.Column="1" Margin="0,9" Data="M0,0 0,1 " Stretch="Fill" 
                              Stroke="{TemplateBinding Foreground}" HorizontalAlignment="Right"/>


                        <TickBar Grid.Column="1" Width="5" Fill="{TemplateBinding Foreground}" Placement="Left" 
                                 HorizontalAlignment="Left" Margin="0" />
                        <Track Grid.Column="0" x:Name="PART_Track" Margin="0">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="Slider.DecreaseLarge" Template="{StaticResource EmptyTemplate}" />
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Template="{StaticResource SliderThumbTemplateLeft}"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="Slider.IncreaseLarge" Template="{StaticResource EmptyTemplate}" />
                            </Track.IncreaseRepeatButton>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LevelSliderUp" TargetType="{x:Type Slider}">
        <Setter Property="Foreground" Value="{DynamicResource NormalBrush}" />
        <Setter Property="Orientation" Value="Vertical" />
        <Setter Property="TickPlacement" Value="TopLeft" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition />
                        </Grid.RowDefinitions>

                        <Path Grid.Column="0" Margin="14,0" Data="M0,0 1,0 " Stretch="Fill" 
                              Stroke="{TemplateBinding Foreground}" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Grid.Row="1"/>
                        <TickBar Fill="LightGray" VerticalAlignment="Top" SnapsToDevicePixels="True" Grid.Row="1"
                                  Placement="Top" Height="8"/>
                        <Track Grid.Column="0" x:Name="PART_Track" Margin="0,0,0,-7" Orientation="Horizontal" Panel.ZIndex="1" Grid.Row="0">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="Slider.DecreaseLarge" Template="{StaticResource EmptyTemplate}" />
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Template="{StaticResource SliderThumbTemplateUp}"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="Slider.IncreaseLarge" Template="{StaticResource EmptyTemplate}" />
                            </Track.IncreaseRepeatButton>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Slider-->
    <Style x:Key="SliderButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SliderThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="false"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Width" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <Border Name="Border" 
                            Background="{DynamicResource Brush_Background_Light}" 
                            BorderBrush="{DynamicResource Brush_BorderColor_Light}" 
                            BorderThickness="1"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Brush_Blue_Normal}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Opacity" Value="0.25"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Template when the orientation of the Slider is Horizontal.-->
    <ControlTemplate x:Key="HorizontalSlider" TargetType="{x:Type Slider}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <TickBar x:Name="TopTick"
                     SnapsToDevicePixels="True"
                     Placement="Top"
                     Height="4"
                     Visibility="Collapsed">
                <TickBar.Fill>
                    <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                </TickBar.Fill>
            </TickBar>
            <Border x:Name="TrackBackground"                  
                    Height="4"
                    Grid.Row="1"
                    BorderThickness="1"
                    BorderBrush="{DynamicResource Brush_BorderColor_Normal}"
                    Background="{DynamicResource Brush_Background_Normal}">
            </Border>
            <Track Grid.Row="1" x:Name="PART_Track">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource SliderButtonStyle}" Command="Slider.DecreaseLarge" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource SliderThumbStyle}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource SliderButtonStyle}" Command="Slider.IncreaseLarge" />
                </Track.IncreaseRepeatButton>
            </Track>
            <TickBar x:Name="BottomTick"
                     SnapsToDevicePixels="True"
                     Grid.Row="2"
                     Fill="{DynamicResource Brush_Foreground_Normal}"
                     Placement="Bottom"
                     Height="4"
                     Visibility="Collapsed" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Template when the orientation of the Slider is Vertical.-->
    <ControlTemplate x:Key="VerticalSlider" TargetType="{x:Type Slider}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding MinWidth}" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <TickBar x:Name="TopTick"
                     SnapsToDevicePixels="True"
                     Placement="Left"
                     Width="4"
                     Visibility="Collapsed">
                <TickBar.Fill>
                    <SolidColorBrush Color="{DynamicResource Foreground_NormalColor}" />
                </TickBar.Fill>
            </TickBar>

            <Border x:Name="TrackBackground"
                    Margin="0"
                    CornerRadius="2"
                    Width="4"
                    Grid.Column="1"
                    BorderThickness="1"
                    BorderBrush="{DynamicResource Brush_BorderColor_Normal}"
                    Background="{DynamicResource Brush_Background_Normal}">
            </Border>
            <Track Grid.Column="1" x:Name="PART_Track">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource SliderButtonStyle}" Command="Slider.DecreaseLarge" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource SliderThumbStyle}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource SliderButtonStyle}" Command="Slider.IncreaseLarge" />
                </Track.IncreaseRepeatButton>
            </Track>
            <TickBar x:Name="BottomTick"
                     SnapsToDevicePixels="True"
                     Grid.Column="2"
                     Fill="{DynamicResource Brush_Foreground_Normal}"
                     Placement="Right"
                     Width="4"
                     Visibility="Collapsed" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type Slider}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="MinWidth" Value="104" />
                <Setter Property="MinHeight" Value="21" />
                <Setter Property="Template" Value="{StaticResource HorizontalSlider}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="MinWidth" Value="21" />
                <Setter Property="MinHeight" Value="104" />
                <Setter Property="Template" Value="{StaticResource VerticalSlider}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--Slider-->

  

    <Style x:Key="WindowStyleTitleBarButton" TargetType="{x:Type Button}">
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border
                            x:Name="PART_border"
                            Background="Transparent"
                            />
                        <ContentPresenter />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_border" Property="Background" Value="#FFF" />
                            <Setter TargetName="PART_border" Property="Opacity" Value="0.7" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="PART_border" Property="Background" Value="{DynamicResource Brush_Blue_Normal}"/>
                            <Setter TargetName="PART_border" Property="Opacity" Value="1" />
                            <Setter Property="Foreground" Value="#FFF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>
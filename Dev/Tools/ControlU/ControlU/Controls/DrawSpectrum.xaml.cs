using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using SharpGL;
using SharpGL.Enumerations;
using SharpGL.WPF;
using SharpGL.SceneGraph.Primitives;
using SharpGL.SceneGraph.Shaders;
using SharpGL.SceneGraph;
using System.ComponentModel;
using System.Collections.ObjectModel;

namespace ControlU.Controls
{
    /// <summary>
    /// Логика взаимодействия для DrawSpectrum.xaml
    /// </summary>
    public partial class DrawSpectrum : UserControl, INotifyPropertyChanged
    {
        //////////////////////////////////////////////////
        /// Надо грохать GC.Collect(); в исходниках либы 
        /// в SharpGL.WPF.BitmapConversion.HBitmapToBitmapSource
        /// т.к. GC сходит с ума и творит хз что 
        /// при каком либо движняке большого обьема инфы в приложении
        //////////////////////////////////////////////////

        Equipment.SignalHound sh = MainWindow.SHReceiver;
        Equipment.Analyzer an = MainWindow.An;
        Equipment.RsReceiver_v2 rcv = MainWindow.Rcvr;
        Equipment.TSMxReceiver tsmx = MainWindow.tsmx;
        Equipment.LocalMeasurement LM = new Equipment.LocalMeasurement();

        /// <summary>
        /// 0 = все хорошо
        /// 1 = RF Overload
        /// 2 = IF Overload
        /// </summary>
        public int RFOverload
        {
            get { return _RFOverload; }
            set { _RFOverload = value; }
        }
        private int _RFOverload = 0;
        #region data
        float[] BackgroundRGB = new float[3] { 0.9372f, 0.9372f, 0.949f };
        float[] ForegroundRGB = new float[3] { 0.9372f, 0.9372f, 0.949f };
        float[] RXRGB = new float[3] { 0.9372f, 0.9372f, 0.949f };
        float[] Trace1RGB = new float[3] { 0.3529f, 0.6274f, 0.7843f };
        float[] Trace2RGB = new float[3] { 0.1375f, 0.6274f, 0.1375f };
        float[] Trace3RGB = new float[3] { 0.7843f, 0.2352f, 0.2352f };
        double[] data = new double[] {
            -117.8386,-120.6528,-122.0652,-121.8025,-121.2239,-121.7128,-119.4347,-120.7488,-122.7522,-119.6089,-119.7671,-123.6636,-122.6037,-123.1343,-123.0169,-121.0013,-118.7074,-119.224,-116.975,-118.4865,-120.7163,-119.8181,-120.6083,-120.929,-119.1726,-121.6488,-120.296,-116.1966,-117.8809,-117.597,-120.6402,-118.1631,-113.5829,-117.0902,-117.8617,-115.735,-115.0634,-116.8931,-112.1725,-113.6154,-112.0266,-112.0029,-112.789,-112.4283,-112.4534,-112.5631,-111.2889,-109.5703,-111.52,-111.7169,-107.9733,-109.5163,-109.8569,-107.8838,-108.0343,-108.2085,-106.2729,-106.6786,-108.7404,-104.8785,-105.837,-107.3433,-104.6654,-104.6295,-104.1574,-103.9251,-103.1554,-102.3479,-104.3757,-102.4288,-99.394,-101.826,-100.1775,-98.28128,-98.46112,-97.05723,-94.76727,-91.55518,-90.88397,-80.34377,-81.96317,-82.61144,-82.99197,-83.35896,-80.71962,-80.6076,-80.63779,-81.19503,-81.51305,-81.6031,-79.71613,-78.06147,-81.81236,-82.56381,-83.3851,-83.38342,-82.26175,-81.14645,-79.60987,-82.22318,-80.51292,-82.06243,-81.46934,-82.61184,-80.78469,-79.99635,-83.36224000,-82.42212,-79.62027,-81.8627,-79.94202,-81.80084,-81.30466,-82.43071000,-83.18208,-82.40108000,-79.42848,-79.32803,-80.97694,-81.3252,-81.24565,-81.34746,-78.67323,-82.41066,-80.63464000,-80.05771,-79.48832,-80.86448,-79.92257,-81.01541,-79.39506,-82.64093,-81.07527,-80.90197,-80.81796000,-80.18736,-80.44603,-80.96303,-81.88312,-79.82822,-80.73386,-81.04243,-79.75216,-82.62304,-80.52251,-80.07914,-78.31169,-77.53055,-79.7288,-79.09451,-81.79759,-81.38021,-81.07053,-79.2337,-79.88133,-77.34837,-81.43407,-80.41149,-80.11584,-80.7252,-79.60276,-81.50291,-80.82076,-78.90665,-76.2782,-81.50107,-78.85043,-78.95072,-80.36711,-77.67312,-78.9528,-78.73115,-79.1209,-80.86732,-77.72243,-80.85606,-79.76302,-77.16671,-77.79665,-79.7608,-79.49883,-81.63023,-78.47053,-79.02702,-80.36317,-80.0631,-77.66062,-81.66471,-79.59715,-82.28264,-78.60825,-79.84917,-81.90285,-79.5027,-80.0403,-81.21218000,-81.16356,-82.5159,-82.44368000,-82.52396,-82.29194,-81.99984,-83.1519,-81.98676,-83.68891,-82.86613,-82.04094,-80.36454000,-83.84245,-81.95593,-83.48386,-84.07848,-79.82666,-82.38416,-80.63683,-80.48273,-82.7837,-77.87191,-82.66061,-83.85512,-84.30756,-81.46783,-80.39006,-79.26864,-82.93492,-80.34019,-83.9061,-82.2126,-79.98586,-78.27577,-80.01796,-85.66557,-79.88966,-83.62466,-83.11416,-82.56628,-79.57249,-84.80437,-83.36649,-83.36879,-84.76028,-84.44247,-83.21394,-79.86412,-81.17997,-84.00951,-80.57506,-83.45071,-80.7983,-82.74641,-81.08434,-79.14825,-81.92654,-81.40301,-81.68404,-81.15912000,-82.00233,-80.58517,-79.85942,-82.63413000,-82.21947,-81.83405,-83.64089000,-80.4815,-79.95438000,-82.8737,-80.66143,-82.07323,-83.09502,-83.10382,-82.13533,-78.21911,-80.46419,-81.87131000,-82.56212000,-81.7249,-81.77408,-80.00063,-79.05607,-80.09558,-80.0409,-78.83038,-78.3051,-79.9071,-79.16395,-79.41842,-77.65112,-77.35663,-80.82249,-81.11615,-82.91168,-80.35462,-82.17921000,-78.88263,-80.58939,-81.08563,-80.51924,-81.76678,-81.18547,-79.77451,-80.83406,-81.96432,-83.57486,-81.43714,-81.14919,-83.86432,-78.90242,-82.38231,-81.01048,-83.34035,-80.55919,-82.38575,-81.31252,-81.51851,-80.7421,-79.25015,-85.07957,-78.0173,-79.4688,-82.22604,-78.83055,-80.65958,-83.1293,-85.00342,-83.23405,-83.27498,-81.56548,-82.45635,-82.89104,-81.22247,-84.75056,-80.95309,-83.18086,-82.2037,-79.61353,-83.36025,-80.24588,-82.97668,-82.20048,-80.83453,-80.49203,-84.38837,-82.28419,-83.09774,-84.27692,-80.61808,-82.91579,-81.98494,-82.32706,-80.33368,-79.80206,-80.00879000,-83.33978,-80.74503,-82.3858,-83.77032,-82.71986,-78.96651,-81.01648000,-80.41673,-79.94351000,-80.83189000,-82.06609,-81.31585,-82.35831000,-80.07924,-81.95316,-84.10722,-81.03791000,-82.12141,-83.64661000,-81.03758,-80.05949000,-81.98907000,-79.46231,-78.29893,-82.91472,-77.4059,-79.81677,-78.41203,-82.74059,-80.05489,-79.4592,-81.99072000,-80.94769,-83.4340,-82.227,-79.84653,-81.95137,-78.45844,-79.81502,-80.02023,-82.9212,-82.12931,-83.54822,-80.47095,-81.18652,-79.42869,-79.93623,-82.69788000,-81.32333000,-81.52004000,-81.18921,-79.94118000,-80.70782,-82.17185,-80.60136000,-81.76617,-81.06046,-81.14838,-82.93889,-82.07042,-79.90087,-80.87617,-79.47929,-82.96025,-80.51629,-80.43958,-82.40372,-80.28921,-83.82282,-78.1396,-80.08174000,-81.36893,-83.24189,-80.8986,-83.93256,-82.91989,-83.05256,-79.61608,-78.65352,-78.785,-78.35718,-80.03471,-83.70506000,-84.87741,-81.0353,-80.93269000,-83.18763,-81.5011,-82.3359,-83.89666,-84.13763,-86.3638,-80.97295,-82.08179,-81.39101,-82.20049,-81.41626,-83.15505,-84.49298,-78.28019,-82.75871,-79.76205,-77.48107,-82.87576000,-80.99706,-78.99551,-80.5108,-82.10321,-81.8127,-81.07426,-82.11966,-81.47048,-81.6242,-84.48621,-78.5985,-82.55801,-78.81277,-78.48729,-83.32975,-80.28341,-83.7179,-78.76994,-81.21149,-82.71085,-82.37614,-79.80671,-80.16623,-81.80968,-81.19257,-82.50243,-84.60718,-78.5753,-80.85183,-82.8862,-80.82845,-81.78988,-82.22464,-79.26452,-81.82795,-79.99663,-82.22218,-79.51734,-81.41816,-82.42632,-83.14302,-85.05473,-84.24903,-82.9224,-85.00312,-85.52339,-84.21046,-81.30856,-83.09724,-85.36825,-83.94807,-80.43198,-84.4765,-82.54611,-82.61664,-86.24429,-83.55,-82.55199,-82.97153,-81.25337,-81.92309,-83.61902,-82.59573,-83.29213,-82.69188,-81.18782,-80.67197,-83.65858,-83.26701,-84.06534,-81.52908,-84.00207,-81.91372000,-80.09957,-84.35822,-85.59609000,-86.37112,-85.02187,-83.92932,-81.58899,-81.80338,-83.34761,-83.33517,-82.24054,-85.91026,-83.4108,-82.39474,-85.32349000,-85.29533,-80.52054,-85.26645,-81.93719,-80.77538,-80.03725,-82.5524,-85.4536,-81.79987,-83.05251,-84.21052,-85.17332,-83.94518,-82.12737,-84.55092,-87.30526,-87.30922000,-84.02979,-85.23608,-84.80803,-84.64419000,-85.47426000,-82.45304,-82.43664,-82.64179,-84.16673,-83.9615,-83.12318,-84.7439,-83.15276,-84.40225,-82.66331,-80.29401,-84.60207,-84.97764,-84.81302,-81.74522,-82.07513,-83.79975,-83.61202,-85.2132,-81.14449,-81.05099,-79.86163,-83.69673,-80.28914,-82.80708,-80.54101,-81.81165,-81.66743,-83.00903,-80.25555,-79.82055,-81.24581,-77.28317,-85.03314,-81.18842,-78.52762,-77.72608,-81.17581,-83.42632,-82.40592,-80.69794,-82.86433,-84.52438,-80.22914,-77.77719,-80.87772,-78.98969,-83.25295,-82.50786,-83.08328,-81.8063,-80.45639,-81.78076,-82.76079,-80.45189,-83.27684,-82.73507,-85.30946,-83.40661,-80.93317,-85.37192,-83.82736,-82.05453,-81.90504,-83.51003,-80.78078,-84.83832,-84.65488,-85.13432,-84.22667,-85.97539,-86.991,-80.3672,-85.09819,-83.06866,-85.86301,-85.29797,-85.22181,-82.8798,-84.11421,-85.53893,-84.75142,-85.17867,-85.53506000,-82.95228,-86.08966000,-84.07388,-83.30542000,-84.16045,-85.72024000,-85.40948,-81.63506,-84.16318,-83.56625,-85.55399000,-84.62607,-84.51234,-82.25163,-82.35216000,-81.59488,-84.1228,-84.08681,-87.40475,-80.8731,-86.3533,-83.94592000,-80.76974,-84.49796,-85.28375,-84.37263,-81.77724000,-82.01892000,-81.86387,-83.19793,-81.82521000,-81.6671,-78.93518,-81.36456,-81.71474,-82.17185,-82.73698000,-78.09982,-80.03991,-80.68276,-81.80212,-81.55557,-80.26395,-83.61612,-79.53967,-81.42156,-81.05756000,-82.3774,-79.59509,-81.06881,-80.60146,-81.68583,-80.86591,-81.04364,-83.44858,-81.55949000,-79.81345000,-82.3625,-82.72585,-82.0298,-83.12943,-81.57684,-79.81948,-84.54332,-79.42488,-81.55309,-83.51903,-84.12889,-83.86053,-81.2189,-84.16225,-85.68283,-83.60426,-80.76039,-83.57385,-80.88721,-80.60339,-82.12724,-83.25233,-82.3679,-83.14828,-83.84657,-80.6927,-81.76608,-81.77648,-82.1912,-84.50254000,-85.41454000,-84.90154,-84.13017,-82.52916,-82.79109,-81.53015,-84.49968000,-81.45992,-81.66291,-82.5492,-80.97581,-81.77878,-83.01112,-80.33257,-83.40964,-81.67711000,-83.91895,-83.17934,-81.41251,-82.85724,-81.18667,-83.01237000,-82.90786000,-83.17513,-83.10525,-78.73197,-80.48569000,-81.40833,-84.94136000,-82.22626,-82.13538,-81.14964,-84.25974000,-80.40366,-79.45465,-82.11501,-82.56249000,-84.60535,-81.45112,-82.95444,-84.11459,-78.51696,-82.62544,-80.10316,-81.78589000,-82.99332,-80.43571,-83.06314,-81.98611,-82.2171,-82.25131,-83.40905,-80.85356,-79.80054,-83.41363,-80.6347,-78.73885,-82.59756,-79.22751,-84.0340,-83.90464,-81.37724,-82.71452000,-91.34248,-84.27495,-80.26044,-80.20593,-78.73351,-80.18588,-83.35558,-78.93126,-81.82623,-81.10715,-78.95152,-80.95763,-80.50472,-82.48849,-83.17482,-83.36597,-76.1785,-82.57597,-80.74004,-79.51612,-81.59364,-78.27323,-84.13545,-81.06027,-84.51806000,-84.02165000,-75.51202,-77.2964,-81.26381,-79.10525,-79.05926,-79.59231,-83.97221000,-82.77615,-77.40617,-78.74127,-81.63565,-83.46625,-79.11138,-83.70714,-83.63406,-82.29653,-81.97722000,-82.52858000,-82.97829,-78.62401,-80.41734,-82.75848000,-84.26349000,-83.71062,-83.50182000,-78.94995,-79.27283,-84.49059,-84.09151,-82.74121000,-83.71891,-84.28033000,-84.65285,-85.57413,-84.64653,-82.22634,-80.57498000,-81.40334000,-83.80156,-83.27744,-83.88478,-84.24201000,-85.52794000,-84.81529,-82.04727000,-82.15304,-80.40741000,-84.54834,-86.10269000,-82.85386,-81.61255,-83.09777,-82.34537,-83.98492,-83.60504,-82.09097,-83.72391000,-83.54102,-81.88982,-84.55505,-86.16763000,-81.65104,-80.47743,-84.36986,-84.60365,-86.49129,-81.64578000,-85.07965000,-84.41965,-83.17696,-83.7404,-83.28398,-81.52824,-83.02532,-83.23997,-84.61891,-83.74595,-83.68121,-81.88114,-81.10561,-85.80524000,-80.14264,-79.40656,-81.82776000,-83.81927,-84.97892,-81.07008,-84.74083,-84.45491,-83.45129,-79.7682,-85.18889,-81.76464,-83.68256,-81.89388,-84.32883000,-86.1653,-82.14603,-83.02947,-82.95615,-86.67037,-86.28165,-82.62167,-85.74907,-84.59209,-85.86203,-85.42607,-85.0228,-84.69664,-85.11858,-84.44193,-85.05402,-81.22575,-82.53081,-82.99676,-84.15645,-84.73259,-84.84834,-84.43496,-83.2209,-83.22861,-83.8036,-85.09009,-84.64805,-86.47865,-85.74426,-82.7722,-83.71616,-81.86186,-83.034,-83.97081,-84.05442,-83.29015,-81.52464,-83.7817,-83.16319,-84.18288,-81.83807,-83.5687,-86.27602,-85.10304,-84.76952,-84.03665,-85.11179,-85.96267,-82.55546,-85.56553,-82.51566,-84.79247000,-85.31511,-84.04662,-84.81445,-85.27152,-86.02231,-85.53474,-83.47023,-84.55349,-87.00375,-85.99838000,-85.83151,-84.7281,-84.31361,-84.55255,-86.0408,-86.10077,-85.18402,-84.65192,-85.47913,-87.21236000,-84.10063,-84.14034000,-84.2061,-85.38467,-85.77752,-84.79943,-85.03975,-83.39683000,-86.56773,-86.78786000,-83.21605,-85.0476,-85.90221,-83.8727,-83.48474000,-85.96114,-86.99844000,-81.95306000,-84.39108,-84.21006,-84.48083,-83.56978,-85.24681,-86.40776,-84.08351000,-84.12257,-85.73921,-84.21853000,-84.46664,-82.65265,-82.99707,-85.14133000,-85.42075,-80.39644,-82.12474,-83.95782,-81.59781,-76.02449,-82.93015000,-83.06847000,-85.12099000,-82.78405,-84.46311,-81.41556,-81.14487,-81.84335000,-84.93874000,-84.62882,-80.10327000,-80.78696,-84.10034000,-79.56171,-83.372,-82.01801000,-85.65911000,-82.44633,-81.51297000,-82.14066000,-78.91421000,-82.54701000,-79.58726000,-81.72386000,-83.22577000,-81.7356,-80.7243,-82.95224000,-81.73299,-80.22118000,-84.12663,-80.93876000,-81.2393,-81.63094000,-79.9539,-83.15245,-82.27516000,-81.05757000,-79.22519000,-79.72045000,-82.54021000,-81.93138000,-83.65115000,-79.72321000,-84.42097000,-81.45939000,-84.18961,-83.80975000,-85.35639000,-84.20555,-82.91856000,-83.30026000,-80.10036,-85.22446,-82.21791,-82.09818000,-81.86969000,-80.48323,-79.49878,-79.00682000,-82.05647000,-82.96324000,-80.83737000,-81.55003000,-80.81383,-83.15324000,-85.18279000,-83.11308000,-81.84335000,-83.69769000,-84.37869000,-84.07086,-79.37109,-81.16309000,-82.80142000,-80.42937000,-82.83377,-81.65147,-83.47239,-85.33965,-82.78069,-81.85403000,-81.81837000,-81.51833000,-83.53967,-83.75661,-81.55521000,-80.79372000,-82.12099000,-83.69337,-82.29692,-83.60272,-79.72842,-85.52328,-83.50182000,-81.99984,-83.94022,-82.1741,-79.76309000,-84.21741,-83.15701,-85.56084000,-82.78031000,-82.64713000,-82.78049000,-85.44105000,-81.68746000,-82.05437000,-80.97708000,-80.11481000,-84.2376,-84.34906,-80.70456000,-82.37639,-81.8504,-80.18744000,-76.83735000,-80.64066000,-79.21537000,-82.65244000,-83.35456000,-80.26901,-81.17743,-77.54286000,-85.40493,-82.13686000,-81.65484000,-81.21678000,-81.58118000,-80.7766,-84.18571000,-80.1222,-79.67102,-81.72369000,-84.50372000,-82.87161,-79.67213000,-82.74297000,-78.14526,-83.60149,-76.55724000,-79.03877000,-83.33739000,-81.53678,-75.0976,-77.68028000,-81.21162,-78.68058000,-79.04243000,-78.8419,-78.41869000,-80.29171000,-78.79398,-80.74963000,-76.6989,-79.87443000,-83.06596,-80.50903000,-84.00032,-78.6182,-76.90724000,-81.44785000,-86.03356000,-80.33945000,-77.96985000,-83.35265000,-83.85649000,-84.08041000,-78.85683000,-83.19452,-82.30409,-82.75992,-83.92679,-82.45625000,-81.10071000,-83.07235000,-86.35423,-81.92165000,-84.17258,-83.82529,-83.44537,-87.13362,-83.40066000,-80.21865000,-79.62585000,-84.334,-86.46316000,-85.62461000,-85.78344,-83.92439000,-84.64372,-84.47929,-83.44698,-82.66818,-84.34099,-83.91623,-84.73647,-87.0459,-83.08698,-82.25768,-85.61243,-83.59761,-86.14996,-85.35075000,-87.15939,-82.21545,-81.38998,-84.42397000,-85.47473000,-85.02599000,-81.97661,-85.8835,-84.92885,-82.36958,-83.90848,-86.06729,-87.20312,-80.91466,-79.52501,-86.17555,-87.0162,-86.06758,-82.58562,-86.77572,-86.44173,-83.2863,-86.1618,-84.41367000,-86.16386000,-86.82231000,-87.99809000,-85.32829,-84.42365,-85.94176,-86.80782,-85.42493000,-81.82563,-84.68278,-85.2395,-86.05859,-86.57651,-83.84498,-87.71626,-84.7559,-88.14339,-86.25527,-85.0512,-84.15367,-86.04835000,-85.20463000,-85.76694,-84.27863,-84.63496,-86.50542000,-86.11736,-85.67249000,-85.89262000,-87.56957,-83.88225000,-87.70305,-83.97401,-84.51263,-86.01208,-86.94313,-84.7488,-84.02544,-87.43456,-84.34023,-85.50841,-83.88963,-83.30094,-84.68701,-85.00597,-84.55054,-85.96377,-86.16033,-86.58878,-88.49486,-88.11864000,-85.30149,-84.35775,-85.92588,-86.29475000,-85.84502,-84.61229,-86.08504,-85.28516,-85.47998000,-86.27658,-83.14036,-85.67306,-83.30161,-83.67192,-85.71371,-83.07623,-85.39664000,-86.37543,-85.70202,-83.6939,-84.82266,-83.95001,-86.2813,-85.85596000,-85.26884,-86.19117000,-84.75654,-86.28796000,-85.55946000,-83.15601,-81.5400,-86.07435,-85.94678,-82.61817,-84.83573000,-83.45086000,-84.55658,-85.18286,-82.59784,-83.92004,-86.20864,-86.20169000,-82.78768,-83.84412,-84.94216,-80.96465,-85.7219,-85.13849,-82.31554,-84.44588,-83.41438,-85.74578,-82.08305,-81.14882,-84.71206000,-84.59848,-83.58605,-84.45456,-81.69068,-80.51857,-81.03613,-83.44975,-82.95773,-79.46452,-85.20141,-86.69087,-84.97063,-81.97501,-82.57593,-84.78764,-82.90427,-81.66161,-81.52449,-82.62996,-83.34726,-84.04268,-84.30808,-82.20236,-81.00816,-83.37396,-83.33365,-85.84138,-82.2569,-84.55636000,-83.75087000,-85.44498,-83.29446000,-81.76719,-83.40643,-83.94405,-82.9348,-84.37908,-82.94097,-80.55406,-79.80175,-82.476,-80.7473,-82.61259,-79.81147,-81.94028,-84.66735,-83.11016,-82.48854,-83.12415,-83.75683,-85.60797,-79.47838000,-78.9022,-81.99429,-84.64758,-85.04261000,-80.75848000,-80.9088,-82.39529000,-83.25541,-76.94461,-82.93193,-80.75247000,-80.61331,-80.14252,-81.02311,-79.04527,-78.72629,-81.10103000,-80.0432,-81.30637,-80.42007000,-78.85453,-79.95392000,-82.36845000,-82.87376,-80.17993,-76.5333,-81.10856000,-79.80604,-80.84149,-79.28197000,-78.73411,-76.01853,-80.95398,-80.57377000,-79.77536000,-79.40668000,-75.47643000,-82.32888,-80.03893000,-79.93873000,-80.54388,-76.6422,-78.32442000,-81.18584,-77.6899,-82.13036000,-77.5088,-76.62422000,-83.33498000,-78.34753000,-78.58499000,-77.09535000,-81.99169000,-80.70988000,-82.48776000,-79.2590,-78.8152,-79.38734000,-83.05491000,-84.87486000,-85.43417000,-83.13717000,-80.41734000,-80.95573000,-79.1059,-80.23985000,-82.66171000,-82.47511000,-81.5487,-83.24689000,-83.80958000,-83.6699,-82.04487000,-79.52666000,-81.91283000,-87.41622000,-84.09566000,-84.02452000,-87.48445000,-82.35779000,-85.79794,-84.40543,-83.03096000,-80.34895000,-82.13284000,-83.4538,-83.3788,-85.45609000,-83.80724,-83.32307000,-85.45197,-84.66315000,-83.6016,-84.77541000,-83.6075,-84.91609000,-83.17806000,-82.56496,-82.66377,-85.70055000,-85.14462,-83.1758,-85.48734000,-95.82217000,-95.55451000,-97.44269000,-100.7816,-100.3668,-102.065,-101.9712,-104.3841,-103.8320,-104.2863,-104.6842,-105.1403,-107.8092,-107.6208,-107.0400,-107.1255,-106.3363,-108.7093,-109.4861,-108.9682,-108.7466,-109.8998,-110.4728,-111.3773,-111.2854,-111.3932,-110.3378,-111.2561,-111.0844,-112.9566,-113.7845,-112.9649,-114.2737,-115.5142,-115.0999,-115.9024,-115.3526,-115.5997,-116.2299,-116.3955,-116.5226,-118.4541,-118.7870,-116.2856,-117.5043,-116.7299,-121.2882,-121.0452,-120.5954,-120.3453,-121.0223,-120.1863,-120.7613,-122.5019,-122.4175,-122.6876,-119.4773,-121.1022,-123.0761,-119.5609,-120.3273,-121.5961,-120.6694,-122.7992,-121.8517,-121.2070,-117.4498,-121.3812,-122.4248,-120.4597,-121.7358,-118.0891,-122.1672,-119.5998,-119.4943,-121.3303,-120.768,-122.4309,-118.2340,
            -117.8386,-120.6528,-122.0652,-121.8025,-121.2239,-121.7128,-119.4347,-120.7488,-122.7522,-119.6089,-119.7671,-123.6636,-122.6037,-123.1343,-123.0169,-121.0013,-118.7074,-119.224,-116.975,-118.4865,-120.7163,-119.8181,-120.6083,-120.929,-119.1726,-121.6488,-120.296,-116.1966,-117.8809,-117.597,-120.6402,-118.1631,-113.5829,-117.0902,-117.8617,-115.735,-115.0634,-116.8931,-112.1725,-113.6154,-112.0266,-112.0029,-112.789,-112.4283,-112.4534,-112.5631,-111.2889,-109.5703,-111.52,-111.7169,-107.9733,-109.5163,-109.8569,-107.8838,-108.0343,-108.2085,-106.2729,-106.6786,-108.7404,-104.8785,-105.837,-107.3433,-104.6654,-104.6295,-104.1574,-103.9251,-103.1554,-102.3479,-104.3757,-102.4288,-99.394,-101.826,-100.1775,-98.28128,-98.46112,-97.05723,-94.76727,-91.55518,-90.88397,-80.34377,-81.96317,-82.61144,-82.99197,-83.35896,-80.71962,-80.6076,-80.63779,-81.19503,-81.51305,-81.6031,-79.71613,-78.06147,-81.81236,-82.56381,-83.3851,-83.38342,-82.26175,-81.14645,-79.60987,-82.22318,-80.51292,-82.06243,-81.46934,-82.61184,-80.78469,-79.99635,-83.36224000,-82.42212,-79.62027,-81.8627,-79.94202,-81.80084,-81.30466,-82.43071000,-83.18208,-82.40108000,-79.42848,-79.32803,-80.97694,-81.3252,-81.24565,-81.34746,-78.67323,-82.41066,-80.63464000,-80.05771,-79.48832,-80.86448,-79.92257,-81.01541,-79.39506,-82.64093,-81.07527,-80.90197,-80.81796000,-80.18736,-80.44603,-80.96303,-81.88312,-79.82822,-80.73386,-81.04243,-79.75216,-82.62304,-80.52251,-80.07914,-78.31169,-77.53055,-79.7288,-79.09451,-81.79759,-81.38021,-81.07053,-79.2337,-79.88133,-77.34837,-81.43407,-80.41149,-80.11584,-80.7252,-79.60276,-81.50291,-80.82076,-78.90665,-76.2782,-81.50107,-78.85043,-78.95072,-80.36711,-77.67312,-78.9528,-78.73115,-79.1209,-80.86732,-77.72243,-80.85606,-79.76302,-77.16671,-77.79665,-79.7608,-79.49883,-81.63023,-78.47053,-79.02702,-80.36317,-80.0631,-77.66062,-81.66471,-79.59715,-82.28264,-78.60825,-79.84917,-81.90285,-79.5027,-80.0403,-81.21218000,-81.16356,-82.5159,-82.44368000,-82.52396,-82.29194,-81.99984,-83.1519,-81.98676,-83.68891,-82.86613,-82.04094,-80.36454000,-83.84245,-81.95593,-83.48386,-84.07848,-79.82666,-82.38416,-80.63683,-80.48273,-82.7837,-77.87191,-82.66061,-83.85512,-84.30756,-81.46783,-80.39006,-79.26864,-82.93492,-80.34019,-83.9061,-82.2126,-79.98586,-78.27577,-80.01796,-85.66557,-79.88966,-83.62466,-83.11416,-82.56628,-79.57249,-84.80437,-83.36649,-83.36879,-84.76028,-84.44247,-83.21394,-79.86412,-81.17997,-84.00951,-80.57506,-83.45071,-80.7983,-82.74641,-81.08434,-79.14825,-81.92654,-81.40301,-81.68404,-81.15912000,-82.00233,-80.58517,-79.85942,-82.63413000,-82.21947,-81.83405,-83.64089000,-80.4815,-79.95438000,-82.8737,-80.66143,-82.07323,-83.09502,-83.10382,-82.13533,-78.21911,-80.46419,-81.87131000,-82.56212000,-81.7249,-81.77408,-80.00063,-79.05607,-80.09558,-80.0409,-78.83038,-78.3051,-79.9071,-79.16395,-79.41842,-77.65112,-77.35663,-80.82249,-81.11615,-82.91168,-80.35462,-82.17921000,-78.88263,-80.58939,-81.08563,-80.51924,-81.76678,-81.18547,-79.77451,-80.83406,-81.96432,-83.57486,-81.43714,-81.14919,-83.86432,-78.90242,-82.38231,-81.01048,-83.34035,-80.55919,-82.38575,-81.31252,-81.51851,-80.7421,-79.25015,-85.07957,-78.0173,-79.4688,-82.22604,-78.83055,-80.65958,-83.1293,-85.00342,-83.23405,-83.27498,-81.56548,-82.45635,-82.89104,-81.22247,-84.75056,-80.95309,-83.18086,-82.2037,-79.61353,-83.36025,-80.24588,-82.97668,-82.20048,-80.83453,-80.49203,-84.38837,-82.28419,-83.09774,-84.27692,-80.61808,-82.91579,-81.98494,-82.32706,-80.33368,-79.80206,-80.00879000,-83.33978,-80.74503,-82.3858,-83.77032,-82.71986,-78.96651,-81.01648000,-80.41673,-79.94351000,-80.83189000,-82.06609,-81.31585,-82.35831000,-80.07924,-81.95316,-84.10722,-81.03791000,-82.12141,-83.64661000,-81.03758,-80.05949000,-81.98907000,-79.46231,-78.29893,-82.91472,-77.4059,-79.81677,-78.41203,-82.74059,-80.05489,-79.4592,-81.99072000,-80.94769,-83.4340,-82.227,-79.84653,-81.95137,-78.45844,-79.81502,-80.02023,-82.9212,-82.12931,-83.54822,-80.47095,-81.18652,-79.42869,-79.93623,-82.69788000,-81.32333000,-81.52004000,-81.18921,-79.94118000,-80.70782,-82.17185,-80.60136000,-81.76617,-81.06046,-81.14838,-82.93889,-82.07042,-79.90087,-80.87617,-79.47929,-82.96025,-80.51629,-80.43958,-82.40372,-80.28921,-83.82282,-78.1396,-80.08174000,-81.36893,-83.24189,-80.8986,-83.93256,-82.91989,-83.05256,-79.61608,-78.65352,-78.785,-78.35718,-80.03471,-83.70506000,-84.87741,-81.0353,-80.93269000,-83.18763,-81.5011,-82.3359,-83.89666,-84.13763,-86.3638,-80.97295,-82.08179,-81.39101,-82.20049,-81.41626,-83.15505,-84.49298,-78.28019,-82.75871,-79.76205,-77.48107,-82.87576000,-80.99706,-78.99551,-80.5108,-82.10321,-81.8127,-81.07426,-82.11966,-81.47048,-81.6242,-84.48621,-78.5985,-82.55801,-78.81277,-78.48729,-83.32975,-80.28341,-83.7179,-78.76994,-81.21149,-82.71085,-82.37614,-79.80671,-80.16623,-81.80968,-81.19257,-82.50243,-84.60718,-78.5753,-80.85183,-82.8862,-80.82845,-81.78988,-82.22464,-79.26452,-81.82795,-79.99663,-82.22218,-79.51734,-81.41816,-82.42632,-83.14302,-85.05473,-84.24903,-82.9224,-85.00312,-85.52339,-84.21046,-81.30856,-83.09724,-85.36825,-83.94807,-80.43198,-84.4765,-82.54611,-82.61664,-86.24429,-83.55,-82.55199,-82.97153,-81.25337,-81.92309,-83.61902,-82.59573,-83.29213,-82.69188,-81.18782,-80.67197,-83.65858,-83.26701,-84.06534,-81.52908,-84.00207,-81.91372000,-80.09957,-84.35822,-85.59609000,-86.37112,-85.02187,-83.92932,-81.58899,-81.80338,-83.34761,-83.33517,-82.24054,-85.91026,-83.4108,-82.39474,-85.32349000,-85.29533,-80.52054,-85.26645,-81.93719,-80.77538,-80.03725,-82.5524,-85.4536,-81.79987,-83.05251,-84.21052,-85.17332,-83.94518,-82.12737,-84.55092,-87.30526,-87.30922000,-84.02979,-85.23608,-84.80803,-84.64419000,-85.47426000,-82.45304,-82.43664,-82.64179,-84.16673,-83.9615,-83.12318,-84.7439,-83.15276,-84.40225,-82.66331,-80.29401,-84.60207,-84.97764,-84.81302,-81.74522,-82.07513,-83.79975,-83.61202,-85.2132,-81.14449,-81.05099,-79.86163,-83.69673,-80.28914,-82.80708,-80.54101,-81.81165,-81.66743,-83.00903,-80.25555,-79.82055,-81.24581,-77.28317,-85.03314,-81.18842,-78.52762,-77.72608,-81.17581,-83.42632,-82.40592,-80.69794,-82.86433,-84.52438,-80.22914,-77.77719,-80.87772,-78.98969,-83.25295,-82.50786,-83.08328,-81.8063,-80.45639,-81.78076,-82.76079,-80.45189,-83.27684,-82.73507,-85.30946,-83.40661,-80.93317,-85.37192,-83.82736,-82.05453,-81.90504,-83.51003,-80.78078,-84.83832,-84.65488,-85.13432,-84.22667,-85.97539,-86.991,-80.3672,-85.09819,-83.06866,-85.86301,-85.29797,-85.22181,-82.8798,-84.11421,-85.53893,-84.75142,-85.17867,-85.53506000,-82.95228,-86.08966000,-84.07388,-83.30542000,-84.16045,-85.72024000,-85.40948,-81.63506,-84.16318,-83.56625,-85.55399000,-84.62607,-84.51234,-82.25163,-82.35216000,-81.59488,-84.1228,-84.08681,-87.40475,-80.8731,-86.3533,-83.94592000,-80.76974,-84.49796,-85.28375,-84.37263,-81.77724000,-82.01892000,-81.86387,-83.19793,-81.82521000,-81.6671,-78.93518,-81.36456,-81.71474,-82.17185,-82.73698000,-78.09982,-80.03991,-80.68276,-81.80212,-81.55557,-80.26395,-83.61612,-79.53967,-81.42156,-81.05756000,-82.3774,-79.59509,-81.06881,-80.60146,-81.68583,-80.86591,-81.04364,-83.44858,-81.55949000,-79.81345000,-82.3625,-82.72585,-82.0298,-83.12943,-81.57684,-79.81948,-84.54332,-79.42488,-81.55309,-83.51903,-84.12889,-83.86053,-81.2189,-84.16225,-85.68283,-83.60426,-80.76039,-83.57385,-80.88721,-80.60339,-82.12724,-83.25233,-82.3679,-83.14828,-83.84657,-80.6927,-81.76608,-81.77648,-82.1912,-84.50254000,-85.41454000,-84.90154,-84.13017,-82.52916,-82.79109,-81.53015,-84.49968000,-81.45992,-81.66291,-82.5492,-80.97581,-81.77878,-83.01112,-80.33257,-83.40964,-81.67711000,-83.91895,-83.17934,-81.41251,-82.85724,-81.18667,-83.01237000,-82.90786000,-83.17513,-83.10525,-78.73197,-80.48569000,-81.40833,-84.94136000,-82.22626,-82.13538,-81.14964,-84.25974000,-80.40366,-79.45465,-82.11501,-82.56249000,-84.60535,-81.45112,-82.95444,-84.11459,-78.51696,-82.62544,-80.10316,-81.78589000,-82.99332,-80.43571,-83.06314,-81.98611,-82.2171,-82.25131,-83.40905,-80.85356,-79.80054,-83.41363,-80.6347,-78.73885,-82.59756,-79.22751,-84.0340,-83.90464,-81.37724,-82.71452000,-91.34248,-84.27495,-80.26044,-80.20593,-78.73351,-80.18588,-83.35558,-78.93126,-81.82623,-81.10715,-78.95152,-80.95763,-80.50472,-82.48849,-83.17482,-83.36597,-76.1785,-82.57597,-80.74004,-79.51612,-81.59364,-78.27323,-84.13545,-81.06027,-84.51806000,-84.02165000,-75.51202,-77.2964,-81.26381,-79.10525,-79.05926,-79.59231,-83.97221000,-82.77615,-77.40617,-78.74127,-81.63565,-83.46625,-79.11138,-83.70714,-83.63406,-82.29653,-81.97722000,-82.52858000,-82.97829,-78.62401,-80.41734,-82.75848000,-84.26349000,-83.71062,-83.50182000,-78.94995,-79.27283,-84.49059,-84.09151,-82.74121000,-83.71891,-84.28033000,-84.65285,-85.57413,-84.64653,-82.22634,-80.57498000,-81.40334000,-83.80156,-83.27744,-83.88478,-84.24201000,-85.52794000,-84.81529,-82.04727000,-82.15304,-80.40741000,-84.54834,-86.10269000,-82.85386,-81.61255,-83.09777,-82.34537,-83.98492,-83.60504,-82.09097,-83.72391000,-83.54102,-81.88982,-84.55505,-86.16763000,-81.65104,-80.47743,-84.36986,-84.60365,-86.49129,-81.64578000,-85.07965000,-84.41965,-83.17696,-83.7404,-83.28398,-81.52824,-83.02532,-83.23997,-84.61891,-83.74595,-83.68121,-81.88114,-81.10561,-85.80524000,-80.14264,-79.40656,-81.82776000,-83.81927,-84.97892,-81.07008,-84.74083,-84.45491,-83.45129,-79.7682,-85.18889,-81.76464,-83.68256,-81.89388,-84.32883000,-86.1653,-82.14603,-83.02947,-82.95615,-86.67037,-86.28165,-82.62167,-85.74907,-84.59209,-85.86203,-85.42607,-85.0228,-84.69664,-85.11858,-84.44193,-85.05402,-81.22575,-82.53081,-82.99676,-84.15645,-84.73259,-84.84834,-84.43496,-83.2209,-83.22861,-83.8036,-85.09009,-84.64805,-86.47865,-85.74426,-82.7722,-83.71616,-81.86186,-83.034,-83.97081,-84.05442,-83.29015,-81.52464,-83.7817,-83.16319,-84.18288,-81.83807,-83.5687,-86.27602,-85.10304,-84.76952,-84.03665,-85.11179,-85.96267,-82.55546,-85.56553,-82.51566,-84.79247000,-85.31511,-84.04662,-84.81445,-85.27152,-86.02231,-85.53474,-83.47023,-84.55349,-87.00375,-85.99838000,-85.83151,-84.7281,-84.31361,-84.55255,-86.0408,-86.10077,-85.18402,-84.65192,-85.47913,-87.21236000,-84.10063,-84.14034000,-84.2061,-85.38467,-85.77752,-84.79943,-85.03975,-83.39683000,-86.56773,-86.78786000,-83.21605,-85.0476,-85.90221,-83.8727,-83.48474000,-85.96114,-86.99844000,-81.95306000,-84.39108,-84.21006,-84.48083,-83.56978,-85.24681,-86.40776,-84.08351000,-84.12257,-85.73921,-84.21853000,-84.46664,-82.65265,-82.99707,-85.14133000,-85.42075,-80.39644,-82.12474,-83.95782,-81.59781,-76.02449,-82.93015000,-83.06847000,-85.12099000,-82.78405,-84.46311,-81.41556,-81.14487,-81.84335000,-84.93874000,-84.62882,-80.10327000,-80.78696,-84.10034000,-79.56171,-83.372,-82.01801000,-85.65911000,-82.44633,-81.51297000,-82.14066000,-78.91421000,-82.54701000,-79.58726000,-81.72386000,-83.22577000,-81.7356,-80.7243,-82.95224000,-81.73299,-80.22118000,-84.12663,-80.93876000,-81.2393,-81.63094000,-79.9539,-83.15245,-82.27516000,-81.05757000,-79.22519000,-79.72045000,-82.54021000,-81.93138000,-83.65115000,-79.72321000,-84.42097000,-81.45939000,-84.18961,-83.80975000,-85.35639000,-84.20555,-82.91856000,-83.30026000,-80.10036,-85.22446,-82.21791,-82.09818000,-81.86969000,-80.48323,-79.49878,-79.00682000,-82.05647000,-82.96324000,-80.83737000,-81.55003000,-80.81383,-83.15324000,-85.18279000,-83.11308000,-81.84335000,-83.69769000,-84.37869000,-84.07086,-79.37109,-81.16309000,-82.80142000,-80.42937000,-82.83377,-81.65147,-83.47239,-85.33965,-82.78069,-81.85403000,-81.81837000,-81.51833000,-83.53967,-83.75661,-81.55521000,-80.79372000,-82.12099000,-83.69337,-82.29692,-83.60272,-79.72842,-85.52328,-83.50182000,-81.99984,-83.94022,-82.1741,-79.76309000,-84.21741,-83.15701,-85.56084000,-82.78031000,-82.64713000,-82.78049000,-85.44105000,-81.68746000,-82.05437000,-80.97708000,-80.11481000,-84.2376,-84.34906,-80.70456000,-82.37639,-81.8504,-80.18744000,-76.83735000,-80.64066000,-79.21537000,-82.65244000,-83.35456000,-80.26901,-81.17743,-77.54286000,-85.40493,-82.13686000,-81.65484000,-81.21678000,-81.58118000,-80.7766,-84.18571000,-80.1222,-79.67102,-81.72369000,-84.50372000,-82.87161,-79.67213000,-82.74297000,-78.14526,-83.60149,-76.55724000,-79.03877000,-83.33739000,-81.53678,-75.0976,-77.68028000,-81.21162,-78.68058000,-79.04243000,-78.8419,-78.41869000,-80.29171000,-78.79398,-80.74963000,-76.6989,-79.87443000,-83.06596,-80.50903000,-84.00032,-78.6182,-76.90724000,-81.44785000,-86.03356000,-80.33945000,-77.96985000,-83.35265000,-83.85649000,-84.08041000,-78.85683000,-83.19452,-82.30409,-82.75992,-83.92679,-82.45625000,-81.10071000,-83.07235000,-86.35423,-81.92165000,-84.17258,-83.82529,-83.44537,-87.13362,-83.40066000,-80.21865000,-79.62585000,-84.334,-86.46316000,-85.62461000,-85.78344,-83.92439000,-84.64372,-84.47929,-83.44698,-82.66818,-84.34099,-83.91623,-84.73647,-87.0459,-83.08698,-82.25768,-85.61243,-83.59761,-86.14996,-85.35075000,-87.15939,-82.21545,-81.38998,-84.42397000,-85.47473000,-85.02599000,-81.97661,-85.8835,-84.92885,-82.36958,-83.90848,-86.06729,-87.20312,-80.91466,-79.52501,-86.17555,-87.0162,-86.06758,-82.58562,-86.77572,-86.44173,-83.2863,-86.1618,-84.41367000,-86.16386000,-86.82231000,-87.99809000,-85.32829,-84.42365,-85.94176,-86.80782,-85.42493000,-81.82563,-84.68278,-85.2395,-86.05859,-86.57651,-83.84498,-87.71626,-84.7559,-88.14339,-86.25527,-85.0512,-84.15367,-86.04835000,-85.20463000,-85.76694,-84.27863,-84.63496,-86.50542000,-86.11736,-85.67249000,-85.89262000,-87.56957,-83.88225000,-87.70305,-83.97401,-84.51263,-86.01208,-86.94313,-84.7488,-84.02544,-87.43456,-84.34023,-85.50841,-83.88963,-83.30094,-84.68701,-85.00597,-84.55054,-85.96377,-86.16033,-86.58878,-88.49486,-88.11864000,-85.30149,-84.35775,-85.92588,-86.29475000,-85.84502,-84.61229,-86.08504,-85.28516,-85.47998000,-86.27658,-83.14036,-85.67306,-83.30161,-83.67192,-85.71371,-83.07623,-85.39664000,-86.37543,-85.70202,-83.6939,-84.82266,-83.95001,-86.2813,-85.85596000,-85.26884,-86.19117000,-84.75654,-86.28796000,-85.55946000,-83.15601,-81.5400,-86.07435,-85.94678,-82.61817,-84.83573000,-83.45086000,-84.55658,-85.18286,-82.59784,-83.92004,-86.20864,-86.20169000,-82.78768,-83.84412,-84.94216,-80.96465,-85.7219,-85.13849,-82.31554,-84.44588,-83.41438,-85.74578,-82.08305,-81.14882,-84.71206000,-84.59848,-83.58605,-84.45456,-81.69068,-80.51857,-81.03613,-83.44975,-82.95773,-79.46452,-85.20141,-86.69087,-84.97063,-81.97501,-82.57593,-84.78764,-82.90427,-81.66161,-81.52449,-82.62996,-83.34726,-84.04268,-84.30808,-82.20236,-81.00816,-83.37396,-83.33365,-85.84138,-82.2569,-84.55636000,-83.75087000,-85.44498,-83.29446000,-81.76719,-83.40643,-83.94405,-82.9348,-84.37908,-82.94097,-80.55406,-79.80175,-82.476,-80.7473,-82.61259,-79.81147,-81.94028,-84.66735,-83.11016,-82.48854,-83.12415,-83.75683,-85.60797,-79.47838000,-78.9022,-81.99429,-84.64758,-85.04261000,-80.75848000,-80.9088,-82.39529000,-83.25541,-76.94461,-82.93193,-80.75247000,-80.61331,-80.14252,-81.02311,-79.04527,-78.72629,-81.10103000,-80.0432,-81.30637,-80.42007000,-78.85453,-79.95392000,-82.36845000,-82.87376,-80.17993,-76.5333,-81.10856000,-79.80604,-80.84149,-79.28197000,-78.73411,-76.01853,-80.95398,-80.57377000,-79.77536000,-79.40668000,-75.47643000,-82.32888,-80.03893000,-79.93873000,-80.54388,-76.6422,-78.32442000,-81.18584,-77.6899,-82.13036000,-77.5088,-76.62422000,-83.33498000,-78.34753000,-78.58499000,-77.09535000,-81.99169000,-80.70988000,-82.48776000,-79.2590,-78.8152,-79.38734000,-83.05491000,-84.87486000,-85.43417000,-83.13717000,-80.41734000,-80.95573000,-79.1059,-80.23985000,-82.66171000,-82.47511000,-81.5487,-83.24689000,-83.80958000,-83.6699,-82.04487000,-79.52666000,-81.91283000,-87.41622000,-84.09566000,-84.02452000,-87.48445000,-82.35779000,-85.79794,-84.40543,-83.03096000,-80.34895000,-82.13284000,-83.4538,-83.3788,-85.45609000,-83.80724,-83.32307000,-85.45197,-84.66315000,-83.6016,-84.77541000,-83.6075,-84.91609000,-83.17806000,-82.56496,-82.66377,-85.70055000,-85.14462,-83.1758,-85.48734000,-95.82217000,-95.55451000,-97.44269000,-100.7816,-100.3668,-102.065,-101.9712,-104.3841,-103.8320,-104.2863,-104.6842,-105.1403,-107.8092,-107.6208,-107.0400,-107.1255,-106.3363,-108.7093,-109.4861,-108.9682,-108.7466,-109.8998,-110.4728,-111.3773,-111.2854,-111.3932,-110.3378,-111.2561,-111.0844,-112.9566,-113.7845,-112.9649,-114.2737,-115.5142,-115.0999,-115.9024,-115.3526,-115.5997,-116.2299,-116.3955,-116.5226,-118.4541,-118.7870,-116.2856,-117.5043,-116.7299,-121.2882,-121.0452,-120.5954,-120.3453,-121.0223,-120.1863,-120.7613,-122.5019,-122.4175,-122.6876,-119.4773,-121.1022,-123.0761,-119.5609,-120.3273,-121.5961,-120.6694,-122.7992,-121.8517,-121.2070,-117.4498,-121.3812,-122.4248,-120.4597,-121.7358,-118.0891,-122.1672,-119.5998,-119.4943,-121.3303,-120.768,-122.4309,-118.2340,
            -117.8386,-120.6528,-122.0652,-121.8025,-121.2239,-121.7128,-119.4347,-120.7488,-122.7522,-119.6089,-119.7671,-123.6636,-122.6037,-123.1343,-123.0169,-121.0013,-118.7074,-119.224,-116.975,-118.4865,-120.7163,-119.8181,-120.6083,-120.929,-119.1726,-121.6488,-120.296,-116.1966,-117.8809,-117.597,-120.6402,-118.1631,-113.5829,-117.0902,-117.8617,-115.735,-115.0634,-116.8931,-112.1725,-113.6154,-112.0266,-112.0029,-112.789,-112.4283,-112.4534,-112.5631,-111.2889,-109.5703,-111.52,-111.7169,-107.9733,-109.5163,-109.8569,-107.8838,-108.0343,-108.2085,-106.2729,-106.6786,-108.7404,-104.8785,-105.837,-107.3433,-104.6654,-104.6295,-104.1574,-103.9251,-103.1554,-102.3479,-104.3757,-102.4288,-99.394,-101.826,-100.1775,-98.28128,-98.46112,-97.05723,-94.76727,-91.55518,-90.88397,-80.34377,-81.96317,-82.61144,-82.99197,-83.35896,-80.71962,-80.6076,-80.63779,-81.19503,-81.51305,-81.6031,-79.71613,-78.06147,-81.81236,-82.56381,-83.3851,-83.38342,-82.26175,-81.14645,-79.60987,-82.22318,-80.51292,-82.06243,-81.46934,-82.61184,-80.78469,-79.99635,-83.36224000,-82.42212,-79.62027,-81.8627,-79.94202,-81.80084,-81.30466,-82.43071000,-83.18208,-82.40108000,-79.42848,-79.32803,-80.97694,-81.3252,-81.24565,-81.34746,-78.67323,-82.41066,-80.63464000,-80.05771,-79.48832,-80.86448,-79.92257,-81.01541,-79.39506,-82.64093,-81.07527,-80.90197,-80.81796000,-80.18736,-80.44603,-80.96303,-81.88312,-79.82822,-80.73386,-81.04243,-79.75216,-82.62304,-80.52251,-80.07914,-78.31169,-77.53055,-79.7288,-79.09451,-81.79759,-81.38021,-81.07053,-79.2337,-79.88133,-77.34837,-81.43407,-80.41149,-80.11584,-80.7252,-79.60276,-81.50291,-80.82076,-78.90665,-76.2782,-81.50107,-78.85043,-78.95072,-80.36711,-77.67312,-78.9528,-78.73115,-79.1209,-80.86732,-77.72243,-80.85606,-79.76302,-77.16671,-77.79665,-79.7608,-79.49883,-81.63023,-78.47053,-79.02702,-80.36317,-80.0631,-77.66062,-81.66471,-79.59715,-82.28264,-78.60825,-79.84917,-81.90285,-79.5027,-80.0403,-81.21218000,-81.16356,-82.5159,-82.44368000,-82.52396,-82.29194,-81.99984,-83.1519,-81.98676,-83.68891,-82.86613,-82.04094,-80.36454000,-83.84245,-81.95593,-83.48386,-84.07848,-79.82666,-82.38416,-80.63683,-80.48273,-82.7837,-77.87191,-82.66061,-83.85512,-84.30756,-81.46783,-80.39006,-79.26864,-82.93492,-80.34019,-83.9061,-82.2126,-79.98586,-78.27577,-80.01796,-85.66557,-79.88966,-83.62466,-83.11416,-82.56628,-79.57249,-84.80437,-83.36649,-83.36879,-84.76028,-84.44247,-83.21394,-79.86412,-81.17997,-84.00951,-80.57506,-83.45071,-80.7983,-82.74641,-81.08434,-79.14825,-81.92654,-81.40301,-81.68404,-81.15912000,-82.00233,-80.58517,-79.85942,-82.63413000,-82.21947,-81.83405,-83.64089000,-80.4815,-79.95438000,-82.8737,-80.66143,-82.07323,-83.09502,-83.10382,-82.13533,-78.21911,-80.46419,-81.87131000,-82.56212000,-81.7249,-81.77408,-80.00063,-79.05607,-80.09558,-80.0409,-78.83038,-78.3051,-79.9071,-79.16395,-79.41842,-77.65112,-77.35663,-80.82249,-81.11615,-82.91168,-80.35462,-82.17921000,-78.88263,-80.58939,-81.08563,-80.51924,-81.76678,-81.18547,-79.77451,-80.83406,-81.96432,-83.57486,-81.43714,-81.14919,-83.86432,-78.90242,-82.38231,-81.01048,-83.34035,-80.55919,-82.38575,-81.31252,-81.51851,-80.7421,-79.25015,-85.07957,-78.0173,-79.4688,-82.22604,-78.83055,-80.65958,-83.1293,-85.00342,-83.23405,-83.27498,-81.56548,-82.45635,-82.89104,-81.22247,-84.75056,-80.95309,-83.18086,-82.2037,-79.61353,-83.36025,-80.24588,-82.97668,-82.20048,-80.83453,-80.49203,-84.38837,-82.28419,-83.09774,-84.27692,-80.61808,-82.91579,-81.98494,-82.32706,-80.33368,-79.80206,-80.00879000,-83.33978,-80.74503,-82.3858,-83.77032,-82.71986,-78.96651,-81.01648000,-80.41673,-79.94351000,-80.83189000,-82.06609,-81.31585,-82.35831000,-80.07924,-81.95316,-84.10722,-81.03791000,-82.12141,-83.64661000,-81.03758,-80.05949000,-81.98907000,-79.46231,-78.29893,-82.91472,-77.4059,-79.81677,-78.41203,-82.74059,-80.05489,-79.4592,-81.99072000,-80.94769,-83.4340,-82.227,-79.84653,-81.95137,-78.45844,-79.81502,-80.02023,-82.9212,-82.12931,-83.54822,-80.47095,-81.18652,-79.42869,-79.93623,-82.69788000,-81.32333000,-81.52004000,-81.18921,-79.94118000,-80.70782,-82.17185,-80.60136000,-81.76617,-81.06046,-81.14838,-82.93889,-82.07042,-79.90087,-80.87617,-79.47929,-82.96025,-80.51629,-80.43958,-82.40372,-80.28921,-83.82282,-78.1396,-80.08174000,-81.36893,-83.24189,-80.8986,-83.93256,-82.91989,-83.05256,-79.61608,-78.65352,-78.785,-78.35718,-80.03471,-83.70506000,-84.87741,-81.0353,-80.93269000,-83.18763,-81.5011,-82.3359,-83.89666,-84.13763,-86.3638,-80.97295,-82.08179,-81.39101,-82.20049,-81.41626,-83.15505,-84.49298,-78.28019,-82.75871,-79.76205,-77.48107,-82.87576000,-80.99706,-78.99551,-80.5108,-82.10321,-81.8127,-81.07426,-82.11966,-81.47048,-81.6242,-84.48621,-78.5985,-82.55801,-78.81277,-78.48729,-83.32975,-80.28341,-83.7179,-78.76994,-81.21149,-82.71085,-82.37614,-79.80671,-80.16623,-81.80968,-81.19257,-82.50243,-84.60718,-78.5753,-80.85183,-82.8862,-80.82845,-81.78988,-82.22464,-79.26452,-81.82795,-79.99663,-82.22218,-79.51734,-81.41816,-82.42632,-83.14302,-85.05473,-84.24903,-82.9224,-85.00312,-85.52339,-84.21046,-81.30856,-83.09724,-85.36825,-83.94807,-80.43198,-84.4765,-82.54611,-82.61664,-86.24429,-83.55,-82.55199,-82.97153,-81.25337,-81.92309,-83.61902,-82.59573,-83.29213,-82.69188,-81.18782,-80.67197,-83.65858,-83.26701,-84.06534,-81.52908,-84.00207,-81.91372000,-80.09957,-84.35822,-85.59609000,-86.37112,-85.02187,-83.92932,-81.58899,-81.80338,-83.34761,-83.33517,-82.24054,-85.91026,-83.4108,-82.39474,-85.32349000,-85.29533,-80.52054,-85.26645,-81.93719,-80.77538,-80.03725,-82.5524,-85.4536,-81.79987,-83.05251,-84.21052,-85.17332,-83.94518,-82.12737,-84.55092,-87.30526,-87.30922000,-84.02979,-85.23608,-84.80803,-84.64419000,-85.47426000,-82.45304,-82.43664,-82.64179,-84.16673,-83.9615,-83.12318,-84.7439,-83.15276,-84.40225,-82.66331,-80.29401,-84.60207,-84.97764,-84.81302,-81.74522,-82.07513,-83.79975,-83.61202,-85.2132,-81.14449,-81.05099,-79.86163,-83.69673,-80.28914,-82.80708,-80.54101,-81.81165,-81.66743,-83.00903,-80.25555,-79.82055,-81.24581,-77.28317,-85.03314,-81.18842,-78.52762,-77.72608,-81.17581,-83.42632,-82.40592,-80.69794,-82.86433,-84.52438,-80.22914,-77.77719,-80.87772,-78.98969,-83.25295,-82.50786,-83.08328,-81.8063,-80.45639,-81.78076,-82.76079,-80.45189,-83.27684,-82.73507,-85.30946,-83.40661,-80.93317,-85.37192,-83.82736,-82.05453,-81.90504,-83.51003,-80.78078,-84.83832,-84.65488,-85.13432,-84.22667,-85.97539,-86.991,-80.3672,-85.09819,-83.06866,-85.86301,-85.29797,-85.22181,-82.8798,-84.11421,-85.53893,-84.75142,-85.17867,-85.53506000,-82.95228,-86.08966000,-84.07388,-83.30542000,-84.16045,-85.72024000,-85.40948,-81.63506,-84.16318,-83.56625,-85.55399000,-84.62607,-84.51234,-82.25163,-82.35216000,-81.59488,-84.1228,-84.08681,-87.40475,-80.8731,-86.3533,-83.94592000,-80.76974,-84.49796,-85.28375,-84.37263,-81.77724000,-82.01892000,-81.86387,-83.19793,-81.82521000,-81.6671,-78.93518,-81.36456,-81.71474,-82.17185,-82.73698000,-78.09982,-80.03991,-80.68276,-81.80212,-81.55557,-80.26395,-83.61612,-79.53967,-81.42156,-81.05756000,-82.3774,-79.59509,-81.06881,-80.60146,-81.68583,-80.86591,-81.04364,-83.44858,-81.55949000,-79.81345000,-82.3625,-82.72585,-82.0298,-83.12943,-81.57684,-79.81948,-84.54332,-79.42488,-81.55309,-83.51903,-84.12889,-83.86053,-81.2189,-84.16225,-85.68283,-83.60426,-80.76039,-83.57385,-80.88721,-80.60339,-82.12724,-83.25233,-82.3679,-83.14828,-83.84657,-80.6927,-81.76608,-81.77648,-82.1912,-84.50254000,-85.41454000,-84.90154,-84.13017,-82.52916,-82.79109,-81.53015,-84.49968000,-81.45992,-81.66291,-82.5492,-80.97581,-81.77878,-83.01112,-80.33257,-83.40964,-81.67711000,-83.91895,-83.17934,-81.41251,-82.85724,-81.18667,-83.01237000,-82.90786000,-83.17513,-83.10525,-78.73197,-80.48569000,-81.40833,-84.94136000,-82.22626,-82.13538,-81.14964,-84.25974000,-80.40366,-79.45465,-82.11501,-82.56249000,-84.60535,-81.45112,-82.95444,-84.11459,-78.51696,-82.62544,-80.10316,-81.78589000,-82.99332,-80.43571,-83.06314,-81.98611,-82.2171,-82.25131,-83.40905,-80.85356,-79.80054,-83.41363,-80.6347,-78.73885,-82.59756,-79.22751,-84.0340,-83.90464,-81.37724,-82.71452000,-91.34248,-84.27495,-80.26044,-80.20593,-78.73351,-80.18588,-83.35558,-78.93126,-81.82623,-81.10715,-78.95152,-80.95763,-80.50472,-82.48849,-83.17482,-83.36597,-76.1785,-82.57597,-80.74004,-79.51612,-81.59364,-78.27323,-84.13545,-81.06027,-84.51806000,-84.02165000,-75.51202,-77.2964,-81.26381,-79.10525,-79.05926,-79.59231,-83.97221000,-82.77615,-77.40617,-78.74127,-81.63565,-83.46625,-79.11138,-83.70714,-83.63406,-82.29653,-81.97722000,-82.52858000,-82.97829,-78.62401,-80.41734,-82.75848000,-84.26349000,-83.71062,-83.50182000,-78.94995,-79.27283,-84.49059,-84.09151,-82.74121000,-83.71891,-84.28033000,-84.65285,-85.57413,-84.64653,-82.22634,-80.57498000,-81.40334000,-83.80156,-83.27744,-83.88478,-84.24201000,-85.52794000,-84.81529,-82.04727000,-82.15304,-80.40741000,-84.54834,-86.10269000,-82.85386,-81.61255,-83.09777,-82.34537,-83.98492,-83.60504,-82.09097,-83.72391000,-83.54102,-81.88982,-84.55505,-86.16763000,-81.65104,-80.47743,-84.36986,-84.60365,-86.49129,-81.64578000,-85.07965000,-84.41965,-83.17696,-83.7404,-83.28398,-81.52824,-83.02532,-83.23997,-84.61891,-83.74595,-83.68121,-81.88114,-81.10561,-85.80524000,-80.14264,-79.40656,-81.82776000,-83.81927,-84.97892,-81.07008,-84.74083,-84.45491,-83.45129,-79.7682,-85.18889,-81.76464,-83.68256,-81.89388,-84.32883000,-86.1653,-82.14603,-83.02947,-82.95615,-86.67037,-86.28165,-82.62167,-85.74907,-84.59209,-85.86203,-85.42607,-85.0228,-84.69664,-85.11858,-84.44193,-85.05402,-81.22575,-82.53081,-82.99676,-84.15645,-84.73259,-84.84834,-84.43496,-83.2209,-83.22861,-83.8036,-85.09009,-84.64805,-86.47865,-85.74426,-82.7722,-83.71616,-81.86186,-83.034,-83.97081,-84.05442,-83.29015,-81.52464,-83.7817,-83.16319,-84.18288,-81.83807,-83.5687,-86.27602,-85.10304,-84.76952,-84.03665,-85.11179,-85.96267,-82.55546,-85.56553,-82.51566,-84.79247000,-85.31511,-84.04662,-84.81445,-85.27152,-86.02231,-85.53474,-83.47023,-84.55349,-87.00375,-85.99838000,-85.83151,-84.7281,-84.31361,-84.55255,-86.0408,-86.10077,-85.18402,-84.65192,-85.47913,-87.21236000,-84.10063,-84.14034000,-84.2061,-85.38467,-85.77752,-84.79943,-85.03975,-83.39683000,-86.56773,-86.78786000,-83.21605,-85.0476,-85.90221,-83.8727,-83.48474000,-85.96114,-86.99844000,-81.95306000,-84.39108,-84.21006,-84.48083,-83.56978,-85.24681,-86.40776,-84.08351000,-84.12257,-85.73921,-84.21853000,-84.46664,-82.65265,-82.99707,-85.14133000,-85.42075,-80.39644,-82.12474,-83.95782,-81.59781,-76.02449,-82.93015000,-83.06847000,-85.12099000,-82.78405,-84.46311,-81.41556,-81.14487,-81.84335000,-84.93874000,-84.62882,-80.10327000,-80.78696,-84.10034000,-79.56171,-83.372,-82.01801000,-85.65911000,-82.44633,-81.51297000,-82.14066000,-78.91421000,-82.54701000,-79.58726000,-81.72386000,-83.22577000,-81.7356,-80.7243,-82.95224000,-81.73299,-80.22118000,-84.12663,-80.93876000,-81.2393,-81.63094000,-79.9539,-83.15245,-82.27516000,-81.05757000,-79.22519000,-79.72045000,-82.54021000,-81.93138000,-83.65115000,-79.72321000,-84.42097000,-81.45939000,-84.18961,-83.80975000,-85.35639000,-84.20555,-82.91856000,-83.30026000,-80.10036,-85.22446,-82.21791,-82.09818000,-81.86969000,-80.48323,-79.49878,-79.00682000,-82.05647000,-82.96324000,-80.83737000,-81.55003000,-80.81383,-83.15324000,-85.18279000,-83.11308000,-81.84335000,-83.69769000,-84.37869000,-84.07086,-79.37109,-81.16309000,-82.80142000,-80.42937000,-82.83377,-81.65147,-83.47239,-85.33965,-82.78069,-81.85403000,-81.81837000,-81.51833000,-83.53967,-83.75661,-81.55521000,-80.79372000,-82.12099000,-83.69337,-82.29692,-83.60272,-79.72842,-85.52328,-83.50182000,-81.99984,-83.94022,-82.1741,-79.76309000,-84.21741,-83.15701,-85.56084000,-82.78031000,-82.64713000,-82.78049000,-85.44105000,-81.68746000,-82.05437000,-80.97708000,-80.11481000,-84.2376,-84.34906,-80.70456000,-82.37639,-81.8504,-80.18744000,-76.83735000,-80.64066000,-79.21537000,-82.65244000,-83.35456000,-80.26901,-81.17743,-77.54286000,-85.40493,-82.13686000,-81.65484000,-81.21678000,-81.58118000,-80.7766,-84.18571000,-80.1222,-79.67102,-81.72369000,-84.50372000,-82.87161,-79.67213000,-82.74297000,-78.14526,-83.60149,-76.55724000,-79.03877000,-83.33739000,-81.53678,-75.0976,-77.68028000,-81.21162,-78.68058000,-79.04243000,-78.8419,-78.41869000,-80.29171000,-78.79398,-80.74963000,-76.6989,-79.87443000,-83.06596,-80.50903000,-84.00032,-78.6182,-76.90724000,-81.44785000,-86.03356000,-80.33945000,-77.96985000,-83.35265000,-83.85649000,-84.08041000,-78.85683000,-83.19452,-82.30409,-82.75992,-83.92679,-82.45625000,-81.10071000,-83.07235000,-86.35423,-81.92165000,-84.17258,-83.82529,-83.44537,-87.13362,-83.40066000,-80.21865000,-79.62585000,-84.334,-86.46316000,-85.62461000,-85.78344,-83.92439000,-84.64372,-84.47929,-83.44698,-82.66818,-84.34099,-83.91623,-84.73647,-87.0459,-83.08698,-82.25768,-85.61243,-83.59761,-86.14996,-85.35075000,-87.15939,-82.21545,-81.38998,-84.42397000,-85.47473000,-85.02599000,-81.97661,-85.8835,-84.92885,-82.36958,-83.90848,-86.06729,-87.20312,-80.91466,-79.52501,-86.17555,-87.0162,-86.06758,-82.58562,-86.77572,-86.44173,-83.2863,-86.1618,-84.41367000,-86.16386000,-86.82231000,-87.99809000,-85.32829,-84.42365,-85.94176,-86.80782,-85.42493000,-81.82563,-84.68278,-85.2395,-86.05859,-86.57651,-83.84498,-87.71626,-84.7559,-88.14339,-86.25527,-85.0512,-84.15367,-86.04835000,-85.20463000,-85.76694,-84.27863,-84.63496,-86.50542000,-86.11736,-85.67249000,-85.89262000,-87.56957,-83.88225000,-87.70305,-83.97401,-84.51263,-86.01208,-86.94313,-84.7488,-84.02544,-87.43456,-84.34023,-85.50841,-83.88963,-83.30094,-84.68701,-85.00597,-84.55054,-85.96377,-86.16033,-86.58878,-88.49486,-88.11864000,-85.30149,-84.35775,-85.92588,-86.29475000,-85.84502,-84.61229,-86.08504,-85.28516,-85.47998000,-86.27658,-83.14036,-85.67306,-83.30161,-83.67192,-85.71371,-83.07623,-85.39664000,-86.37543,-85.70202,-83.6939,-84.82266,-83.95001,-86.2813,-85.85596000,-85.26884,-86.19117000,-84.75654,-86.28796000,-85.55946000,-83.15601,-81.5400,-86.07435,-85.94678,-82.61817,-84.83573000,-83.45086000,-84.55658,-85.18286,-82.59784,-83.92004,-86.20864,-86.20169000,-82.78768,-83.84412,-84.94216,-80.96465,-85.7219,-85.13849,-82.31554,-84.44588,-83.41438,-85.74578,-82.08305,-81.14882,-84.71206000,-84.59848,-83.58605,-84.45456,-81.69068,-80.51857,-81.03613,-83.44975,-82.95773,-79.46452,-85.20141,-86.69087,-84.97063,-81.97501,-82.57593,-84.78764,-82.90427,-81.66161,-81.52449,-82.62996,-83.34726,-84.04268,-84.30808,-82.20236,-81.00816,-83.37396,-83.33365,-85.84138,-82.2569,-84.55636000,-83.75087000,-85.44498,-83.29446000,-81.76719,-83.40643,-83.94405,-82.9348,-84.37908,-82.94097,-80.55406,-79.80175,-82.476,-80.7473,-82.61259,-79.81147,-81.94028,-84.66735,-83.11016,-82.48854,-83.12415,-83.75683,-85.60797,-79.47838000,-78.9022,-81.99429,-84.64758,-85.04261000,-80.75848000,-80.9088,-82.39529000,-83.25541,-76.94461,-82.93193,-80.75247000,-80.61331,-80.14252,-81.02311,-79.04527,-78.72629,-81.10103000,-80.0432,-81.30637,-80.42007000,-78.85453,-79.95392000,-82.36845000,-82.87376,-80.17993,-76.5333,-81.10856000,-79.80604,-80.84149,-79.28197000,-78.73411,-76.01853,-80.95398,-80.57377000,-79.77536000,-79.40668000,-75.47643000,-82.32888,-80.03893000,-79.93873000,-80.54388,-76.6422,-78.32442000,-81.18584,-77.6899,-82.13036000,-77.5088,-76.62422000,-83.33498000,-78.34753000,-78.58499000,-77.09535000,-81.99169000,-80.70988000,-82.48776000,-79.2590,-78.8152,-79.38734000,-83.05491000,-84.87486000,-85.43417000,-83.13717000,-80.41734000,-80.95573000,-79.1059,-80.23985000,-82.66171000,-82.47511000,-81.5487,-83.24689000,-83.80958000,-83.6699,-82.04487000,-79.52666000,-81.91283000,-87.41622000,-84.09566000,-84.02452000,-87.48445000,-82.35779000,-85.79794,-84.40543,-83.03096000,-80.34895000,-82.13284000,-83.4538,-83.3788,-85.45609000,-83.80724,-83.32307000,-85.45197,-84.66315000,-83.6016,-84.77541000,-83.6075,-84.91609000,-83.17806000,-82.56496,-82.66377,-85.70055000,-85.14462,-83.1758,-85.48734000,-95.82217000,-95.55451000,-97.44269000,-100.7816,-100.3668,-102.065,-101.9712,-104.3841,-103.8320,-104.2863,-104.6842,-105.1403,-107.8092,-107.6208,-107.0400,-107.1255,-106.3363,-108.7093,-109.4861,-108.9682,-108.7466,-109.8998,-110.4728,-111.3773,-111.2854,-111.3932,-110.3378,-111.2561,-111.0844,-112.9566,-113.7845,-112.9649,-114.2737,-115.5142,-115.0999,-115.9024,-115.3526,-115.5997,-116.2299,-116.3955,-116.5226,-118.4541,-118.7870,-116.2856,-117.5043,-116.7299,-121.2882,-121.0452,-120.5954,-120.3453,-121.0223,-120.1863,-120.7613,-122.5019,-122.4175,-122.6876,-119.4773,-121.1022,-123.0761,-119.5609,-120.3273,-121.5961,-120.6694,-122.7992,-121.8517,-121.2070,-117.4498,-121.3812,-122.4248,-120.4597,-121.7358,-118.0891,-122.1672,-119.5998,-119.4943,-121.3303,-120.768,-122.4309,-118.2340,
            -117.8386,-120.6528,-122.0652,-121.8025,-121.2239,-121.7128,-119.4347,-120.7488,-122.7522,-119.6089,-119.7671,-123.6636,-122.6037,-123.1343,-123.0169,-121.0013,-118.7074,-119.224,-116.975,-118.4865,-120.7163,-119.8181,-120.6083,-120.929,-119.1726,-121.6488,-120.296,-116.1966,-117.8809,-117.597,-120.6402,-118.1631,-113.5829,-117.0902,-117.8617,-115.735,-115.0634,-116.8931,-112.1725,-113.6154,-112.0266,-112.0029,-112.789,-112.4283,-112.4534,-112.5631,-111.2889,-109.5703,-111.52,-111.7169,-107.9733,-109.5163,-109.8569,-107.8838,-108.0343,-108.2085,-106.2729,-106.6786,-108.7404,-104.8785,-105.837,-107.3433,-104.6654,-104.6295,-104.1574,-103.9251,-103.1554,-102.3479,-104.3757,-102.4288,-99.394,-101.826,-100.1775,-98.28128,-98.46112,-97.05723,-94.76727,-91.55518,-90.88397,-80.34377,-81.96317,-82.61144,-82.99197,-83.35896,-80.71962,-80.6076,-80.63779,-81.19503,-81.51305,-81.6031,-79.71613,-78.06147,-81.81236,-82.56381,-83.3851,-83.38342,-82.26175,-81.14645,-79.60987,-82.22318,-80.51292,-82.06243,-81.46934,-82.61184,-80.78469,-79.99635,-83.36224000,-82.42212,-79.62027,-81.8627,-79.94202,-81.80084,-81.30466,-82.43071000,-83.18208,-82.40108000,-79.42848,-79.32803,-80.97694,-81.3252,-81.24565,-81.34746,-78.67323,-82.41066,-80.63464000,-80.05771,-79.48832,-80.86448,-79.92257,-81.01541,-79.39506,-82.64093,-81.07527,-80.90197,-80.81796000,-80.18736,-80.44603,-80.96303,-81.88312,-79.82822,-80.73386,-81.04243,-79.75216,-82.62304,-80.52251,-80.07914,-78.31169,-77.53055,-79.7288,-79.09451,-81.79759,-81.38021,-81.07053,-79.2337,-79.88133,-77.34837,-81.43407,-80.41149,-80.11584,-80.7252,-79.60276,-81.50291,-80.82076,-78.90665,-76.2782,-81.50107,-78.85043,-78.95072,-80.36711,-77.67312,-78.9528,-78.73115,-79.1209,-80.86732,-77.72243,-80.85606,-79.76302,-77.16671,-77.79665,-79.7608,-79.49883,-81.63023,-78.47053,-79.02702,-80.36317,-80.0631,-77.66062,-81.66471,-79.59715,-82.28264,-78.60825,-79.84917,-81.90285,-79.5027,-80.0403,-81.21218000,-81.16356,-82.5159,-82.44368000,-82.52396,-82.29194,-81.99984,-83.1519,-81.98676,-83.68891,-82.86613,-82.04094,-80.36454000,-83.84245,-81.95593,-83.48386,-84.07848,-79.82666,-82.38416,-80.63683,-80.48273,-82.7837,-77.87191,-82.66061,-83.85512,-84.30756,-81.46783,-80.39006,-79.26864,-82.93492,-80.34019,-83.9061,-82.2126,-79.98586,-78.27577,-80.01796,-85.66557,-79.88966,-83.62466,-83.11416,-82.56628,-79.57249,-84.80437,-83.36649,-83.36879,-84.76028,-84.44247,-83.21394,-79.86412,-81.17997,-84.00951,-80.57506,-83.45071,-80.7983,-82.74641,-81.08434,-79.14825,-81.92654,-81.40301,-81.68404,-81.15912000,-82.00233,-80.58517,-79.85942,-82.63413000,-82.21947,-81.83405,-83.64089000,-80.4815,-79.95438000,-82.8737,-80.66143,-82.07323,-83.09502,-83.10382,-82.13533,-78.21911,-80.46419,-81.87131000,-82.56212000,-81.7249,-81.77408,-80.00063,-79.05607,-80.09558,-80.0409,-78.83038,-78.3051,-79.9071,-79.16395,-79.41842,-77.65112,-77.35663,-80.82249,-81.11615,-82.91168,-80.35462,-82.17921000,-78.88263,-80.58939,-81.08563,-80.51924,-81.76678,-81.18547,-79.77451,-80.83406,-81.96432,-83.57486,-81.43714,-81.14919,-83.86432,-78.90242,-82.38231,-81.01048,-83.34035,-80.55919,-82.38575,-81.31252,-81.51851,-80.7421,-79.25015,-85.07957,-78.0173,-79.4688,-82.22604,-78.83055,-80.65958,-83.1293,-85.00342,-83.23405,-83.27498,-81.56548,-82.45635,-82.89104,-81.22247,-84.75056,-80.95309,-83.18086,-82.2037,-79.61353,-83.36025,-80.24588,-82.97668,-82.20048,-80.83453,-80.49203,-84.38837,-82.28419,-83.09774,-84.27692,-80.61808,-82.91579,-81.98494,-82.32706,-80.33368,-79.80206,-80.00879000,-83.33978,-80.74503,-82.3858,-83.77032,-82.71986,-78.96651,-81.01648000,-80.41673,-79.94351000,-80.83189000,-82.06609,-81.31585,-82.35831000,-80.07924,-81.95316,-84.10722,-81.03791000,-82.12141,-83.64661000,-81.03758,-80.05949000,-81.98907000,-79.46231,-78.29893,-82.91472,-77.4059,-79.81677,-78.41203,-82.74059,-80.05489,-79.4592,-81.99072000,-80.94769,-83.4340,-82.227,-79.84653,-81.95137,-78.45844,-79.81502,-80.02023,-82.9212,-82.12931,-83.54822,-80.47095,-81.18652,-79.42869,-79.93623,-82.69788000,-81.32333000,-81.52004000,-81.18921,-79.94118000,-80.70782,-82.17185,-80.60136000,-81.76617,-81.06046,-81.14838,-82.93889,-82.07042,-79.90087,-80.87617,-79.47929,-82.96025,-80.51629,-80.43958,-82.40372,-80.28921,-83.82282,-78.1396,-80.08174000,-81.36893,-83.24189,-80.8986,-83.93256,-82.91989,-83.05256,-79.61608,-78.65352,-78.785,-78.35718,-80.03471,-83.70506000,-84.87741,-81.0353,-80.93269000,-83.18763,-81.5011,-82.3359,-83.89666,-84.13763,-86.3638,-80.97295,-82.08179,-81.39101,-82.20049,-81.41626,-83.15505,-84.49298,-78.28019,-82.75871,-79.76205,-77.48107,-82.87576000,-80.99706,-78.99551,-80.5108,-82.10321,-81.8127,-81.07426,-82.11966,-81.47048,-81.6242,-84.48621,-78.5985,-82.55801,-78.81277,-78.48729,-83.32975,-80.28341,-83.7179,-78.76994,-81.21149,-82.71085,-82.37614,-79.80671,-80.16623,-81.80968,-81.19257,-82.50243,-84.60718,-78.5753,-80.85183,-82.8862,-80.82845,-81.78988,-82.22464,-79.26452,-81.82795,-79.99663,-82.22218,-79.51734,-81.41816,-82.42632,-83.14302,-85.05473,-84.24903,-82.9224,-85.00312,-85.52339,-84.21046,-81.30856,-83.09724,-85.36825,-83.94807,-80.43198,-84.4765,-82.54611,-82.61664,-86.24429,-83.55,-82.55199,-82.97153,-81.25337,-81.92309,-83.61902,-82.59573,-83.29213,-82.69188,-81.18782,-80.67197,-83.65858,-83.26701,-84.06534,-81.52908,-84.00207,-81.91372000,-80.09957,-84.35822,-85.59609000,-86.37112,-85.02187,-83.92932,-81.58899,-81.80338,-83.34761,-83.33517,-82.24054,-85.91026,-83.4108,-82.39474,-85.32349000,-85.29533,-80.52054,-85.26645,-81.93719,-80.77538,-80.03725,-82.5524,-85.4536,-81.79987,-83.05251,-84.21052,-85.17332,-83.94518,-82.12737,-84.55092,-87.30526,-87.30922000,-84.02979,-85.23608,-84.80803,-84.64419000,-85.47426000,-82.45304,-82.43664,-82.64179,-84.16673,-83.9615,-83.12318,-84.7439,-83.15276,-84.40225,-82.66331,-80.29401,-84.60207,-84.97764,-84.81302,-81.74522,-82.07513,-83.79975,-83.61202,-85.2132,-81.14449,-81.05099,-79.86163,-83.69673,-80.28914,-82.80708,-80.54101,-81.81165,-81.66743,-83.00903,-80.25555,-79.82055,-81.24581,-77.28317,-85.03314,-81.18842,-78.52762,-77.72608,-81.17581,-83.42632,-82.40592,-80.69794,-82.86433,-84.52438,-80.22914,-77.77719,-80.87772,-78.98969,-83.25295,-82.50786,-83.08328,-81.8063,-80.45639,-81.78076,-82.76079,-80.45189,-83.27684,-82.73507,-85.30946,-83.40661,-80.93317,-85.37192,-83.82736,-82.05453,-81.90504,-83.51003,-80.78078,-84.83832,-84.65488,-85.13432,-84.22667,-85.97539,-86.991,-80.3672,-85.09819,-83.06866,-85.86301,-85.29797,-85.22181,-82.8798,-84.11421,-85.53893,-84.75142,-85.17867,-85.53506000,-82.95228,-86.08966000,-84.07388,-83.30542000,-84.16045,-85.72024000,-85.40948,-81.63506,-84.16318,-83.56625,-85.55399000,-84.62607,-84.51234,-82.25163,-82.35216000,-81.59488,-84.1228,-84.08681,-87.40475,-80.8731,-86.3533,-83.94592000,-80.76974,-84.49796,-85.28375,-84.37263,-81.77724000,-82.01892000,-81.86387,-83.19793,-81.82521000,-81.6671,-78.93518,-81.36456,-81.71474,-82.17185,-82.73698000,-78.09982,-80.03991,-80.68276,-81.80212,-81.55557,-80.26395,-83.61612,-79.53967,-81.42156,-81.05756000,-82.3774,-79.59509,-81.06881,-80.60146,-81.68583,-80.86591,-81.04364,-83.44858,-81.55949000,-79.81345000,-82.3625,-82.72585,-82.0298,-83.12943,-81.57684,-79.81948,-84.54332,-79.42488,-81.55309,-83.51903,-84.12889,-83.86053,-81.2189,-84.16225,-85.68283,-83.60426,-80.76039,-83.57385,-80.88721,-80.60339,-82.12724,-83.25233,-82.3679,-83.14828,-83.84657,-80.6927,-81.76608,-81.77648,-82.1912,-84.50254000,-85.41454000,-84.90154,-84.13017,-82.52916,-82.79109,-81.53015,-84.49968000,-81.45992,-81.66291,-82.5492,-80.97581,-81.77878,-83.01112,-80.33257,-83.40964,-81.67711000,-83.91895,-83.17934,-81.41251,-82.85724,-81.18667,-83.01237000,-82.90786000,-83.17513,-83.10525,-78.73197,-80.48569000,-81.40833,-84.94136000,-82.22626,-82.13538,-81.14964,-84.25974000,-80.40366,-79.45465,-82.11501,-82.56249000,-84.60535,-81.45112,-82.95444,-84.11459,-78.51696,-82.62544,-80.10316,-81.78589000,-82.99332,-80.43571,-83.06314,-81.98611,-82.2171,-82.25131,-83.40905,-80.85356,-79.80054,-83.41363,-80.6347,-78.73885,-82.59756,-79.22751,-84.0340,-83.90464,-81.37724,-82.71452000,-91.34248,-84.27495,-80.26044,-80.20593,-78.73351,-80.18588,-83.35558,-78.93126,-81.82623,-81.10715,-78.95152,-80.95763,-80.50472,-82.48849,-83.17482,-83.36597,-76.1785,-82.57597,-80.74004,-79.51612,-81.59364,-78.27323,-84.13545,-81.06027,-84.51806000,-84.02165000,-75.51202,-77.2964,-81.26381,-79.10525,-79.05926,-79.59231,-83.97221000,-82.77615,-77.40617,-78.74127,-81.63565,-83.46625,-79.11138,-83.70714,-83.63406,-82.29653,-81.97722000,-82.52858000,-82.97829,-78.62401,-80.41734,-82.75848000,-84.26349000,-83.71062,-83.50182000,-78.94995,-79.27283,-84.49059,-84.09151,-82.74121000,-83.71891,-84.28033000,-84.65285,-85.57413,-84.64653,-82.22634,-80.57498000,-81.40334000,-83.80156,-83.27744,-83.88478,-84.24201000,-85.52794000,-84.81529,-82.04727000,-82.15304,-80.40741000,-84.54834,-86.10269000,-82.85386,-81.61255,-83.09777,-82.34537,-83.98492,-83.60504,-82.09097,-83.72391000,-83.54102,-81.88982,-84.55505,-86.16763000,-81.65104,-80.47743,-84.36986,-84.60365,-86.49129,-81.64578000,-85.07965000,-84.41965,-83.17696,-83.7404,-83.28398,-81.52824,-83.02532,-83.23997,-84.61891,-83.74595,-83.68121,-81.88114,-81.10561,-85.80524000,-80.14264,-79.40656,-81.82776000,-83.81927,-84.97892,-81.07008,-84.74083,-84.45491,-83.45129,-79.7682,-85.18889,-81.76464,-83.68256,-81.89388,-84.32883000,-86.1653,-82.14603,-83.02947,-82.95615,-86.67037,-86.28165,-82.62167,-85.74907,-84.59209,-85.86203,-85.42607,-85.0228,-84.69664,-85.11858,-84.44193,-85.05402,-81.22575,-82.53081,-82.99676,-84.15645,-84.73259,-84.84834,-84.43496,-83.2209,-83.22861,-83.8036,-85.09009,-84.64805,-86.47865,-85.74426,-82.7722,-83.71616,-81.86186,-83.034,-83.97081,-84.05442,-83.29015,-81.52464,-83.7817,-83.16319,-84.18288,-81.83807,-83.5687,-86.27602,-85.10304,-84.76952,-84.03665,-85.11179,-85.96267,-82.55546,-85.56553,-82.51566,-84.79247000,-85.31511,-84.04662,-84.81445,-85.27152,-86.02231,-85.53474,-83.47023,-84.55349,-87.00375,-85.99838000,-85.83151,-84.7281,-84.31361,-84.55255,-86.0408,-86.10077,-85.18402,-84.65192,-85.47913,-87.21236000,-84.10063,-84.14034000,-84.2061,-85.38467,-85.77752,-84.79943,-85.03975,-83.39683000,-86.56773,-86.78786000,-83.21605,-85.0476,-85.90221,-83.8727,-83.48474000,-85.96114,-86.99844000,-81.95306000,-84.39108,-84.21006,-84.48083,-83.56978,-85.24681,-86.40776,-84.08351000,-84.12257,-85.73921,-84.21853000,-84.46664,-82.65265,-82.99707,-85.14133000,-85.42075,-80.39644,-82.12474,-83.95782,-81.59781,-76.02449,-82.93015000,-83.06847000,-85.12099000,-82.78405,-84.46311,-81.41556,-81.14487,-81.84335000,-84.93874000,-84.62882,-80.10327000,-80.78696,-84.10034000,-79.56171,-83.372,-82.01801000,-85.65911000,-82.44633,-81.51297000,-82.14066000,-78.91421000,-82.54701000,-79.58726000,-81.72386000,-83.22577000,-81.7356,-80.7243,-82.95224000,-81.73299,-80.22118000,-84.12663,-80.93876000,-81.2393,-81.63094000,-79.9539,-83.15245,-82.27516000,-81.05757000,-79.22519000,-79.72045000,-82.54021000,-81.93138000,-83.65115000,-79.72321000,-84.42097000,-81.45939000,-84.18961,-83.80975000,-85.35639000,-84.20555,-82.91856000,-83.30026000,-80.10036,-85.22446,-82.21791,-82.09818000,-81.86969000,-80.48323,-79.49878,-79.00682000,-82.05647000,-82.96324000,-80.83737000,-81.55003000,-80.81383,-83.15324000,-85.18279000,-83.11308000,-81.84335000,-83.69769000,-84.37869000,-84.07086,-79.37109,-81.16309000,-82.80142000,-80.42937000,-82.83377,-81.65147,-83.47239,-85.33965,-82.78069,-81.85403000,-81.81837000,-81.51833000,-83.53967,-83.75661,-81.55521000,-80.79372000,-82.12099000,-83.69337,-82.29692,-83.60272,-79.72842,-85.52328,-83.50182000,-81.99984,-83.94022,-82.1741,-79.76309000,-84.21741,-83.15701,-85.56084000,-82.78031000,-82.64713000,-82.78049000,-85.44105000,-81.68746000,-82.05437000,-80.97708000,-80.11481000,-84.2376,-84.34906,-80.70456000,-82.37639,-81.8504,-80.18744000,-76.83735000,-80.64066000,-79.21537000,-82.65244000,-83.35456000,-80.26901,-81.17743,-77.54286000,-85.40493,-82.13686000,-81.65484000,-81.21678000,-81.58118000,-80.7766,-84.18571000,-80.1222,-79.67102,-81.72369000,-84.50372000,-82.87161,-79.67213000,-82.74297000,-78.14526,-83.60149,-76.55724000,-79.03877000,-83.33739000,-81.53678,-75.0976,-77.68028000,-81.21162,-78.68058000,-79.04243000,-78.8419,-78.41869000,-80.29171000,-78.79398,-80.74963000,-76.6989,-79.87443000,-83.06596,-80.50903000,-84.00032,-78.6182,-76.90724000,-81.44785000,-86.03356000,-80.33945000,-77.96985000,-83.35265000,-83.85649000,-84.08041000,-78.85683000,-83.19452,-82.30409,-82.75992,-83.92679,-82.45625000,-81.10071000,-83.07235000,-86.35423,-81.92165000,-84.17258,-83.82529,-83.44537,-87.13362,-83.40066000,-80.21865000,-79.62585000,-84.334,-86.46316000,-85.62461000,-85.78344,-83.92439000,-84.64372,-84.47929,-83.44698,-82.66818,-84.34099,-83.91623,-84.73647,-87.0459,-83.08698,-82.25768,-85.61243,-83.59761,-86.14996,-85.35075000,-87.15939,-82.21545,-81.38998,-84.42397000,-85.47473000,-85.02599000,-81.97661,-85.8835,-84.92885,-82.36958,-83.90848,-86.06729,-87.20312,-80.91466,-79.52501,-86.17555,-87.0162,-86.06758,-82.58562,-86.77572,-86.44173,-83.2863,-86.1618,-84.41367000,-86.16386000,-86.82231000,-87.99809000,-85.32829,-84.42365,-85.94176,-86.80782,-85.42493000,-81.82563,-84.68278,-85.2395,-86.05859,-86.57651,-83.84498,-87.71626,-84.7559,-88.14339,-86.25527,-85.0512,-84.15367,-86.04835000,-85.20463000,-85.76694,-84.27863,-84.63496,-86.50542000,-86.11736,-85.67249000,-85.89262000,-87.56957,-83.88225000,-87.70305,-83.97401,-84.51263,-86.01208,-86.94313,-84.7488,-84.02544,-87.43456,-84.34023,-85.50841,-83.88963,-83.30094,-84.68701,-85.00597,-84.55054,-85.96377,-86.16033,-86.58878,-88.49486,-88.11864000,-85.30149,-84.35775,-85.92588,-86.29475000,-85.84502,-84.61229,-86.08504,-85.28516,-85.47998000,-86.27658,-83.14036,-85.67306,-83.30161,-83.67192,-85.71371,-83.07623,-85.39664000,-86.37543,-85.70202,-83.6939,-84.82266,-83.95001,-86.2813,-85.85596000,-85.26884,-86.19117000,-84.75654,-86.28796000,-85.55946000,-83.15601,-81.5400,-86.07435,-85.94678,-82.61817,-84.83573000,-83.45086000,-84.55658,-85.18286,-82.59784,-83.92004,-86.20864,-86.20169000,-82.78768,-83.84412,-84.94216,-80.96465,-85.7219,-85.13849,-82.31554,-84.44588,-83.41438,-85.74578,-82.08305,-81.14882,-84.71206000,-84.59848,-83.58605,-84.45456,-81.69068,-80.51857,-81.03613,-83.44975,-82.95773,-79.46452,-85.20141,-86.69087,-84.97063,-81.97501,-82.57593,-84.78764,-82.90427,-81.66161,-81.52449,-82.62996,-83.34726,-84.04268,-84.30808,-82.20236,-81.00816,-83.37396,-83.33365,-85.84138,-82.2569,-84.55636000,-83.75087000,-85.44498,-83.29446000,-81.76719,-83.40643,-83.94405,-82.9348,-84.37908,-82.94097,-80.55406,-79.80175,-82.476,-80.7473,-82.61259,-79.81147,-81.94028,-84.66735,-83.11016,-82.48854,-83.12415,-83.75683,-85.60797,-79.47838000,-78.9022,-81.99429,-84.64758,-85.04261000,-80.75848000,-80.9088,-82.39529000,-83.25541,-76.94461,-82.93193,-80.75247000,-80.61331,-80.14252,-81.02311,-79.04527,-78.72629,-81.10103000,-80.0432,-81.30637,-80.42007000,-78.85453,-79.95392000,-82.36845000,-82.87376,-80.17993,-76.5333,-81.10856000,-79.80604,-80.84149,-79.28197000,-78.73411,-76.01853,-80.95398,-80.57377000,-79.77536000,-79.40668000,-75.47643000,-82.32888,-80.03893000,-79.93873000,-80.54388,-76.6422,-78.32442000,-81.18584,-77.6899,-82.13036000,-77.5088,-76.62422000,-83.33498000,-78.34753000,-78.58499000,-77.09535000,-81.99169000,-80.70988000,-82.48776000,-79.2590,-78.8152,-79.38734000,-83.05491000,-84.87486000,-85.43417000,-83.13717000,-80.41734000,-80.95573000,-79.1059,-80.23985000,-82.66171000,-82.47511000,-81.5487,-83.24689000,-83.80958000,-83.6699,-82.04487000,-79.52666000,-81.91283000,-87.41622000,-84.09566000,-84.02452000,-87.48445000,-82.35779000,-85.79794,-84.40543,-83.03096000,-80.34895000,-82.13284000,-83.4538,-83.3788,-85.45609000,-83.80724,-83.32307000,-85.45197,-84.66315000,-83.6016,-84.77541000,-83.6075,-84.91609000,-83.17806000,-82.56496,-82.66377,-85.70055000,-85.14462,-83.1758,-85.48734000,-95.82217000,-95.55451000,-97.44269000,-100.7816,-100.3668,-102.065,-101.9712,-104.3841,-103.8320,-104.2863,-104.6842,-105.1403,-107.8092,-107.6208,-107.0400,-107.1255,-106.3363,-108.7093,-109.4861,-108.9682,-108.7466,-109.8998,-110.4728,-111.3773,-111.2854,-111.3932,-110.3378,-111.2561,-111.0844,-112.9566,-113.7845,-112.9649,-114.2737,-115.5142,-115.0999,-115.9024,-115.3526,-115.5997,-116.2299,-116.3955,-116.5226,-118.4541,-118.7870,-116.2856,-117.5043,-116.7299,-121.2882,-121.0452,-120.5954,-120.3453,-121.0223,-120.1863,-120.7613,-122.5019,-122.4175,-122.6876,-119.4773,-121.1022,-123.0761,-119.5609,-120.3273,-121.5961,-120.6694,-122.7992,-121.8517,-121.2070,-117.4498,-121.3812,-122.4248,-120.4597,-121.7358,-118.0891,-122.1672,-119.5998,-119.4943,-121.3303,-120.768,-122.4309,-118.2340,
            -117.8386,-120.6528,-122.0652,-121.8025,-121.2239,-121.7128,-119.4347,-120.7488,-122.7522,-119.6089,-119.7671,-123.6636,-122.6037,-123.1343,-123.0169,-121.0013,-118.7074,-119.224,-116.975,-118.4865,-120.7163,-119.8181,-120.6083,-120.929,-119.1726,-121.6488,-120.296,-116.1966,-117.8809,-117.597,-120.6402,-118.1631,-113.5829,-117.0902,-117.8617,-115.735,-115.0634,-116.8931,-112.1725,-113.6154,-112.0266,-112.0029,-112.789,-112.4283,-112.4534,-112.5631,-111.2889,-109.5703,-111.52,-111.7169,-107.9733,-109.5163,-109.8569,-107.8838,-108.0343,-108.2085,-106.2729,-106.6786,-108.7404,-104.8785,-105.837,-107.3433,-104.6654,-104.6295,-104.1574,-103.9251,-103.1554,-102.3479,-104.3757,-102.4288,-99.394,-101.826,-100.1775,-98.28128,-98.46112,-97.05723,-94.76727,-91.55518,-90.88397,-80.34377,-81.96317,-82.61144,-82.99197,-83.35896,-80.71962,-80.6076,-80.63779,-81.19503,-81.51305,-81.6031,-79.71613,-78.06147,-81.81236,-82.56381,-83.3851,-83.38342,-82.26175,-81.14645,-79.60987,-82.22318,-80.51292,-82.06243,-81.46934,-82.61184,-80.78469,-79.99635,-83.36224000,-82.42212,-79.62027,-81.8627,-79.94202,-81.80084,-81.30466,-82.43071000,-83.18208,-82.40108000,-79.42848,-79.32803,-80.97694,-81.3252,-81.24565,-81.34746,-78.67323,-82.41066,-80.63464000,-80.05771,-79.48832,-80.86448,-79.92257,-81.01541,-79.39506,-82.64093,-81.07527,-80.90197,-80.81796000,-80.18736,-80.44603,-80.96303,-81.88312,-79.82822,-80.73386,-81.04243,-79.75216,-82.62304,-80.52251,-80.07914,-78.31169,-77.53055,-79.7288,-79.09451,-81.79759,-81.38021,-81.07053,-79.2337,-79.88133,-77.34837,-81.43407,-80.41149,-80.11584,-80.7252,-79.60276,-81.50291,-80.82076,-78.90665,-76.2782,-81.50107,-78.85043,-78.95072,-80.36711,-77.67312,-78.9528,-78.73115,-79.1209,-80.86732,-77.72243,-80.85606,-79.76302,-77.16671,-77.79665,-79.7608,-79.49883,-81.63023,-78.47053,-79.02702,-80.36317,-80.0631,-77.66062,-81.66471,-79.59715,-82.28264,-78.60825,-79.84917,-81.90285,-79.5027,-80.0403,-81.21218000,-81.16356,-82.5159,-82.44368000,-82.52396,-82.29194,-81.99984,-83.1519,-81.98676,-83.68891,-82.86613,-82.04094,-80.36454000,-83.84245,-81.95593,-83.48386,-84.07848,-79.82666,-82.38416,-80.63683,-80.48273,-82.7837,-77.87191,-82.66061,-83.85512,-84.30756,-81.46783,-80.39006,-79.26864,-82.93492,-80.34019,-83.9061,-82.2126,-79.98586,-78.27577,-80.01796,-85.66557,-79.88966,-83.62466,-83.11416,-82.56628,-79.57249,-84.80437,-83.36649,-83.36879,-84.76028,-84.44247,-83.21394,-79.86412,-81.17997,-84.00951,-80.57506,-83.45071,-80.7983,-82.74641,-81.08434,-79.14825,-81.92654,-81.40301,-81.68404,-81.15912000,-82.00233,-80.58517,-79.85942,-82.63413000,-82.21947,-81.83405,-83.64089000,-80.4815,-79.95438000,-82.8737,-80.66143,-82.07323,-83.09502,-83.10382,-82.13533,-78.21911,-80.46419,-81.87131000,-82.56212000,-81.7249,-81.77408,-80.00063,-79.05607,-80.09558,-80.0409,-78.83038,-78.3051,-79.9071,-79.16395,-79.41842,-77.65112,-77.35663,-80.82249,-81.11615,-82.91168,-80.35462,-82.17921000,-78.88263,-80.58939,-81.08563,-80.51924,-81.76678,-81.18547,-79.77451,-80.83406,-81.96432,-83.57486,-81.43714,-81.14919,-83.86432,-78.90242,-82.38231,-81.01048,-83.34035,-80.55919,-82.38575,-81.31252,-81.51851,-80.7421,-79.25015,-85.07957,-78.0173,-79.4688,-82.22604,-78.83055,-80.65958,-83.1293,-85.00342,-83.23405,-83.27498,-81.56548,-82.45635,-82.89104,-81.22247,-84.75056,-80.95309,-83.18086,-82.2037,-79.61353,-83.36025,-80.24588,-82.97668,-82.20048,-80.83453,-80.49203,-84.38837,-82.28419,-83.09774,-84.27692,-80.61808,-82.91579,-81.98494,-82.32706,-80.33368,-79.80206,-80.00879000,-83.33978,-80.74503,-82.3858,-83.77032,-82.71986,-78.96651,-81.01648000,-80.41673,-79.94351000,-80.83189000,-82.06609,-81.31585,-82.35831000,-80.07924,-81.95316,-84.10722,-81.03791000,-82.12141,-83.64661000,-81.03758,-80.05949000,-81.98907000,-79.46231,-78.29893,-82.91472,-77.4059,-79.81677,-78.41203,-82.74059,-80.05489,-79.4592,-81.99072000,-80.94769,-83.4340,-82.227,-79.84653,-81.95137,-78.45844,-79.81502,-80.02023,-82.9212,-82.12931,-83.54822,-80.47095,-81.18652,-79.42869,-79.93623,-82.69788000,-81.32333000,-81.52004000,-81.18921,-79.94118000,-80.70782,-82.17185,-80.60136000,-81.76617,-81.06046,-81.14838,-82.93889,-82.07042,-79.90087,-80.87617,-79.47929,-82.96025,-80.51629,-80.43958,-82.40372,-80.28921,-83.82282,-78.1396,-80.08174000,-81.36893,-83.24189,-80.8986,-83.93256,-82.91989,-83.05256,-79.61608,-78.65352,-78.785,-78.35718,-80.03471,-83.70506000,-84.87741,-81.0353,-80.93269000,-83.18763,-81.5011,-82.3359,-83.89666,-84.13763,-86.3638,-80.97295,-82.08179,-81.39101,-82.20049,-81.41626,-83.15505,-84.49298,-78.28019,-82.75871,-79.76205,-77.48107,-82.87576000,-80.99706,-78.99551,-80.5108,-82.10321,-81.8127,-81.07426,-82.11966,-81.47048,-81.6242,-84.48621,-78.5985,-82.55801,-78.81277,-78.48729,-83.32975,-80.28341,-83.7179,-78.76994,-81.21149,-82.71085,-82.37614,-79.80671,-80.16623,-81.80968,-81.19257,-82.50243,-84.60718,-78.5753,-80.85183,-82.8862,-80.82845,-81.78988,-82.22464,-79.26452,-81.82795,-79.99663,-82.22218,-79.51734,-81.41816,-82.42632,-83.14302,-85.05473,-84.24903,-82.9224,-85.00312,-85.52339,-84.21046,-81.30856,-83.09724,-85.36825,-83.94807,-80.43198,-84.4765,-82.54611,-82.61664,-86.24429,-83.55,-82.55199,-82.97153,-81.25337,-81.92309,-83.61902,-82.59573,-83.29213,-82.69188,-81.18782,-80.67197,-83.65858,-83.26701,-84.06534,-81.52908,-84.00207,-81.91372000,-80.09957,-84.35822,-85.59609000,-86.37112,-85.02187,-83.92932,-81.58899,-81.80338,-83.34761,-83.33517,-82.24054,-85.91026,-83.4108,-82.39474,-85.32349000,-85.29533,-80.52054,-85.26645,-81.93719,-80.77538,-80.03725,-82.5524,-85.4536,-81.79987,-83.05251,-84.21052,-85.17332,-83.94518,-82.12737,-84.55092,-87.30526,-87.30922000,-84.02979,-85.23608,-84.80803,-84.64419000,-85.47426000,-82.45304,-82.43664,-82.64179,-84.16673,-83.9615,-83.12318,-84.7439,-83.15276,-84.40225,-82.66331,-80.29401,-84.60207,-84.97764,-84.81302,-81.74522,-82.07513,-83.79975,-83.61202,-85.2132,-81.14449,-81.05099,-79.86163,-83.69673,-80.28914,-82.80708,-80.54101,-81.81165,-81.66743,-83.00903,-80.25555,-79.82055,-81.24581,-77.28317,-85.03314,-81.18842,-78.52762,-77.72608,-81.17581,-83.42632,-82.40592,-80.69794,-82.86433,-84.52438,-80.22914,-77.77719,-80.87772,-78.98969,-83.25295,-82.50786,-83.08328,-81.8063,-80.45639,-81.78076,-82.76079,-80.45189,-83.27684,-82.73507,-85.30946,-83.40661,-80.93317,-85.37192,-83.82736,-82.05453,-81.90504,-83.51003,-80.78078,-84.83832,-84.65488,-85.13432,-84.22667,-85.97539,-86.991,-80.3672,-85.09819,-83.06866,-85.86301,-85.29797,-85.22181,-82.8798,-84.11421,-85.53893,-84.75142,-85.17867,-85.53506000,-82.95228,-86.08966000,-84.07388,-83.30542000,-84.16045,-85.72024000,-85.40948,-81.63506,-84.16318,-83.56625,-85.55399000,-84.62607,-84.51234,-82.25163,-82.35216000,-81.59488,-84.1228,-84.08681,-87.40475,-80.8731,-86.3533,-83.94592000,-80.76974,-84.49796,-85.28375,-84.37263,-81.77724000,-82.01892000,-81.86387,-83.19793,-81.82521000,-81.6671,-78.93518,-81.36456,-81.71474,-82.17185,-82.73698000,-78.09982,-80.03991,-80.68276,-81.80212,-81.55557,-80.26395,-83.61612,-79.53967,-81.42156,-81.05756000,-82.3774,-79.59509,-81.06881,-80.60146,-81.68583,-80.86591,-81.04364,-83.44858,-81.55949000,-79.81345000,-82.3625,-82.72585,-82.0298,-83.12943,-81.57684,-79.81948,-84.54332,-79.42488,-81.55309,-83.51903,-84.12889,-83.86053,-81.2189,-84.16225,-85.68283,-83.60426,-80.76039,-83.57385,-80.88721,-80.60339,-82.12724,-83.25233,-82.3679,-83.14828,-83.84657,-80.6927,-81.76608,-81.77648,-82.1912,-84.50254000,-85.41454000,-84.90154,-84.13017,-82.52916,-82.79109,-81.53015,-84.49968000,-81.45992,-81.66291,-82.5492,-80.97581,-81.77878,-83.01112,-80.33257,-83.40964,-81.67711000,-83.91895,-83.17934,-81.41251,-82.85724,-81.18667,-83.01237000,-82.90786000,-83.17513,-83.10525,-78.73197,-80.48569000,-81.40833,-84.94136000,-82.22626,-82.13538,-81.14964,-84.25974000,-80.40366,-79.45465,-82.11501,-82.56249000,-84.60535,-81.45112,-82.95444,-84.11459,-78.51696,-82.62544,-80.10316,-81.78589000,-82.99332,-80.43571,-83.06314,-81.98611,-82.2171,-82.25131,-83.40905,-80.85356,-79.80054,-83.41363,-80.6347,-78.73885,-82.59756,-79.22751,-84.0340,-83.90464,-81.37724,-82.71452000,-91.34248,-84.27495,-80.26044,-80.20593,-78.73351,-80.18588,-83.35558,-78.93126,-81.82623,-81.10715,-78.95152,-80.95763,-80.50472,-82.48849,-83.17482,-83.36597,-76.1785,-82.57597,-80.74004,-79.51612,-81.59364,-78.27323,-84.13545,-81.06027,-84.51806000,-84.02165000,-75.51202,-77.2964,-81.26381,-79.10525,-79.05926,-79.59231,-83.97221000,-82.77615,-77.40617,-78.74127,-81.63565,-83.46625,-79.11138,-83.70714,-83.63406,-82.29653,-81.97722000,-82.52858000,-82.97829,-78.62401,-80.41734,-82.75848000,-84.26349000,-83.71062,-83.50182000,-78.94995,-79.27283,-84.49059,-84.09151,-82.74121000,-83.71891,-84.28033000,-84.65285,-85.57413,-84.64653,-82.22634,-80.57498000,-81.40334000,-83.80156,-83.27744,-83.88478,-84.24201000,-85.52794000,-84.81529,-82.04727000,-82.15304,-80.40741000,-84.54834,-86.10269000,-82.85386,-81.61255,-83.09777,-82.34537,-83.98492,-83.60504,-82.09097,-83.72391000,-83.54102,-81.88982,-84.55505,-86.16763000,-81.65104,-80.47743,-84.36986,-84.60365,-86.49129,-81.64578000,-85.07965000,-84.41965,-83.17696,-83.7404,-83.28398,-81.52824,-83.02532,-83.23997,-84.61891,-83.74595,-83.68121,-81.88114,-81.10561,-85.80524000,-80.14264,-79.40656,-81.82776000,-83.81927,-84.97892,-81.07008,-84.74083,-84.45491,-83.45129,-79.7682,-85.18889,-81.76464,-83.68256,-81.89388,-84.32883000,-86.1653,-82.14603,-83.02947,-82.95615,-86.67037,-86.28165,-82.62167,-85.74907,-84.59209,-85.86203,-85.42607,-85.0228,-84.69664,-85.11858,-84.44193,-85.05402,-81.22575,-82.53081,-82.99676,-84.15645,-84.73259,-84.84834,-84.43496,-83.2209,-83.22861,-83.8036,-85.09009,-84.64805,-86.47865,-85.74426,-82.7722,-83.71616,-81.86186,-83.034,-83.97081,-84.05442,-83.29015,-81.52464,-83.7817,-83.16319,-84.18288,-81.83807,-83.5687,-86.27602,-85.10304,-84.76952,-84.03665,-85.11179,-85.96267,-82.55546,-85.56553,-82.51566,-84.79247000,-85.31511,-84.04662,-84.81445,-85.27152,-86.02231,-85.53474,-83.47023,-84.55349,-87.00375,-85.99838000,-85.83151,-84.7281,-84.31361,-84.55255,-86.0408,-86.10077,-85.18402,-84.65192,-85.47913,-87.21236000,-84.10063,-84.14034000,-84.2061,-85.38467,-85.77752,-84.79943,-85.03975,-83.39683000,-86.56773,-86.78786000,-83.21605,-85.0476,-85.90221,-83.8727,-83.48474000,-85.96114,-86.99844000,-81.95306000,-84.39108,-84.21006,-84.48083,-83.56978,-85.24681,-86.40776,-84.08351000,-84.12257,-85.73921,-84.21853000,-84.46664,-82.65265,-82.99707,-85.14133000,-85.42075,-80.39644,-82.12474,-83.95782,-81.59781,-76.02449,-82.93015000,-83.06847000,-85.12099000,-82.78405,-84.46311,-81.41556,-81.14487,-81.84335000,-84.93874000,-84.62882,-80.10327000,-80.78696,-84.10034000,-79.56171,-83.372,-82.01801000,-85.65911000,-82.44633,-81.51297000,-82.14066000,-78.91421000,-82.54701000,-79.58726000,-81.72386000,-83.22577000,-81.7356,-80.7243,-82.95224000,-81.73299,-80.22118000,-84.12663,-80.93876000,-81.2393,-81.63094000,-79.9539,-83.15245,-82.27516000,-81.05757000,-79.22519000,-79.72045000,-82.54021000,-81.93138000,-83.65115000,-79.72321000,-84.42097000,-81.45939000,-84.18961,-83.80975000,-85.35639000,-84.20555,-82.91856000,-83.30026000,-80.10036,-85.22446,-82.21791,-82.09818000,-81.86969000,-80.48323,-79.49878,-79.00682000,-82.05647000,-82.96324000,-80.83737000,-81.55003000,-80.81383,-83.15324000,-85.18279000,-83.11308000,-81.84335000,-83.69769000,-84.37869000,-84.07086,-79.37109,-81.16309000,-82.80142000,-80.42937000,-82.83377,-81.65147,-83.47239,-85.33965,-82.78069,-81.85403000,-81.81837000,-81.51833000,-83.53967,-83.75661,-81.55521000,-80.79372000,-82.12099000,-83.69337,-82.29692,-83.60272,-79.72842,-85.52328,-83.50182000,-81.99984,-83.94022,-82.1741,-79.76309000,-84.21741,-83.15701,-85.56084000,-82.78031000,-82.64713000,-82.78049000,-85.44105000,-81.68746000,-82.05437000,-80.97708000,-80.11481000,-84.2376,-84.34906,-80.70456000,-82.37639,-81.8504,-80.18744000,-76.83735000,-80.64066000,-79.21537000,-82.65244000,-83.35456000,-80.26901,-81.17743,-77.54286000,-85.40493,-82.13686000,-81.65484000,-81.21678000,-81.58118000,-80.7766,-84.18571000,-80.1222,-79.67102,-81.72369000,-84.50372000,-82.87161,-79.67213000,-82.74297000,-78.14526,-83.60149,-76.55724000,-79.03877000,-83.33739000,-81.53678,-75.0976,-77.68028000,-81.21162,-78.68058000,-79.04243000,-78.8419,-78.41869000,-80.29171000,-78.79398,-80.74963000,-76.6989,-79.87443000,-83.06596,-80.50903000,-84.00032,-78.6182,-76.90724000,-81.44785000,-86.03356000,-80.33945000,-77.96985000,-83.35265000,-83.85649000,-84.08041000,-78.85683000,-83.19452,-82.30409,-82.75992,-83.92679,-82.45625000,-81.10071000,-83.07235000,-86.35423,-81.92165000,-84.17258,-83.82529,-83.44537,-87.13362,-83.40066000,-80.21865000,-79.62585000,-84.334,-86.46316000,-85.62461000,-85.78344,-83.92439000,-84.64372,-84.47929,-83.44698,-82.66818,-84.34099,-83.91623,-84.73647,-87.0459,-83.08698,-82.25768,-85.61243,-83.59761,-86.14996,-85.35075000,-87.15939,-82.21545,-81.38998,-84.42397000,-85.47473000,-85.02599000,-81.97661,-85.8835,-84.92885,-82.36958,-83.90848,-86.06729,-87.20312,-80.91466,-79.52501,-86.17555,-87.0162,-86.06758,-82.58562,-86.77572,-86.44173,-83.2863,-86.1618,-84.41367000,-86.16386000,-86.82231000,-87.99809000,-85.32829,-84.42365,-85.94176,-86.80782,-85.42493000,-81.82563,-84.68278,-85.2395,-86.05859,-86.57651,-83.84498,-87.71626,-84.7559,-88.14339,-86.25527,-85.0512,-84.15367,-86.04835000,-85.20463000,-85.76694,-84.27863,-84.63496,-86.50542000,-86.11736,-85.67249000,-85.89262000,-87.56957,-83.88225000,-87.70305,-83.97401,-84.51263,-86.01208,-86.94313,-84.7488,-84.02544,-87.43456,-84.34023,-85.50841,-83.88963,-83.30094,-84.68701,-85.00597,-84.55054,-85.96377,-86.16033,-86.58878,-88.49486,-88.11864000,-85.30149,-84.35775,-85.92588,-86.29475000,-85.84502,-84.61229,-86.08504,-85.28516,-85.47998000,-86.27658,-83.14036,-85.67306,-83.30161,-83.67192,-85.71371,-83.07623,-85.39664000,-86.37543,-85.70202,-83.6939,-84.82266,-83.95001,-86.2813,-85.85596000,-85.26884,-86.19117000,-84.75654,-86.28796000,-85.55946000,-83.15601,-81.5400,-86.07435,-85.94678,-82.61817,-84.83573000,-83.45086000,-84.55658,-85.18286,-82.59784,-83.92004,-86.20864,-86.20169000,-82.78768,-83.84412,-84.94216,-80.96465,-85.7219,-85.13849,-82.31554,-84.44588,-83.41438,-85.74578,-82.08305,-81.14882,-84.71206000,-84.59848,-83.58605,-84.45456,-81.69068,-80.51857,-81.03613,-83.44975,-82.95773,-79.46452,-85.20141,-86.69087,-84.97063,-81.97501,-82.57593,-84.78764,-82.90427,-81.66161,-81.52449,-82.62996,-83.34726,-84.04268,-84.30808,-82.20236,-81.00816,-83.37396,-83.33365,-85.84138,-82.2569,-84.55636000,-83.75087000,-85.44498,-83.29446000,-81.76719,-83.40643,-83.94405,-82.9348,-84.37908,-82.94097,-80.55406,-79.80175,-82.476,-80.7473,-82.61259,-79.81147,-81.94028,-84.66735,-83.11016,-82.48854,-83.12415,-83.75683,-85.60797,-79.47838000,-78.9022,-81.99429,-84.64758,-85.04261000,-80.75848000,-80.9088,-82.39529000,-83.25541,-76.94461,-82.93193,-80.75247000,-80.61331,-80.14252,-81.02311,-79.04527,-78.72629,-81.10103000,-80.0432,-81.30637,-80.42007000,-78.85453,-79.95392000,-82.36845000,-82.87376,-80.17993,-76.5333,-81.10856000,-79.80604,-80.84149,-79.28197000,-78.73411,-76.01853,-80.95398,-80.57377000,-79.77536000,-79.40668000,-75.47643000,-82.32888,-80.03893000,-79.93873000,-80.54388,-76.6422,-78.32442000,-81.18584,-77.6899,-82.13036000,-77.5088,-76.62422000,-83.33498000,-78.34753000,-78.58499000,-77.09535000,-81.99169000,-80.70988000,-82.48776000,-79.2590,-78.8152,-79.38734000,-83.05491000,-84.87486000,-85.43417000,-83.13717000,-80.41734000,-80.95573000,-79.1059,-80.23985000,-82.66171000,-82.47511000,-81.5487,-83.24689000,-83.80958000,-83.6699,-82.04487000,-79.52666000,-81.91283000,-87.41622000,-84.09566000,-84.02452000,-87.48445000,-82.35779000,-85.79794,-84.40543,-83.03096000,-80.34895000,-82.13284000,-83.4538,-83.3788,-85.45609000,-83.80724,-83.32307000,-85.45197,-84.66315000,-83.6016,-84.77541000,-83.6075,-84.91609000,-83.17806000,-82.56496,-82.66377,-85.70055000,-85.14462,-83.1758,-85.48734000,-95.82217000,-95.55451000,-97.44269000,-100.7816,-100.3668,-102.065,-101.9712,-104.3841,-103.8320,-104.2863,-104.6842,-105.1403,-107.8092,-107.6208,-107.0400,-107.1255,-106.3363,-108.7093,-109.4861,-108.9682,-108.7466,-109.8998,-110.4728,-111.3773,-111.2854,-111.3932,-110.3378,-111.2561,-111.0844,-112.9566,-113.7845,-112.9649,-114.2737,-115.5142,-115.0999,-115.9024,-115.3526,-115.5997,-116.2299,-116.3955,-116.5226,-118.4541,-118.7870,-116.2856,-117.5043,-116.7299,-121.2882,-121.0452,-120.5954,-120.3453,-121.0223,-120.1863,-120.7613,-122.5019,-122.4175,-122.6876,-119.4773,-121.1022,-123.0761,-119.5609,-120.3273,-121.5961,-120.6694,-122.7992,-121.8517,-121.2070,-117.4498,-121.3812,-122.4248,-120.4597,-121.7358,-118.0891,-122.1672,-119.5998,-119.4943,-121.3303,-120.768,-122.4309,-118.2340,

        };
        List<double[]> Data = new List<double[]> { };
        double[] TempFreq = new double[] { };
        Equipment.tracepoint[] Trace1 = new Equipment.tracepoint[] { };
        Equipment.tracepoint[] Trace1Min = new Equipment.tracepoint[] { };
        Equipment.tracepoint[] Trace2 = new Equipment.tracepoint[] { };
        Equipment.tracepoint[] Trace3 = new Equipment.tracepoint[] { };
        bool Trace1State = false;
        bool Trace1MinState = false;
        bool Trace2State = false;
        bool Trace3State = false;
        private DB.MeasData _tomeas = new DB.MeasData() { SpecData = new Equipment.spectrum_data() { Trace = new Equipment.tracepoint[] { new Equipment.tracepoint() { freq = 10000, level = -1000 } } } };
        public DB.MeasData tomeas
        {
            get { return _tomeas; }
            set { _tomeas = value; OnPropertyChanged("tomeas"); }
        }
        public bool ShowSomeMeas
        {
            get { return _ShowSomeMeas; }
            set { _ShowSomeMeas = value; OnPropertyChanged("ShowSomeMeas"); }
        }
        private bool _ShowSomeMeas = false;

        public Equipment.DataSomeMeas DataSomeMeas
        {
            get { return _DataSomeMeas; }
            set { _DataSomeMeas = value; OnPropertyChanged("DataSomeMeas"); }
        }
        private Equipment.DataSomeMeas _DataSomeMeas = new Equipment.DataSomeMeas();
        #region meas
        #region ChannelPower
        public bool ChannelPowerState
        {
            get { return _ChannelPowerState; }
            set { _ChannelPowerState = value; OnPropertyChanged("ChannelPowerState"); }
        }
        private bool _ChannelPowerState = false;

        public decimal ChannelPowerBW
        {
            get { return _ChannelPowerBW; }
            set { _ChannelPowerBW = value; OnPropertyChanged("ChannelPowerBW"); }
        }
        private decimal _ChannelPowerBW = 100000;

        public double ChannelPowerResult
        {
            get { return _ChannelPowerResult; }
            set { _ChannelPowerResult = value; OnPropertyChanged("ChannelPowerResult"); }
        }
        private double _ChannelPowerResult = 0;
        #endregion ChannelPower
        #region ndb
        public bool NdBState
        {
            get { return _NdBState; }
            set { _NdBState = value; OnPropertyChanged("NdBState"); }
        }
        private bool _NdBState = false;

        public decimal NdBLevel
        {
            get { return _NdBLevel; }
            set { _NdBLevel = value; OnPropertyChanged("NdBLevel"); }
        }
        private decimal _NdBLevel = 10;
        public decimal NdBResult
        {
            get { return _NdBResult; }
            set { _NdBResult = value; OnPropertyChanged("NdBResult"); }
        }
        private decimal _NdBResult = 0;

        #endregion ndb
        #region ndb
        public bool OBWState
        {
            get { return _OBWState; }
            set { _OBWState = value; OnPropertyChanged("OBWState"); }
        }
        private bool _OBWState = false;

        public decimal OBWPercent
        {
            get { return _OBWPercent; }
            set { _OBWPercent = value; OnPropertyChanged("OBWPercent"); }
        }
        private decimal _OBWPercent = 99;
        public decimal OBWChnlBW
        {
            get { return _OBWChnlBW; }
            set { _OBWChnlBW = value; OnPropertyChanged("OBWChnlBW"); }
        }
        private decimal _OBWChnlBW = 99;

        public decimal OBWResult
        {
            get { return _OBWResult; }
            set { _OBWResult = value; OnPropertyChanged("OBWResult"); }
        }
        private decimal _OBWResult = 0;
        #endregion ndb
        #endregion

        private int selectedMarker = -1;
        private double MouseDownFreq = 0;
        public ObservableCollection<Equipment.Marker> Markers
        {
            get { return _Markers; }
            set { _Markers = value; OnPropertyChanged("Markers"); }
        }
        public ObservableCollection<Equipment.Marker> _Markers = new ObservableCollection<Equipment.Marker>
        {
            new Equipment.Marker {Index = 1, MarkerType = 0, IndexOnTrace = 1 },
            new Equipment.Marker {Index = 2, MarkerType = 0, IndexOnTrace = 1 },
            new Equipment.Marker {Index = 3, MarkerType = 0, IndexOnTrace = 1 },
            new Equipment.Marker {Index = 4, MarkerType = 0, IndexOnTrace = 1 },
            new Equipment.Marker {Index = 5, MarkerType = 0, IndexOnTrace = 1 },
            new Equipment.Marker {Index = 6, MarkerType = 0, IndexOnTrace = 1 },
        };

        public Equipment.mode RSRMode
        {
            get { return _RSRMode; }
            set { _RSRMode = value; OnPropertyChanged("RSRMode"); }
        }
        private Equipment.mode _RSRMode = new Equipment.mode { Mode = "FFM", MeasAppl = "RX", FreqMode = "CW" };
        #endregion data

        #region Property

        public int Device
        {
            get { return (int)GetValue(DeviceProperty); }
            set { SetValue(DeviceProperty, value); OnPropertyChanged("Device"); }
        }
        public bool SpectrumFromDevice
        {
            get { return (bool)GetValue(SpectrumFromDeviceProperty); }
            set { SetValue(SpectrumFromDeviceProperty, value); OnPropertyChanged("SpectrumFromDevice"); }
        }
        public double RefLevel
        {
            get { return (double)GetValue(RefLevelProperty); }
            set { SetValue(RefLevelProperty, value); }
        }
        public double LowestLevel
        {
            get { return (double)GetValue(LowestLevelProperty); }
            set { SetValue(LowestLevelProperty, value); }
        }
        public double Range
        {
            get { return (double)GetValue(RangeProperty); }
            set { SetValue(RangeProperty, value); }
        }
        public double FreqCentr
        {
            get { return (double)GetValue(FreqCentrProperty); }
            set { SetValue(FreqCentrProperty, value); }
        }
        public double FreqSpan
        {
            get { return (double)GetValue(FreqSpanProperty); }
            set { SetValue(FreqSpanProperty, value); }
        }
        public double FreqStart
        {
            get { return (double)GetValue(FreqStartProperty); }
            set { SetValue(FreqStartProperty, value); }
        }
        public double FreqStop
        {
            get { return (double)GetValue(FreqStopProperty); }
            set { SetValue(FreqStopProperty, value); }
        }
        public int TracePoints
        {
            get { return (int)GetValue(TracePointsProperty); }
            set { SetValue(TracePointsProperty, value); }
        }
        public string LevelUnit
        {
            get { return (string)GetValue(LevelUnitProperty); }
            set { SetValue(LevelUnitProperty, value); OnPropertyChanged("LevelUnit"); }
        }
        public bool ShowUpPanel
        {
            get { return (bool)GetValue(ShowUpPanelProperty); }
            set { SetValue(ShowUpPanelProperty, value); OnPropertyChanged("ShowUpPanel"); }
        }
        public bool ShowDownPanel
        {
            get { return (bool)GetValue(ShowDownPanelProperty); }
            set { SetValue(ShowDownPanelProperty, value); OnPropertyChanged("ShowDownPanel"); }
        }
        public bool ShowWaterfall
        {
            get { return (bool)GetValue(ShowWaterfallProperty); }
            set { SetValue(ShowWaterfallProperty, value); OnPropertyChanged("ShowWaterfall"); }
        }
        public static readonly DependencyProperty DeviceProperty = DependencyProperty.Register("Device", typeof(int), typeof(DrawSpectrum), new PropertyMetadata(0, new PropertyChangedCallback(OnPropertyChanged)));
        public static readonly DependencyProperty SpectrumFromDeviceProperty = DependencyProperty.Register("SpectrumFromDevice", typeof(bool), typeof(DrawSpectrum), new PropertyMetadata(true, new PropertyChangedCallback(OnPropertyChanged)));
        public static readonly DependencyProperty RefLevelProperty = DependencyProperty.Register("RefLevel", typeof(double), typeof(DrawSpectrum), new PropertyMetadata(0d, null));
        public static readonly DependencyProperty LowestLevelProperty = DependencyProperty.Register("LowestLevel", typeof(double), typeof(DrawSpectrum), new PropertyMetadata(-100d, null));
        public static readonly DependencyProperty RangeProperty = DependencyProperty.Register("Range", typeof(double), typeof(DrawSpectrum), new PropertyMetadata(100d, null));
        public static readonly DependencyProperty FreqCentrProperty = DependencyProperty.Register("FreqCentr", typeof(double), typeof(DrawSpectrum), new PropertyMetadata(150000000d, null));
        public static readonly DependencyProperty FreqSpanProperty = DependencyProperty.Register("FreqSpan", typeof(double), typeof(DrawSpectrum), new PropertyMetadata(10000000d, null));
        public static readonly DependencyProperty FreqStartProperty = DependencyProperty.Register("FreqStart", typeof(double), typeof(DrawSpectrum), new PropertyMetadata(145000000d, null));
        public static readonly DependencyProperty FreqStopProperty = DependencyProperty.Register("FreqStop", typeof(double), typeof(DrawSpectrum), new PropertyMetadata(155000000d, null));
        public static readonly DependencyProperty TracePointsProperty = DependencyProperty.Register("TracePoints", typeof(int), typeof(DrawSpectrum), new PropertyMetadata(1601, null));
        public static readonly DependencyProperty LevelUnitProperty = DependencyProperty.Register("LevelUnit", typeof(string), typeof(DrawSpectrum), new PropertyMetadata("dBm", null));
        public static readonly DependencyProperty ShowUpPanelProperty = DependencyProperty.Register("ShowUpPanel", typeof(bool), typeof(DrawSpectrum), new PropertyMetadata(true, null));
        public static readonly DependencyProperty ShowDownPanelProperty = DependencyProperty.Register("ShowDownPanel", typeof(bool), typeof(DrawSpectrum), new PropertyMetadata(true, null));
        public static readonly DependencyProperty ShowWaterfallProperty = DependencyProperty.Register("ShowWaterfall", typeof(bool), typeof(DrawSpectrum), new PropertyMetadata(false, null));

        private static void OnPropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args)
        {
            DrawSpectrum thisUserControl = (DrawSpectrum)sender;
            thisUserControl.rcv.PropertyChanged -= thisUserControl.RSRMode_PropertyChanged;
            #region Device Drawing

            thisUserControl.UpPanel.Children.Clear();
            thisUserControl.DFPanel_Par.Children.Clear();
            if (thisUserControl.Device == App.Sett.Equipments_Settings.SpectrumAnalyzer.ID && thisUserControl.SpectrumFromDevice)
            {
                if (thisUserControl.ShowUpPanel)
                {
                    AnUpPanel p = new AnUpPanel();
                    thisUserControl.UpPanel.Children.Add(p);
                }
                if (thisUserControl.ShowDownPanel)
                {
                    thisUserControl.Markers = thisUserControl.an.Markers;
                }
            }
            else if (thisUserControl.Device == App.Sett.Equipments_Settings.RuSReceiver.ID && thisUserControl.SpectrumFromDevice)
            {
                if (thisUserControl.ShowUpPanel)
                {
                    thisUserControl.rcv.PropertyChanged += thisUserControl.RSRMode_PropertyChanged;
                    RsReceiverUpPanel p = new RsReceiverUpPanel();
                    thisUserControl.UpPanel.Children.Add(p);
                    DFPanel dfp = new DFPanel();
                    thisUserControl.DFPanel_Par.Children.Add(dfp);
                }
                if (thisUserControl.ShowDownPanel)
                {
                    thisUserControl.Markers = thisUserControl.an.Markers;
                    thisUserControl.Markers = thisUserControl.rcv.Markers;
                }
            }
            else if (thisUserControl.Device == App.Sett.Equipments_Settings.RuSTSMx.ID && thisUserControl.SpectrumFromDevice)
            {
                thisUserControl.Markers = new ObservableCollection<Equipment.Marker>
                {
                    new Equipment.Marker {Index = 1, MarkerType = 0, IndexOnTrace = 1 },
                    new Equipment.Marker {Index = 2, MarkerType = 0, IndexOnTrace = 1 },
                    new Equipment.Marker {Index = 3, MarkerType = 0, IndexOnTrace = 1 },
                    new Equipment.Marker {Index = 4, MarkerType = 0, IndexOnTrace = 1 },
                    new Equipment.Marker {Index = 5, MarkerType = 0, IndexOnTrace = 1 },
                    new Equipment.Marker {Index = 6, MarkerType = 0, IndexOnTrace = 1 },
                };
            }
            else if (thisUserControl.Device == App.Sett.Equipments_Settings.SignalHound.ID && thisUserControl.SpectrumFromDevice)
            {
                if (thisUserControl.ShowUpPanel)
                {
                    SHUpPanel p = new SHUpPanel();
                    thisUserControl.UpPanel.Children.Add(p);
                }
                if (thisUserControl.ShowDownPanel)
                {
                    thisUserControl.Markers = thisUserControl.sh.Markers;
                }
            }
            else if (!thisUserControl.SpectrumFromDevice)
            {
                thisUserControl.Markers = new ObservableCollection<Equipment.Marker>
                {
                    new Equipment.Marker {Index = 1, MarkerType = 0, IndexOnTrace = 1 },
                    new Equipment.Marker {Index = 2, MarkerType = 0, IndexOnTrace = 1 },
                    new Equipment.Marker {Index = 3, MarkerType = 0, IndexOnTrace = 1 },
                    new Equipment.Marker {Index = 4, MarkerType = 0, IndexOnTrace = 1 },
                    new Equipment.Marker {Index = 5, MarkerType = 0, IndexOnTrace = 1 },
                    new Equipment.Marker {Index = 6, MarkerType = 0, IndexOnTrace = 1 },
                };
            }
            #endregion
        }
        #endregion
        #region Shaders
        string VertexShader =
            "varying vec4 pos; " + Environment.NewLine +
            "void main()" + Environment.NewLine +
            "{" + Environment.NewLine +
            "   gl_Position = ftransform();" +
            "   pos = gl_Position;" + Environment.NewLine +
            "}" + Environment.NewLine;
        string FragmentShader =
            "uniform float RefLevel = 107; " + Environment.NewLine +
            "uniform float LowLevel = 0; " + Environment.NewLine +
            "varying vec4 pos; " + Environment.NewLine +
            "vec3 hsv2rgb(vec4 hsv)" + Environment.NewLine +
            "{" + Environment.NewLine +
            "   float d = ((hsv.z + 1.0) * 0.9999) / 2.0;" + Environment.NewLine +
            "   if (d > 0.9999) d = 0.9999;" + Environment.NewLine +
            "   else if (d < 0.0001) d = 0.0001;" + Environment.NewLine +
            "   float saturation = 1.0;" + Environment.NewLine +
            "   int hi = int(mod(floor(d * 6.0),6.0));" + Environment.NewLine +
            "   float f = d * 6.0 - floor(d * 6.0); " + Environment.NewLine +

            "   float val = 1.0; " + Environment.NewLine +
            "   float v = val; " + Environment.NewLine +
            "   float p = val * (1.0 - saturation); " + Environment.NewLine +
            "   float q = val * (1.0 - f * saturation); " + Environment.NewLine +
            "   float t = val * (1.0 - (1.0 - f)* saturation); " + Environment.NewLine +

            "   vec3 rgb = vec3(0.0, 0.0, 0.0);" + Environment.NewLine +
            "   if (hi == 0)" + Environment.NewLine +
            "   {" + Environment.NewLine +
            "       rgb.r = 1.0;" + Environment.NewLine +
            "       rgb.g = q;" + Environment.NewLine +
            "       rgb.b = q;" + Environment.NewLine +
            "   }" + Environment.NewLine +
            "   else if (hi == 1 )" + Environment.NewLine +
            "   {" + Environment.NewLine +
            "       rgb.r = v;" + Environment.NewLine +
            "       rgb.g = t;" + Environment.NewLine +
            "       rgb.b = p;" + Environment.NewLine +
            "   }" + Environment.NewLine +
            "   else if (hi == 2 )" + Environment.NewLine +
            "   {" + Environment.NewLine +
            "       rgb.r = q;" + Environment.NewLine +
            "       rgb.g = v;" + Environment.NewLine +
            "       rgb.b = p;" + Environment.NewLine +
            "   }" + Environment.NewLine +
            "   else if (hi == 3 )" + Environment.NewLine +
            "   {" + Environment.NewLine +
            "       rgb.r = p;" + Environment.NewLine +
            "       rgb.g = v;" + Environment.NewLine +
            "       rgb.b = t;" + Environment.NewLine +
            "   }" + Environment.NewLine +
            "   else if (hi == 4 )" + Environment.NewLine +
            "   {" + Environment.NewLine +
            "       rgb.r = p;" + Environment.NewLine +
            "       rgb.g = q;" + Environment.NewLine +
            "       rgb.b = v;" + Environment.NewLine +
            "   }" + Environment.NewLine +
            "   else" + Environment.NewLine +
            "   {" + Environment.NewLine +
            "       rgb.r = p;" + Environment.NewLine +
            "       rgb.g = p;" + Environment.NewLine +
            "       rgb.b = q;" + Environment.NewLine +
            "   }" + Environment.NewLine +
            "   return rgb;" + Environment.NewLine +
            "}" + Environment.NewLine +
            
            "void main()" + Environment.NewLine +
            "{" + Environment.NewLine +
            "    gl_FragColor = vec4(hsv2rgb(pos),1.0);" + Environment.NewLine +
            "}" + Environment.NewLine;

        #endregion

        public DrawSpectrum()
        {
            #region Initialize
            this.Trace1 = new Equipment.tracepoint[1601];
            this.Trace1Min = new Equipment.tracepoint[1601];
            for (int i = 0; i < 1601; i++)
            {
                decimal freq = (decimal)FreqStart + 6250 * i;
                this.Trace1[i] = new Equipment.tracepoint() { freq = freq, level = -1000 };
                this.Trace1Min[i] = new Equipment.tracepoint() { freq = freq, level = -1000 };
            }
            this.Trace2 = new Equipment.tracepoint[1601];
            for (int i = 0; i < 1601; i++)
            {
                Equipment.tracepoint p = new Equipment.tracepoint()
                {
                    freq = (decimal)FreqStart + 6250 * i,
                    level = -1000
                };
                this.Trace2[i] = p;
            }
            this.Trace3 = new Equipment.tracepoint[1601];
            for (int i = 0; i < 1601; i++)
            {
                Equipment.tracepoint p = new Equipment.tracepoint()
                {
                    freq = (decimal)FreqStart + 6250 * i,
                    level = -1000
                };
                this.Trace3[i] = p;
            }
            Equipment.tracepoint[] Tracet = new Equipment.tracepoint[1601];
            for (int i = 0; i < 1601; i++)
            {
                Equipment.tracepoint p = new Equipment.tracepoint()
                {
                    freq = 99000000 - 5000000 + 6250 * i,
                    level = -1000
                };
                Tracet[i] = p;
            }
            tomeas = new DB.MeasData()
            {
                SpecData = new Equipment.spectrum_data()
                {
                    Trace = Tracet,
                    FreqSpan = 0,
                    FreqCentr = 0,
                    FreqStart = 0,

                },
                ChannelN = 0,
                FreqDN = 0,
                FreqUP = 0,
                FullData = false,
                GCID = "",
                Power = 0,
                StandartSubband = "",
                Techonology = "",
                TechSubInd = -1,

            };
            #endregion

            InitializeComponent();
            TempFreq = new double[3];
            Data = new List<double[]> { };
            Markers_control.DataContext = this;
            //MarkersData_DG.DataContext = this;
            glo.DataContext = this;
            //Time.DataContext = an;
        }
        private void UC_Loaded(object sender, RoutedEventArgs e)
        {
            //((SplashWindow)App.Current.MainWindow).m_mainWindow.PropertyChanged += Style_PropertyChanged;
            //this.OnInitialized(e);
        }
        private void Style_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "StyleChanged")
            {
                Color bg = (Color)this.FindResource("Background_NormalColor");
                BackgroundRGB[0] = ((float)bg.R) / 256;
                BackgroundRGB[1] = ((float)bg.G) / 256;
                BackgroundRGB[2] = ((float)bg.B) / 256;
                Color fg = (Color)this.FindResource("Foreground_NormalColor");
                ForegroundRGB[0] = ((float)fg.R) / 256;
                ForegroundRGB[1] = ((float)fg.G) / 256;
                ForegroundRGB[2] = ((float)fg.B) / 256;

                Color rg = (Color)this.FindResource("Background_DarkColor");
                RXRGB[0] = ((float)rg.R) / 256;
                RXRGB[1] = ((float)rg.G) / 256;
                RXRGB[2] = ((float)rg.B) / 256;

            }
        }
        private void RSRMode_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "Mode")
            {
                RSRMode = rcv.Mode;
            }
        }
        private void ColorWaterfall(float MinLevel, float MaxLevel, float level, out float R, out float G, out float B)
        {
            R = 0f; G = 0f; B = 0f;
            int de = 3;
            if (level >= MinLevel && level <= MinLevel + (MaxLevel - MinLevel) / de)
            {
                R = 0f;
                G = 0f;
                B = MAP(level, MinLevel, MinLevel + (MaxLevel - MinLevel) / de, 0, 1);
            }
            else if (level > MinLevel + (MaxLevel - MinLevel) / de && level <= MinLevel + ((MaxLevel - MinLevel) / de) * 2)
            {
                R = 0f;
                G = MAP(level, MinLevel + ((MaxLevel - MinLevel) / de) * 1, MinLevel + ((MaxLevel - MinLevel) / de) * 2, 0, 1);
                B = MAP(level, MinLevel + ((MaxLevel - MinLevel) / de) * 2, MinLevel + ((MaxLevel - MinLevel) / de) * 1, 0, 1);
            }
            else if (level > MinLevel + ((MaxLevel - MinLevel) / de) * 2 && level <= MinLevel + ((MaxLevel - MinLevel) / de) * 3)
            {
                R = MAP(level, MinLevel + ((MaxLevel - MinLevel) / de) * 2, MinLevel + ((MaxLevel - MinLevel) / de) * 3, 0, 1);
                G = MAP(level, MinLevel + ((MaxLevel - MinLevel) / de) * 3, MinLevel + ((MaxLevel - MinLevel) / de) * 2, 0, 1);
                B = 0f;
            }
            //else if (level > Min + ((Max - Min) / 6) * 3 && level <= Min + ((Max - Min) / 6) * 4)
            //{
            //    R = (float)MainWindow.help.MAP(level, Min + ((Max - Min) / 6) * 2, Min + ((Max - Min) / 6) * 3, 0, 1);
            //    G = (float)MainWindow.help.MAP(level, Min + ((Max - Min) / 6) * 3, Min + ((Max - Min) / 6) * 2, 0, 1);
            //    B = 0f;
            //}
            //else if (level > Min + ((Max - Min) / 6) * 4 && level <= Min + ((Max - Min) / 6) * 5)
            //{

            //}
            //else if (level > Min + ((Max - Min) / 6) * 5 && level <= Max )
            //{
            //}
            //(float)MainWindow.help.MAP(WaterfallData[y].level[x], Min, Max, 0, 1);
        }

        public float MAP(float x, float inMin, float inMax, float outMin, float outMax)
        {
            float d = (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
            if (d > outMax) d = outMax;
            if (d < outMin) d = outMin;
            return d;
        }
        float clamp(float v)
        {
            float t = v < 0 ? 0 : v;
            return t > 1.0f ? 1.0f : t;
        }


        private void openGLControl_OpenGLDraw(object sender, SharpGL.SceneGraph.OpenGLEventArgs args)
        {
            double w = 10, h = 10;
            try
            {
                Color bg = (Color)this.FindResource("Background_NormalColor");
                BackgroundRGB[0] = ((float)bg.R) / 256;
                BackgroundRGB[1] = ((float)bg.G) / 256;
                BackgroundRGB[2] = ((float)bg.B) / 256;
                Color fg = (Color)this.FindResource("Foreground_NormalColor");
                ForegroundRGB[0] = ((float)fg.R) / 256;
                ForegroundRGB[1] = ((float)fg.G) / 256;
                ForegroundRGB[2] = ((float)fg.B) / 256;
                Color rg = (Color)this.FindResource("Background_DarkColor");
                RXRGB[0] = ((float)rg.R) / 256;
                RXRGB[1] = ((float)rg.G) / 256;
                RXRGB[2] = ((float)rg.B) / 256;
                if (openGLControl.ActualWidth > 0)
                    w = openGLControl.ActualWidth;
                if (openGLControl.ActualHeight > 0)
                    h = openGLControl.ActualHeight;
            }
            catch { }
            try
            {
                #region Device Drawing
                if (SpectrumFromDevice)
                {
                    if (Device == App.Sett.Equipments_Settings.SpectrumAnalyzer.ID && an != null && an.IsConnected)
                    {
                        #region
                        Trace1 = an.Trace1;
                        Trace2 = an.Trace2;
                        Trace3 = an.Trace3;
                        Trace1State = (an.Trace1Type.UI != "Blank") ? true : false;
                        Trace2State = (an.Trace2Type.UI != "Blank") ? true : false;
                        Trace3State = (an.Trace3Type.UI != "Blank") ? true : false;
                        FreqCentr = (double)an.FreqCentr;
                        FreqSpan = (double)an.FreqSpan;
                        TracePoints = an.SweepPoints;
                        FreqStart = (double)an.FreqStart;
                        FreqStop = (double)an.FreqStop;

                        RefLevel = (double)an.RefLevel;
                        LowestLevel = (double)(an.RefLevel - an.Range);
                        Range = (double)an.Range;

                        LevelUnit = an.LevelUnit;
                        Markers = an.Markers;
                        NdBState = an.NdBState;
                        if (NdBState)
                        {
                            NdBLevel = an.NdBLevel;
                            NdBResult = an.NdBResult;
                        }
                        OBWState = an.OBWState;
                        if (OBWState)
                        {
                            OBWPercent = an.OBWPercent;
                            OBWChnlBW = an.OBWChnlBW;
                            OBWResult = an.OBWResult;
                        }
                        ChannelPowerState = an.ChannelPowerState;
                        if (ChannelPowerState)
                        {
                            ChannelPowerBW = an.ChannelPowerBW;
                            ChannelPowerResult = an.ChannelPowerResult;
                        }
                        RFOverload = (an.PowerRegister == 1 || an.PowerRegister == 4) ? 1 : 0;
                        #endregion
                    }
                    else if (Device == App.Sett.Equipments_Settings.RuSReceiver.ID && rcv.tc != null && rcv.tc.IsOpen)
                    {
                        #region
                        Trace1 = rcv.Trace1;// new Equipment.TracePoint[rcv.TracePoints];
                        Trace1State = (rcv.Trace1Type.Parameter != "6") ? true : false;
                        Trace2 = rcv.Trace2;
                        Trace2State = (rcv.Trace2Type.Parameter != "6") ? true : false;
                        Trace3 = rcv.Trace3;
                        Trace3State = (rcv.Trace3Type.Parameter != "6") ? true : false;

                        FreqCentr = (double)rcv.FreqCentr;
                        FreqSpan = (double)rcv.FreqSpan;
                        TracePoints = rcv.TracePoints;
                        FreqStart = (double)rcv.FreqStart;
                        FreqStop = (double)rcv.FreqStop;
                        if (rcv.LevelUnitInd == 0)
                        {
                            RefLevel = (double)rcv.RefLevel;
                            LowestLevel = (double)rcv.LowestLevel;
                        }
                        else if (rcv.LevelUnitInd == 1)
                        {
                            RefLevel = (double)rcv.RefLevel - 107;
                            LowestLevel = (double)rcv.LowestLevel - 107;
                        }
                        Range = (double)rcv.Range;
                        LevelUnit = rcv.LevelUnitStr;
                        Markers = rcv.Markers;

                        #endregion
                    }
                    else if (Device == App.Sett.Equipments_Settings.RuSReceiver.ID && rcv.Replay)
                    {
                        #region
                        Trace1 = rcv.Trace1;// new Equipment.TracePoint[rcv.TracePoints];
                        Trace1State = (rcv.Trace1Type.Parameter != "6") ? true : false;
                        Trace2 = rcv.Trace2;
                        Trace2State = (rcv.Trace2Type.Parameter != "6") ? true : false;
                        Trace3 = rcv.Trace3;
                        Trace3State = (rcv.Trace3Type.Parameter != "6") ? true : false;

                        FreqCentr = (double)rcv.FreqCentr;
                        FreqSpan = (double)rcv.FreqSpan;
                        TracePoints = rcv.TracePoints;
                        FreqStart = (double)rcv.FreqStart;
                        FreqStop = (double)rcv.FreqStop;
                        if (rcv.LevelUnitInd == 0)
                        {
                            RefLevel = (double)rcv.RefLevel;
                            LowestLevel = (double)rcv.LowestLevel;
                        }
                        else if (rcv.LevelUnitInd == 1)
                        {
                            RefLevel = (double)rcv.RefLevel - 107;
                            LowestLevel = (double)rcv.LowestLevel - 107;
                        }
                        Range = (double)rcv.Range;
                        LevelUnit = rcv.LevelUnitStr;
                        Markers = rcv.Markers;
                        ShowWaterfall = rcv.ShowWaterfall;
                        if (ShowWaterfall)
                        {
                            while (Data.Count > WFImageHeight / 2 - 1)
                            {
                                Data.RemoveAt(Data.Count() - 1);
                            }
                            Data.Insert(0, new double[Trace1.Length * 3]);
                            for (int i = 0; i < Trace1.Length; i++)
                            {
                                Data[0][i * 3] = (double)Trace1[i].freq;
                                Data[0][i * 3 + 2] = Trace1[i].level; 
                            }
                        }
                        #endregion
                    }
                    else if (Device == App.Sett.Equipments_Settings.RuSTSMx.ID && tsmx.Run)
                    {
                        #region
                        Trace1 = tsmx.Trace;
                        Trace1State = true;
                        Trace2State = false;
                        Trace3State = false;
                        FreqCentr = (double)tsmx.FreqCentr;
                        FreqSpan = (double)tsmx.FreqSpan;
                        TracePoints = tsmx.TracePoints;
                        FreqStart = (double)tsmx.FreqStart;
                        FreqStop = (double)tsmx.FreqStop;
                        RefLevel = tsmx.RefLevel;
                        LowestLevel = tsmx.LowestLevel;

                        Range = tsmx.Range;
                        LevelUnit = "dBm";// tsmx.LevelUnitStr;
                        Markers = rcv.Markers;
                        #endregion
                    }
                    else if (Device == App.Sett.Equipments_Settings.SignalHound.ID && sh.Run)
                    {
                        #region
                        Trace1 = sh.Trace1;// new Equipment.TracePoint[rcv.TracePoints];
                        Trace1State = (sh.Trace1Type.Parameter != "6") ? true : false;
                        Trace1Min = sh.Trace1Min;
                        Trace1MinState = sh.DrawTrace1Min;
                        Trace2 = sh.Trace2;
                        Trace2State = (sh.Trace2Type.Parameter != "6") ? true : false;
                        Trace3 = sh.Trace3;
                        Trace3State = (sh.Trace3Type.Parameter != "6") ? true : false;
                        FreqCentr = (double)sh.FreqCentr;
                        FreqSpan = (double)sh.FreqSpan;
                        FreqStop = (double)sh.FreqStop;
                        FreqStart = (double)sh.FreqStart;
                        RefLevel = (double)sh.RefLevel;
                        LowestLevel = (double)sh.LowestLevel;
                        Range = (double)sh.Range;
                        TracePoints = Trace1.Length;

                        // tsmx.LevelUnitStr;

                        LevelUnit = "dBm";
                        ChannelPowerState = sh.ChannelPowerState;
                        if (ChannelPowerState)
                        {
                            ChannelPowerBW = sh.ChannelPowerBW;
                            ChannelPowerResult = sh.ChannelPowerResult;
                        }

                        NdBState = sh.NdBState;
                        if (NdBState)
                        {
                            NdBLevel = sh.NdBLevel;
                            NdBResult = sh.NdBResult;
                        }
                        //OBWState = sh.OBWState;
                        //if (OBWState)
                        //{
                        //    OBWPercent = sh.OBWPercent;
                        //    OBWChnlBW = sh.OBWChnlBW;
                        //    OBWResult = sh.OBWResult;
                        //}
                        RFOverload = (sh.RFOverload == true) ? 1 : 0;
                        #endregion
                    }
                    if (this.Name == "DrawSpec_SomeMeas")
                    {

                    }
                }
                else
                {
                    if (ShowSomeMeas == true && DataSomeMeas != null && DataSomeMeas.Trace != null)
                    {
                        #region
                        Trace1 = DataSomeMeas.Trace;
                        Trace1State = true;
                        Trace2State = false;
                        Trace3State = false;
                        FreqCentr = (double)DataSomeMeas.FreqCentr;
                        FreqSpan = (double)DataSomeMeas.FreqSpan;
                        TracePoints = DataSomeMeas.Trace.Length;
                        FreqStop = (double)DataSomeMeas.FreqStop;
                        FreqStart = (double)DataSomeMeas.FreqStart;
                        RefLevel = int.MinValue;
                        LowestLevel = int.MaxValue;

                        for (int i = 0; i < Trace1.Length; i++)
                        {
                            RefLevel = Math.Max(RefLevel, (double)Trace1[i].level);
                            LowestLevel = Math.Min(LowestLevel, (double)Trace1[i].level);
                        }
                        RefLevel = (double)DataSomeMeas.RefLevel;
                        Range = (double)DataSomeMeas.Range;
                        LowestLevel = RefLevel - Range;

                        //if (tomeas.MarkerLevelInd > -1 && tomeas.MarkerLevelInd < tomeas.Trace.Length)
                        //{
                        //    Markers[0].Freq = (double)tomeas.Trace[tomeas.MarkerLevelInd].Freq; Markers[0].Level = (double)tomeas.Trace[tomeas.MarkerLevelInd].Level;
                        //    Markers[0].State = true;
                        //}
                        //else { Markers[0].State = false; }
                        //if (tomeas.MarkerT1Ind > -1 && tomeas.MarkerT1Ind < tomeas.Trace.Length)
                        //{
                        //    Markers[1].Freq = (double)tomeas.Trace[tomeas.MarkerT1Ind].Freq; Markers[1].Level = (double)tomeas.Trace[tomeas.MarkerT1Ind].Level;
                        //    Markers[1].State = true;
                        //}
                        //else { Markers[1].State = false; }
                        //if (tomeas.MarkerT2Ind > -1 && tomeas.MarkerT2Ind < tomeas.Trace.Length)
                        //{
                        //    Markers[2].Freq = (double)tomeas.Trace[tomeas.MarkerT2Ind].Freq; Markers[2].Level = (double)tomeas.Trace[tomeas.MarkerT2Ind].Level;
                        //    Markers[2].State = true;
                        //}
                        //else { Markers[2].State = false; }
                        #endregion
                    }
                    else if (tomeas != null && tomeas.SpecData.Trace != null)
                    {
                        #region
                        Trace1 = tomeas.SpecData.Trace;
                        Trace1State = true;
                        Trace2State = false;
                        Trace3State = false;
                        FreqCentr = (double)tomeas.SpecData.FreqCentr;
                        FreqSpan = (double)tomeas.SpecData.FreqSpan;
                        TracePoints = tomeas.SpecData.Trace.Length;
                        FreqStop = (double)tomeas.SpecData.FreqStop;
                        FreqStart = (double)tomeas.SpecData.FreqStart;
                        RefLevel = int.MinValue;
                        LowestLevel = int.MaxValue;

                        for (int i = 0; i < tomeas.SpecData.Trace.Length; i++)
                        {
                            RefLevel = Math.Max(RefLevel, (double)tomeas.SpecData.Trace[i].level);
                            LowestLevel = Math.Min(LowestLevel, (double)tomeas.SpecData.Trace[i].level);
                        }
                        RefLevel = Math.Round(RefLevel);
                        LowestLevel = Math.Round(LowestLevel);
                        RefLevel += 10; LowestLevel -= 10;
                        Range = RefLevel - LowestLevel;


                        if (tomeas.BWData.NdBResult[0] > -1 && tomeas.BWData.NdBResult[0] < tomeas.SpecData.Trace.Length &&
                            tomeas.BWData.NdBResult[1] > -1 && tomeas.BWData.NdBResult[1] < tomeas.SpecData.Trace.Length &&
                            tomeas.BWData.NdBResult[2] > -1 && tomeas.BWData.NdBResult[2] < tomeas.SpecData.Trace.Length)
                        {
                            Markers[0].Freq = tomeas.SpecData.Trace[tomeas.BWData.NdBResult[0]].freq;
                            Markers[0].Level = tomeas.SpecData.Trace[tomeas.BWData.NdBResult[0]].level;
                            Markers[0].MarkerType = 3;
                            Markers[0].MarkerTypeNew = 3;
                            Markers[0].FunctionDataType = 2;
                            Markers[0].Funk2 = (decimal)tomeas.BWData.NdBLevel;
                            Markers[0].State = true;

                            Markers[0].TMarkers[0].Freq = tomeas.SpecData.Trace[tomeas.BWData.NdBResult[1]].freq;
                            Markers[0].TMarkers[0].Level = tomeas.SpecData.Trace[tomeas.BWData.NdBResult[1]].level;
                            Markers[0].TMarkers[0].State = true;

                            Markers[0].TMarkers[1].Freq = tomeas.SpecData.Trace[tomeas.BWData.NdBResult[2]].freq;
                            Markers[0].TMarkers[1].Level = tomeas.SpecData.Trace[tomeas.BWData.NdBResult[2]].level;
                            Markers[0].TMarkers[1].State = true;

                            Markers[0].TMarkers[0].Funk2 = Markers[0].TMarkers[1].Freq - Markers[0].TMarkers[0].Freq;
                            NdBLevel = (decimal)tomeas.BWData.NdBLevel;
                        }
                        else { Markers[0].State = false; }



                        #endregion
                    }
                }
                #endregion
            }
            catch (Exception e)
            {
            }
            try
            {
                double wGrid = (FreqStop - FreqStart) / w;
                //OpenGL gl = openGLControl.OpenGL;
                var gl = args.OpenGL;
                gl.Clear(OpenGL.GL_COLOR_BUFFER_BIT | OpenGL.GL_DEPTH_BUFFER_BIT);
                gl.LoadIdentity();
                gl.Ortho2D(FreqStart - wGrid * 0.1, FreqStop + wGrid * 0.1, LowestLevel - 0.01, RefLevel + 0.01);

                //gl.Enable(OpenGL.GL_BLEND);
                gl.ClearColor(BackgroundRGB[0], BackgroundRGB[1], BackgroundRGB[2], 0.0f); //0.89453f, 0.89453f, 0.89453f, 0.0f); //
                                                                                           //малюем реалтайм
                if (Device == App.Sett.Equipments_Settings.SignalHound.ID && sh.Run && sh.BBDeviceMode == Equipment.SignalHound.BB_Mode.BB_REAL_TIME)
                {
                    #region
                    if (sh.RealTimeFrame != null && sh.RealTimeFrame.Length > 0 && sh.RealTimeFrameWidth > 0 && sh.RealTimeFrameHeight > 0)
                    {
                        float pointsize = (float)Math.Max(w / sh.RealTimeFrameWidth, w / sh.RealTimeFrameHeight);
                        gl.PointSize(pointsize);
                        gl.Begin(BeginMode.Points);

                        float wstep = (float)FreqSpan / sh.RealTimeFrameWidth;
                        float hstep = (float)Range / sh.RealTimeFrameHeight;
                        int FrameLength = sh.RealTimeFrame.Length;
                        int tempx = 0, tempy = 0;
                        float minf = sh.RealTimeFrame.Min() /*- 0.005f*/, maxf = sh.RealTimeFrame.Max() - 0.015f;
                        double locreflevel = LowestLevel;

                        //gl.Color(Trace1RGB[0], Trace1RGB[1], Trace1RGB[2]);
                        //double[] data1 = new double[sh.RealTimeFrame.Length * 2];
                        //for (int i = 0; i < sh.RealTimeFrame.Length; i++)
                        //{
                        //    tempx++;
                        //    if (tempx == sh.RealTimeFrameWidth) { tempx = 0; tempy++; }
                        //    data1[i * 2] = FreqStart + tempx * wstep;
                        //    data1[i * 2 + 1] = locreflevel + tempy * hstep;
                        //}
                        //gl.PushMatrix();

                        ////gl.EnableClientState(OpenGL.GL_VERTEX_ARRAY);
                        ////gl.VertexPointer(2, 0, data1);
                        ////gl.DrawArrays(OpenGL.GL_POINTS, 0, sh.RealTimeFrame.Length);
                        ////gl.DisableClientState(OpenGL.GL_VERTEX_ARRAY);
                        ////gl.End();
                        //gl.EnableClientState(OpenGL.GL_VERTEX_ARRAY);
                        //gl.VertexPointer(2, 0, data1);
                        //gl.DrawArrays(OpenGL.GL_LINE_STRIP, 0, Trace1.Length);
                        //gl.DisableClientState(OpenGL.GL_VERTEX_ARRAY);
                        //gl.End();
                        //gl.PopMatrix();


                        for (int i = 0; i < FrameLength; i++)
                        {
                            tempx++;
                            if (tempx == sh.RealTimeFrameWidth) { tempx = 0; tempy++; }

                            if (sh.RealTimeFrame[i] != 0 && sh.RealTimeFrame[i] > 0.002f)
                            {
                                ////float d = MAP(sh.RealTimeFrame[i], minf, maxf, 0, 1);
                                //float red = clamp(1.0f - 2.0f * sh.RealTimeFrame[i]*30 - 1.0f);
                                //float green = clamp(1.0f - 2.0f * sh.RealTimeFrame[i] * 30);
                                //float blue = clamp(1.0f - 2.0f * sh.RealTimeFrame[i] * 30 + 1.0f);
                                //gl.Color(0.1f, 0, 0);
                                //gl.Color(red, green, blue);
                                float R = 0, G = 0, B = 0;
                                //RainbowNumberToColor(sh.RealTimeFrame[i] * 50, out R, out G, out B);
                                ColorWaterfall(minf, maxf, sh.RealTimeFrame[i], out R, out G, out B);

                                gl.Color(R, G, B);
                                ////var bytes = BitConverter.GetBytes(sh.RealTimeFrame[i]*10000);
                                ////Color.FromArgb(bytes[2], bytes[1], bytes[0]);

                                //gl.Color((float)R / 255, (float)G / 255, (float)B / 255);
                                gl.Vertex(FreqStart + tempx * wstep, locreflevel + tempy * hstep);
                            }
                        }
                        gl.End();

                    }
                    #endregion
                }


                if (Device == App.Sett.Equipments_Settings.RuSReceiver.ID && (rcv.Mode.Mode == "FFM" || rcv.Mode.Mode == "DF"))
                {
                    gl.Color(RXRGB[0], RXRGB[1], RXRGB[2]);

                    gl.Begin(BeginMode.Polygon);
                    gl.Vertex(FreqCentr - ((double)rcv.DemodBW / 2), RefLevel);
                    gl.Vertex(FreqCentr - ((double)rcv.DemodBW / 2), LowestLevel);
                    gl.Vertex(FreqCentr + ((double)rcv.DemodBW / 2), LowestLevel);
                    gl.Vertex(FreqCentr + ((double)rcv.DemodBW / 2), RefLevel);
                    gl.End();
                }

                if (ChannelPowerState)
                {
                    gl.Color(0.9f, 0.9f, 0.9f);


                    gl.Begin(BeginMode.Polygon);
                    gl.Vertex(FreqCentr - ((double)ChannelPowerBW / 2), (double)ChannelPowerResult);
                    gl.Vertex(FreqCentr - ((double)ChannelPowerBW / 2), RefLevel - Range);
                    gl.Vertex(FreqCentr + ((double)ChannelPowerBW / 2), RefLevel - Range);
                    gl.Vertex(FreqCentr + ((double)ChannelPowerBW / 2), (double)ChannelPowerResult);
                    gl.End();
                }
                double gridW = FreqSpan / 10;
                gl.Begin(BeginMode.Lines);
                //float fcol = 0.3098f; //((i % 10) == 0) ? 0.3f : 0.15f;
                gl.Color(ForegroundRGB[0], ForegroundRGB[1], ForegroundRGB[2]);
                for (int i = 0; i <= 10; i++)
                {
                    gl.Vertex(FreqStart + i * gridW, RefLevel);
                    gl.Vertex(FreqStart + i * gridW, LowestLevel);
                }
                gl.End();

                // Горизонтальные линии сетки
                gl.Begin(BeginMode.Lines);
                gl.Color(ForegroundRGB[0], ForegroundRGB[1], ForegroundRGB[2]);
                //верхняя линия
                gl.Vertex(FreqStart, RefLevel);
                gl.Vertex(FreqStop, RefLevel);

                for (double i = (((int)RefLevel) / 10) * 10; i >= (int)LowestLevel; i -= (RefLevel - LowestLevel) / 10)
                {
                    double shift = FreqStart + wGrid * String.Concat((int)i, LevelUnit).Length * 7.5;
                    gl.Vertex(shift, i);
                    gl.Vertex(FreqStop, i);
                }
                //нижняя линия
                gl.Vertex(FreqStart, LowestLevel);
                gl.Vertex(FreqStop, LowestLevel);
                gl.End();

                //подписи шкалы
                for (int i = 0; i < 11; i++)
                {
                    int y = (int)(((int)RefLevel / 10) * 10 - (Range / 10) * i);
                    if (y < RefLevel - Range / 50 && y > RefLevel - Range + Range / 50)
                    {
                        double y1 = MainWindow.help.MAP(y, LowestLevel, RefLevel, 0, h);
                        gl.DrawText(2, (int)y1 - 3, ForegroundRGB[0], ForegroundRGB[1], ForegroundRGB[2], "Segoe UI", 10.0f, string.Format(String.Concat(Math.Round((int)(RefLevel / 10) * 10 - (Range / 10) * i,1), LevelUnit), 10, 8));
                        gl.Flush();

                    }
                }
                //gl.DrawText(10, (int)13, 1.0f, 0.0f, 0.0f, "Segoe UI Mono", 10.0f, string.Format(String.Concat((int)(RefLevel / 10) * 10 - (Range / 10) *1, LevelUnit), 10, 8));
                //gl.Flush();
                if (Trace1State && Trace1 != null)
                {
                    gl.Begin(BeginMode.LineStrip);
                    gl.Color(Trace1RGB[0], Trace1RGB[1], Trace1RGB[2]);
                    for (int p = 0; p < Trace1.Length; p++)
                    {
                        if (Trace1[p].level != double.NaN)
                            gl.Vertex((double)Trace1[p].freq, Trace1[p].level);
                    }
                    gl.End();
                    //gl.Flush();
                    //double[] data1 = new double[Trace1.Length * 2];
                    //for (int i = 0; i < Trace1.Length; i++)
                    //{


                    //    data1[i * 2] = (double)Trace1[i].Freq;
                    //    data1[i * 2 + 1] = (double)Trace1[i].Level;

                    //}
                    //gl.PushMatrix();

                    ////gl.EnableClientState(OpenGL.GL_VERTEX_ARRAY);
                    ////gl.VertexPointer(2, 0, data1);
                    ////gl.DrawArrays(OpenGL.GL_POINTS, 0, sh.RealTimeFrame.Length);
                    ////gl.DisableClientState(OpenGL.GL_VERTEX_ARRAY);
                    ////gl.End();
                    //gl.EnableClientState(OpenGL.GL_VERTEX_ARRAY);
                    //gl.VertexPointer(2, 0, data1);
                    //gl.DrawArrays(OpenGL.GL_LINE_STRIP, 0, Trace1.Length);
                    //gl.DisableClientState(OpenGL.GL_VERTEX_ARRAY);
                    //gl.End();
                    //gl.PopMatrix();
                }
                if (Trace1MinState && Trace1Min != null)
                {
                    gl.Begin(BeginMode.LineStrip);
                    gl.Color(Trace1RGB[0], Trace1RGB[1], Trace1RGB[2]);
                    for (int i = 0; i < Trace1Min.Length; i++)
                    {
                        gl.Vertex((double)Trace1Min[i].freq, (double)Trace1Min[i].level);
                    }
                    gl.End();
                }
                if (Trace2State && Trace2 != null)
                {
                    gl.Begin(BeginMode.LineStrip);
                    gl.Color(Trace2RGB[0], Trace2RGB[1], Trace2RGB[2]);
                    for (int i = 0; i < Trace2.Length; i++)
                    {
                        gl.Vertex((double)Trace2[i].freq, (double)Trace2[i].level);
                    }
                    gl.End();
                }
                if (Trace3State && Trace3 != null)
                {
                    gl.Begin(BeginMode.LineStrip);
                    gl.Color(Trace3RGB[0], Trace3RGB[1], Trace3RGB[2]);
                    for (int i = 0; i < Trace3.Length; i++)
                    {
                        gl.Vertex((double)Trace3[i].freq, (double)Trace3[i].level);
                    }
                    gl.End();
                }
                #region Markers

                int count = 0;
                for (int i = 0; i < Markers.Count; i++)
                {
                    if (Markers[i].State == true)
                    {
                        count++;
                        gl.Begin(BeginMode.LineLoop);
                        gl.Color(ForegroundRGB[0], ForegroundRGB[1], ForegroundRGB[2]);

                        gl.Vertex((float)Markers[i].Freq, (float)Markers[i].Level);
                        gl.Vertex((double)Markers[i].Freq - (FreqSpan / w) * 4, Markers[i].Level + (Range / h) * 7);
                        gl.Vertex((double)Markers[i].Freq + (FreqSpan / w) * 4, Markers[i].Level + (Range / h) * 7);
                        gl.End();
                        gl.Begin(BeginMode.Lines);

                        gl.Vertex((float)Markers[i].Freq, (float)RefLevel);
                        gl.Vertex((float)Markers[i].Freq, Markers[i].Level + (Range / h) * 26);
                        gl.End();
                        gl.Begin(BeginMode.Lines);

                        gl.Vertex((float)Markers[i].Freq, Markers[i].Level - (Range / h) * 1);
                        gl.Vertex((float)Markers[i].Freq, (float)LowestLevel);
                        gl.End();

                        double x = MainWindow.help.MAP((double)Markers[i].Freq, FreqStart, FreqStop, 0, w);
                        double y = MainWindow.help.MAP(Markers[i].Level, LowestLevel, RefLevel, 0, h);
                        gl.DrawText((int)x - 6, (int)y + 13, 1.0f, 0.0f, 0.0f, "Segoe UI", 11.0f, Markers[i].Name);
                        gl.Flush();
                        gl.End();
                        if (Markers[i].MarkerType == 3 || Markers[i].MarkerType == 4)
                        {
                            if (Markers[i].MarkerType == 3)
                            {
                                gl.Begin(BeginMode.Lines);
                                gl.Vertex(FreqStart, Markers[i].Level - (double)NdBLevel);
                                gl.Vertex(FreqStop, Markers[i].Level - (double)NdBLevel);
                                gl.End();
                            }
                            for (int j = 0; j < Markers[i].TMarkers.Count(); j++)
                            {
                                if (Markers[i].TMarkers[j].State == true)
                                {

                                    gl.Begin(BeginMode.LineLoop);
                                    gl.Color(ForegroundRGB[0], ForegroundRGB[1], ForegroundRGB[2]);

                                    gl.Vertex((float)Markers[i].TMarkers[j].Freq, (float)Markers[i].TMarkers[j].Level);
                                    gl.Vertex((double)Markers[i].TMarkers[j].Freq - (FreqSpan / w) * 4, Markers[i].TMarkers[j].Level + (Range / h) * 7);
                                    gl.Vertex((double)Markers[i].TMarkers[j].Freq + (FreqSpan / w) * 4, Markers[i].TMarkers[j].Level + (Range / h) * 7);
                                    gl.End();
                                    gl.Begin(BeginMode.Lines);

                                    gl.Vertex((float)Markers[i].TMarkers[j].Freq, (float)RefLevel);
                                    gl.Vertex((float)Markers[i].TMarkers[j].Freq, Markers[i].TMarkers[j].Level + (Range / h) * 26);
                                    gl.End();
                                    gl.Begin(BeginMode.Lines);

                                    gl.Vertex((float)Markers[i].TMarkers[j].Freq, Markers[i].TMarkers[j].Level - (Range / h) * 1);
                                    gl.Vertex((float)Markers[i].TMarkers[j].Freq, (float)LowestLevel);
                                    gl.End();

                                    double x1 = MainWindow.help.MAP((double)Markers[i].TMarkers[j].Freq, FreqStart, FreqStop, 0, w);
                                    double y1 = MainWindow.help.MAP(Markers[i].TMarkers[j].Level, LowestLevel, RefLevel, 0, h);
                                    gl.DrawText((int)x1 - 6, (int)y1 + 13, 1.0f, 0.0f, 0.0f, "Segoe UI", 11.0f, Markers[i].TMarkers[j].Name);

                                    gl.Flush();
                                    gl.End();
                                }
                            }
                        }
                        gl.Flush();
                    }
                }
                //изменяем высоту таблици маркеров так бо xaml задолбал
                if (MarkerLegend.ActualHeight == 0 && count > 0) MarkerLegend.Height = GridLength.Auto;
                if (MarkerLegend.ActualHeight > 0 && count == 0) MarkerLegend.Height = new GridLength(0);
                #endregion Markers

                if (RFOverload != 0)//&& !ShowUpPanel)
                {
                    if (RFOverload == 1) gl.DrawText((int)w - 110, (int)h - 13, 1.0f, 0.0f, 0.0f, "Segoe UI", 14.0f, "RF Overload");
                    else if (RFOverload == 1) gl.DrawText((int)w - 110, (int)h - 13, 1.0f, 0.0f, 0.0f, "Segoe UI", 14.0f, "IF Overload");
                    gl.Flush();
                }
                gl.Flush();
            }
            catch (Exception e)
            {
            }
        }
        private void openGLControl_Resized(object sender, SharpGL.SceneGraph.OpenGLEventArgs args)
        {
            //  Get the OpenGL instance.
            //OpenGL gl = openGLControl.OpenGL;
            SharpGL.WPF.OpenGLControl cntr = (OpenGLControl)sender;
            var gl = args.OpenGL;

            //  Create an orthographic projection.
            //gl.Viewport(0, 0, (int)openGLControl1.ActualWidth, (int)openGLControl1.ActualHeight);
            //gl.MatrixMode(OpenGL.GL_PROJECTION);
            gl.LoadIdentity();
            double wGrid = 0.1;
            if (cntr.ActualWidth > 0)
                wGrid = (FreqStop - FreqStart) / cntr.ActualWidth;
            gl.Ortho(FreqStart - wGrid, FreqStop + wGrid, LowestLevel - 0.01, RefLevel + 0.01, 1, -1);


            ////gl.MatrixMode(OpenGL.GL_MODELVIEW);
            ////gl.LoadIdentity();
            ////////gl.MatrixMode(MatrixMode.Projection);
            ////////gl.LoadIdentity();
            ////////gl.Ortho(0, openGLControl1.ActualWidth, openGLControl1.ActualHeight, 0, -10, 10);

            //////  Back to the modelview.
            //////gl.MatrixMode(MatrixMode.Modelview);
        }
        private void openGLControl_OpenGLInitialized(object sender, OpenGLEventArgs args)
        {
            args.OpenGL.Enable(OpenGL.GL_DEPTH_TEST);
            args.OpenGL.ClearColor(0, 0, 0, 0);
        }

        #region Mouse
        private void openGLControl_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (SpectrumFromDevice)
            {
                //MouseDown = "openGLControl_MouseDown" MouseUp = "openGLControl_MouseUp" PreviewMouseMove = "openGLControl_PreviewMouseMove"
                double glh = openGLControl.ActualHeight;
                double glw = openGLControl.ActualWidth;
                double X = e.GetPosition((OpenGLControl)sender).X;
                double Y = e.GetPosition((OpenGLControl)sender).Y;
                if (e.LeftButton == MouseButtonState.Pressed && Y < glh * 0.9)
                {
                    double x = MainWindow.help.MAP(X, 0, glw, FreqStart, FreqStop);
                    for (int i = 0; i < Markers.Count(); i++)
                    {
                        if (Markers[i].State && (((double)Markers[i].Freq - (FreqSpan / glw) * 9) < x && ((double)Markers[i].Freq + (FreqSpan / glw) * 9) > x))
                        {
                            selectedMarker = i;
                        }
                    }
                }
                if (e.LeftButton == MouseButtonState.Pressed && Y > glh * 0.9)
                {
                    MouseDownFreq = MainWindow.help.MAP(X, 0, glw, FreqStart, FreqStop);
                    if (Device == App.Sett.Equipments_Settings.SpectrumAnalyzer.ID) an.SetFreqCentr((decimal)MouseDownFreq);
                    else if (Device == App.Sett.Equipments_Settings.SignalHound.ID) sh.SetFreqCentrSqeeping((decimal)MouseDownFreq);
                    else if (Device == App.Sett.Equipments_Settings.RuSReceiver.ID)
                    {
                        if (rcv.Mode.Mode == "FFM")
                        {
                            rcv.FFMFreqCentrToSet = ((decimal)MouseDownFreq);
                            rcv.SetFFMFreqCentr(rcv.FFMFreqCentrToSet);
                        }
                        else if (rcv.Mode.Mode == "PSCAN")
                        {
                            rcv.PScanFreqCentr = ((decimal)MouseDownFreq);
                            rcv.SetPSCANFreqCentr(rcv.PScanFreqCentr);
                        }
                    }
                }
            }
        }

        private void openGLControl_MouseUp(object sender, MouseButtonEventArgs e)
        {
            selectedMarker = -1;
        }
        private void openGLControl_PreviewMouseMove(object sender, MouseEventArgs e)
        {
            if (SpectrumFromDevice)
            {
                double glh = openGLControl.ActualHeight;
                double glw = openGLControl.ActualWidth;
                double X = e.GetPosition((OpenGLControl)sender).X;
                double Y = e.GetPosition((OpenGLControl)sender).Y;
                if (e.LeftButton == MouseButtonState.Pressed && selectedMarker >= 0)
                {
                    if (Markers[selectedMarker].MarkerType != 2)
                    {
                        decimal x = (decimal)MainWindow.help.MAP(X, 0, glw, FreqStart, FreqStop);
                        if (Device == App.Sett.Equipments_Settings.SpectrumAnalyzer.ID)
                        {
                            int index = LM.FindMarkerIndOnTrace(Trace1, x);
                            an.SetMarkerFromIndex(Markers[selectedMarker], index);
                        }
                        else if (Device == App.Sett.Equipments_Settings.SignalHound.ID)
                        {
                            int index = LM.FindMarkerIndOnTrace(Trace1, x);
                            sh.SetMarkerFromIndex(Markers[selectedMarker], index);
                            //MarkersSH[selectedMarker].IndexOnTrace = LM.FindMarkerIndOnTrace(Trace1, x);
                            //MarkersSH[selectedMarker].Freq = Trace1[MarkersSH[selectedMarker].IndexOnTrace].Freq;
                        }
                        else if (Device == App.Sett.Equipments_Settings.RuSReceiver.ID)
                        {
                            int index = LM.FindMarkerIndOnTrace(Trace1, x);
                            rcv.SetMarkerFromIndex(Markers[selectedMarker], index);
                        }
                    }
                }
                if (selectedMarker < 0)
                {
                    double x = MainWindow.help.MAP(X, 0, glw, FreqStart, FreqStop);
                    bool cur = false;
                    for (int i = 0; i < Markers.Count(); i++)
                    {
                        if (Markers[i].State && (((double)Markers[i].Freq - (FreqSpan / glw) * 9) < x && ((double)Markers[i].Freq + (FreqSpan / glw) * 9) > x))
                        {
                            cur = true;
                        }
                    }
                    if (cur && Y < glh * 0.9) { openGLControl.Cursor = Cursors.SizeWE; }
                    else if ((Y > glh * 0.9 && Y < glh)) { openGLControl.Cursor = Cursors.IBeam; }
                    else { openGLControl.Cursor = Cursors.Arrow; }
                }
                //можно было менять частоту движением нажатой мыши
                //if (e.LeftButton == MouseButtonState.Pressed && Y > glh * 0.9 && selectedMarker < 0)
                //{
                //    //double x = MainWindow.help.MAP(X, 0, glw, FreqStart, FreqStop);
                //    ////sh.FreqCentr = (decimal)x;
                //    //sh.SetFreqCentrSqeeping((decimal)x);
                //    ////An.FreqCentr += x;
                //    ////An.dm += An.SetFreq;
                //}
            }
        }

        #endregion Mouse




        /// <summary>
        /// высота в пикселях
        /// </summary>
        int WFImageHeight = 1;
        /// <summary>
        /// ширина в пикселях
        /// </summary>
        int WFImageWidth = 1;

        private void waterfall2_OpenGLDraw(object sender, SharpGL.SceneGraph.OpenGLEventArgs args)
        {
            try
            {
                var gl = args.OpenGL;
                gl.Clear(OpenGL.GL_COLOR_BUFFER_BIT | OpenGL.GL_DEPTH_BUFFER_BIT);
                gl.ClearColor(0.0f, 0.0f, 0.0f, 0f);

                gl.LoadIdentity();
                //gl.Ortho(FreqStart, FreqStop, ImageHeight, 0, 0, 120);//0, TracePoints  , -1000f,1000f
                //float f = 0 - RefLevel;
                gl.Ortho(FreqStart, FreqStop, WFImageHeight / 2, 0, 0 - RefLevel, 0 - LowestLevel);//0, TracePoints  , -1000f,1000f
                //gl.Viewport(0, 0, ImageWidth, ImageHeight);


                
                if (ShowWaterfall)
                {
                    program.Push(gl, null);
                    gl.LineWidth(2.0f);
                    for (int h = 0; h < WFImageHeight; h++)
                    {
                        if (h < Data.Count)
                        {
                            for (int i = 0; i < Data[h].Length / 3; i++)
                            {
                                Data[h][i * 3 + 1] = h;
                            }
                            gl.PushMatrix();
                            gl.EnableClientState(OpenGL.GL_VERTEX_ARRAY);
                            gl.VertexPointer(3, 0, Data[h]);
                            gl.DrawArrays(OpenGL.GL_LINE_STRIP, 0, Data[h].Length / 3);
                            gl.DisableClientState(OpenGL.GL_VERTEX_ARRAY);
                            gl.PopMatrix();
                        }
                    }
                    gl.Flush();
                    program.Pop(gl, null);
                }
                
            }
            catch (Exception e)
            {
            }
        }
        private void waterfall2_Resized(object sender, SharpGL.SceneGraph.OpenGLEventArgs args)
        {
            SharpGL.WPF.OpenGLControl cntr = (OpenGLControl)sender;
            if (cntr.ActualHeight > 0)
                WFImageHeight = (int)cntr.ActualHeight;
            else
                WFImageHeight = 1;
            if (cntr.ActualWidth > 0)
                WFImageWidth = (int)cntr.ActualWidth;
            else
                WFImageWidth = 1;

            //System.Diagnostics.Debug.WriteLine(ImageWidth + " " + ImageHeight);
            var gl = args.OpenGL;
            //  Create an orthographic projection.
            gl.LoadIdentity();
            gl.Ortho(FreqStart, FreqStop, WFImageHeight, 0, -1, 1);


        }
        private void waterfall2_OpenGLInitialized(object sender, OpenGLEventArgs args)
        {
            OpenGL gl = args.OpenGL;

            gl.Enable(OpenGL.GL_DEPTH_TEST);
            gl.ShadeModel(OpenGL.GL_FLAT);

            //  Create a vertex shader.
            VertexShader vertexShader = new VertexShader();
            vertexShader.CreateInContext(gl);
            vertexShader.SetSource(VertexShader);

            //  Create a fragment shader.
            FragmentShader fragmentShader = new FragmentShader();
            fragmentShader.CreateInContext(gl);
            fragmentShader.SetSource(FragmentShader);

            //  Compile them both.
            vertexShader.Compile();
            fragmentShader.Compile();

            //  Build a program.
            program.CreateInContext(gl);
            shaderProgramObject = program.ProgramObject;
            //  Attach the shaders.
            program.AttachShader(vertexShader);
            program.AttachShader(fragmentShader);

            program.Link();
        }
        ShaderProgram program = new ShaderProgram();
        public uint ShaderProgramObject
        {
            get { return shaderProgramObject; }
        }
        private uint shaderProgramObject = 0;
        /// <summary>
        /// A mapping of uniform names to locations. This allows us to very easily specify 
        /// uniform data by name, quickly looking up the location first if needed.
        /// </summary>
        private readonly Dictionary<string, int> uniformNamesToLocations = new Dictionary<string, int>();
        public int GetUniformLocation(OpenGL gl, string uniformName)
        {
            //  If we don't have the uniform name in the dictionary, get it's 
            //  location and add it.
            if (uniformNamesToLocations.ContainsKey(uniformName) == false)
            {
                uniformNamesToLocations[uniformName] = gl.GetUniformLocation(shaderProgramObject, uniformName);
                //  TODO: if it's not found, we should probably throw an exception.
            }

            //  Return the uniform location.
            return uniformNamesToLocations[uniformName];
        }


        public virtual void OnPropertyChanged(string propName)
        {

            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propName));

        }

        public event PropertyChangedEventHandler PropertyChanged;


    }
}
